<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[alighters]]></title>
  <link href="http://alighters.github.io/blog/atom.xml" rel="self"/>
  <link href="http://alighters.github.io/blog/"/>
  <updated>2021-01-10T23:44:23+08:00</updated>
  <id>http://alighters.github.io/blog/</id>
  <author>
    <name><![CDATA[alighters]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Neovim 初学与配置]]></title>
    <link href="http://alighters.github.io/blog/blog/2021/01/10/neovim-initial-setup/"/>
    <updated>2021-01-10T23:36:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2021/01/10/neovim-initial-setup</id>
    <content type="html"><![CDATA[<h2>Install</h2>

<p>Mac 环境下的安装</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install nvim
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>检查 nvim 环境
在 nvim 下，执行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>:checkhealth
</span></code></pre></td></tr></table></div></figure>


<h2>Neovim Terminal mode</h2>

<blockquote><p>终端模式          Terminal mode
终端缓冲区   Terminal Buffer  （指的是一个进程）
tnoremap      用于创建终端模式下的键映射</p></blockquote>

<h3>1. 开启终端模式</h3>

<p>进入命令行模式，输入如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>:terminal
</span><span class='line'>:term         （上者的简写）
</span><span class='line'>:te           <span class="o">(</span>继续简写<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>:!{cmd}               命令行模式下，执行命令内容
:read !{cmd}          将命令执行后的内容，添加至当前缓冲区
:terminal {cmd}           通过执行终端模式的命令内容，添加至当前缓冲区
:ls                   查看当前所有缓冲区的进程编号</p>

<p>&lt;C-^>                 切换缓冲区
:1b                   切换到至第一个缓冲区
:1bwipeout!           直接关闭第一个缓冲区的内容</p>

<p>:qa!                  退出 neovim，所有终端缓冲区的内容都会被关闭</p></blockquote>

<h3>2. 管理终端缓冲区窗口</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>:terminal <span class="o">{</span>cmd<span class="o">}</span>                当前窗口创建缓冲区
</span><span class='line'>:split <span class="p">|</span> terminal <span class="o">{</span>cmd<span class="o">}</span>      横向分割创建窗口
</span><span class='line'>:vsplit <span class="p">|</span> terminal <span class="o">{</span>cmd<span class="o">}</span>     纵向分割创建窗口
</span><span class='line'>:tabedit <span class="p">|</span> terminal <span class="o">{</span>cmd<span class="o">}</span>        新标签页创建窗口
</span></code></pre></td></tr></table></div></figure>


<h3>3. 终端缓冲区使用普通模式的命令</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>nvim +terminal
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>打开 nvim，并进入终端模式
在切回普通模式时，可以执行常用的 vim 键，如 y p 等。执行 p，会将当前寄存器中的内容粘贴至光标处。</p></blockquote>

<p>移动常用的命令：</p>

<blockquote><p>搜索命令 ：如 /duo ，通过 n / N 进行下一处、上一处的跳转</p>

<p>gg            跳到顶部
G             跳到底部
<C-y>         向上滚动一行
<C-e>         向下滚动一行
<C-u>         向上滚动半页
<C-d>         向下滚动半页
<C-f>         向下滚动一页
<C-b>         向上滚动一页</p>

<p>在显示出的文件路径上，可以通过 gf 命令，在新开的缓冲区中打开此文件。
&lt;C-^> 可进行切换。</p></blockquote>

<h3>4. 向终端缓冲区发送命令</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>:echo b:terminal_job_id      输出终端缓冲区所在的窗口任务编号
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>:call    jobsend<span class="o">(</span>1, “<span class="se">\&lt;</span>C-c&gt;npm run server<span class="se">\&lt;</span>CR&gt;<span class="err">&quot;</span><span class="o">)</span>       向窗口1发送重启服务的命令
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>参数 2 需要使用双引号</p></blockquote>

<p>创建一个临时命令</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>:command Restart call jobsend<span class="o">(</span>1, <span class="s2">&quot;\&lt;C-c&gt;npm run server\&lt;CR&gt;&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>Plugins</h2>

<h3>配置 Plug Vim</h3>

<p><a href="[GitHub%20-%20junegunn/vim-plug:%20Minimalist%20Vim%20Plugin%20Manager](https://github.com/junegunn/vim-plug"> Plug vim </a>)</p>

<h4>Auto Install</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; Install vim-plug if not found</span>
</span><span class='line'><span class="k">if</span> empty<span class="p">(</span>glob<span class="p">(</span><span class="s1">&#39;~/.vim/autoload/plug.vim&#39;</span><span class="p">))</span>
</span><span class='line'>  <span class="k">silent</span> <span class="p">!</span>curl <span class="p">-</span>fLo <span class="p">~</span><span class="sr">/.vim/</span>autoload/plug.<span class="k">vim</span> <span class="p">--</span>create<span class="p">-</span>dirs
</span><span class='line'>    \ https:<span class="sr">//</span>raw.githubusercontent.<span class="k">com</span><span class="sr">/junegunn/</span><span class="k">vim</span><span class="p">-</span>plug<span class="sr">/master/</span>plug.<span class="k">vim</span>
</span><span class='line'><span class="k">endif</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Run PlugInstall if there are missing plugins</span>
</span><span class='line'><span class="k">autocmd</span> <span class="nb">VimEnter</span> * <span class="k">if</span> len<span class="p">(</span>filter<span class="p">(</span>values<span class="p">(</span><span class="k">g</span>:plugs<span class="p">),</span> <span class="s1">&#39;!isdirectory(v:val.dir)&#39;</span><span class="p">))</span>
</span><span class='line'>  \<span class="p">|</span> PlugInstall <span class="p">--</span><span class="k">sync</span> <span class="p">|</span> source $MYVIMRC
</span><span class='line'>\<span class="p">|</span> <span class="k">endif</span>
</span></code></pre></td></tr></table></div></figure>


<h3>1. Coc.vim</h3>

<h4>Coc Info</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span>CocInfo
</span></code></pre></td></tr></table></div></figure>


<h4>Coc help</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span><span class="k">h</span> coc<span class="p">-</span>nvim
</span></code></pre></td></tr></table></div></figure>


<h4>Coc config</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span>CocConfig
</span></code></pre></td></tr></table></div></figure>


<h4>Install extension</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span>CocInstall coc<span class="p">-</span>json coc<span class="p">-</span>tsserver
</span></code></pre></td></tr></table></div></figure>


<h4>install python</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span>CocInstall coc<span class="p">-</span>python
</span></code></pre></td></tr></table></div></figure>


<h4>commands</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span>CocCommand
</span></code></pre></td></tr></table></div></figure>


<h4>check the log info</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span>CocOpenLog
</span></code></pre></td></tr></table></div></figure>


<h3>Session 管理</h3>

<h4>1. 保存会话</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span><span class="k">mksession</span>
</span></code></pre></td></tr></table></div></figure>


<h4>2.  加载会话</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">vim</span> <span class="p">-</span>S
</span></code></pre></td></tr></table></div></figure>


<p>或者使用 source</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span>source Session.<span class="k">vim</span>
</span></code></pre></td></tr></table></div></figure>


<h4>3. 自定义会话</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span><span class="k">mksession</span> mysession.<span class="k">vim</span>
</span><span class='line'>
</span><span class='line'><span class="k">vim</span> <span class="p">-</span>S mysession.<span class="k">vim</span>
</span></code></pre></td></tr></table></div></figure>


<h4>4. Obsession Plugin</h4>

<p>tpope/vim-obsession</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span>Obsession <span class="p">(</span>:Obsess<span class="p">)</span>         开启自动记录会话，是一个开关，再次输入会自动关闭
</span><span class='line'><span class="p">:</span>Obsession<span class="p">!</span> <span class="p">(</span>:Obsess<span class="p">!)</span>        完全关闭自动保存
</span></code></pre></td></tr></table></div></figure>


<h4>5. 持久化 Undo</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">set</span> <span class="nb">undofile</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考资料</h2>

<p><a href="https://medium.com/better-programming/setting-up-neovim-for-web-development-in-2020-d800de3efacd">Setting Up Neovim for Web Development in 2020 | by Dominik Tarnowski | Better Programming | Medium</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1494. Parallel Courses II]]></title>
    <link href="http://alighters.github.io/blog/blog/2020/09/20/1494-parallel-courses-ii/"/>
    <updated>2020-09-20T23:04:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2020/09/20/1494-parallel-courses-ii</id>
    <content type="html"><![CDATA[<h1>问题</h1>

<p>拓扑排序在此题不适合的原因，因为会存在多个入度为 0 的节点，可能出现选取的并不是最优解的情况。</p>

<p>举例：
[ [ 1, 4] [3, 4] [ 2, 5] [4, 5] [ 4, 6] [ 5, 6]]
K = 2</p>

<blockquote><p>当第一次选取的为 1，2 时，并不是最优解
必须选取 1， 3 或者  2，4 才可</p></blockquote>

<!-- more -->


<h1>方案一</h1>

<p>以 bitmask 来记录当前学习的课程，动态规划来得到最合理的安排（即最小的用时）</p>

<ol>
<li>全部课程修完， 则用 dp[ 2 ** n - 1] 来表示。</li>
<li>全部的状态为 0 -> 2 ** n - 1</li>
</ol>


<h2>前置 - 依赖关系</h2>

<p>这一步需要记录依赖关系的状态数据</p>

<blockquote><p>将依赖的前置课程，以二进制中 1 的状态进行存储
依赖关系 i, pre
preq[I-1]  |=  1 &lt;&lt; (pre - 1)</p></blockquote>

<h2>状态转移</h2>

<h3>1. 定义状态</h3>

<p>dp[i] 表示当前的课程组合学习，所需要的最小步数</p>

<blockquote><p>i 的范围  0 -> 2 ** n - 1
dp[0] = 0</p></blockquote>

<h3>2. 寻找当前可以学习的课程</h3>

<p>如： 当前的状态 i ，需要根据 i ，寻找当前可以学习的课程。
因为前面已经知道了每门课程的前置课程内容。
判断其前置课程是否已经满足，可通过如下的二进制操作来判断：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>i & pre[j] = pre[j]</span></code></pre></td></tr></table></div></figure>


<p>当满足上述等式时，表示当前课程 j 可以进行学习了。</p>

<p>这一步中，可将所有满足的课程采用二进制移位的方式，记录在一个数字 tolearn 中。
如课程 j 现在可以学习了，则</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tolearn |= 1 &lt;&lt; j</span></code></pre></td></tr></table></div></figure>


<h3>3. 学习当前满足的课程组合</h3>

<p>题目中限制了当前只能学习 k 门课程。
所以需要遍历得到  tolearn 中可以学习的课程组合，即是寻找其二进制中存在 1 的组合数目，并满足 1 的个数需要小于等于 k 。</p>

<p>这里可通过如下代码得到其子组合：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">tolearn</span>
</span><span class='line'><span class="k">while</span> <span class="n">s</span><span class="p">:</span>
</span><span class='line'>  <span class="n">s</span> <span class="o">=</span> <span class="p">(</span><span class="n">s</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">tolearn</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>具体可以查看： <a href="https://cp-algorithms.com/algebra/all-submasks.html">Submask Enumeration  - Competitive Programming Algorithms</a></p></blockquote>

<p>这里需要计算 s 中二进制 1 的个数，需要小于等于 k ，得到满足的 s 后，状态转移方程为 ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">dp</span><span class="p">[</span> <span class="n">i</span> <span class="o">|</span> <span class="n">s</span> <span class="p">]</span>  <span class="o">=</span> <span class="nb">min</span> <span class="p">(</span><span class="n">dp</span> <span class="p">[</span> <span class="n">i</span> <span class="o">|</span> <span class="n">s</span> <span class="p">]</span> <span class="p">,</span>  <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>代码实现</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">minNumberOfSemesters</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">dependencies</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]],</span> <span class="n">k</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
</span><span class='line'>    <span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
</span><span class='line'>    <span class="n">dep</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># 保存当前课程的前置依赖关系</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">[</span><span class="n">pre</span><span class="p">,</span> <span class="n">cur</span><span class="p">]</span> <span class="ow">in</span> <span class="n">dependencies</span><span class="p">:</span>
</span><span class='line'>        <span class="n">dep</span><span class="p">[</span><span class="n">cur</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">|=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">pre</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># 满足当前状态的 i, 所需要的最小步数</span>
</span><span class='line'>    <span class="n">dp</span> <span class="o">=</span> <span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'>    <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">n</span><span class="p">):</span>
</span><span class='line'>        <span class="c"># 获取当前 i 可以学的前置课程。</span>
</span><span class='line'>        <span class="n">to_learn</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">j</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">i</span><span class="p">:</span> <span class="k">continue</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">i</span> <span class="o">&amp;</span> <span class="n">dep</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">dep</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
</span><span class='line'>                <span class="n">to_learn</span> <span class="o">|=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">j</span>
</span><span class='line'>        <span class="n">to_learn</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="n">i</span>
</span><span class='line'>        <span class="n">s</span> <span class="o">=</span> <span class="n">to_learn</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="n">s</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="nb">bin</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="s">&quot;1&quot;</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="n">k</span><span class="p">:</span>
</span><span class='line'>                <span class="n">dp</span><span class="p">[</span><span class="n">i</span> <span class="o">|</span> <span class="n">s</span><span class="p">]</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span> <span class="o">|</span> <span class="n">s</span><span class="p">],</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>                <span class="c"># s 的二进制包含 1 的子集集合</span>
</span><span class='line'>            <span class="n">s</span> <span class="o">=</span> <span class="p">(</span><span class="n">s</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">to_learn</span>
</span><span class='line'>        <span class="c"># print(i, ex)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">dp</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h1>方案二</h1>

<p>此方案主要优化这个子组合的获取。
<strong>思路</strong>：
1. 获取当前可以学习的课程，将其放置在 list 数组中
2. 判断 list 数组的大小，若其长度小于等于 k 值，则全部学习
3. 若 List 数组的长度大于 k 值，利用 Python 的 itertools 库中的 combination 来获取长度为 k 的组合数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">minNumberOfSemesters</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">dependencies</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]],</span> <span class="n">k</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
</span><span class='line'>    <span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
</span><span class='line'>    <span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">combinations</span>
</span><span class='line'>    <span class="n">dep</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># 保存当前课程的前置依赖关系</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">[</span><span class="n">pre</span><span class="p">,</span> <span class="n">cur</span><span class="p">]</span> <span class="ow">in</span> <span class="n">dependencies</span><span class="p">:</span>
</span><span class='line'>        <span class="n">dep</span><span class="p">[</span><span class="n">cur</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">|=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">pre</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># 满足当前状态的 i, 所需要的最小步数</span>
</span><span class='line'>    <span class="n">dp</span> <span class="o">=</span> <span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'>    <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">n</span><span class="p">):</span>
</span><span class='line'>        <span class="n">to_learn_list</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">j</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">i</span><span class="p">:</span> <span class="k">continue</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">i</span> <span class="o">&amp;</span> <span class="n">dep</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">dep</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
</span><span class='line'>                <span class="n">to_learn_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">j</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">to_learn_list</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="n">k</span><span class="p">:</span>
</span><span class='line'>            <span class="n">s</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">to_learn_list</span><span class="p">:</span>
</span><span class='line'>                <span class="n">s</span> <span class="o">|=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">j</span>
</span><span class='line'>            <span class="n">dp</span><span class="p">[</span><span class="n">i</span> <span class="o">|</span> <span class="n">s</span><span class="p">]</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span> <span class="o">|</span> <span class="n">s</span><span class="p">],</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">sub_list</span> <span class="ow">in</span> <span class="n">combinations</span><span class="p">(</span><span class="n">to_learn_list</span><span class="p">,</span> <span class="n">k</span><span class="p">):</span>
</span><span class='line'>                <span class="n">s</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>                <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">sub_list</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">s</span> <span class="o">|=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">j</span>
</span><span class='line'>                <span class="n">dp</span><span class="p">[</span><span class="n">i</span> <span class="o">|</span> <span class="n">s</span><span class="p">]</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span> <span class="o">|</span> <span class="n">s</span><span class="p">],</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">dp</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h1>方案二</h1>

<p>将状态的一次遍历，转化 bfs 的思想来完成。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">minNumberOfSemesters</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">dependencies</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]],</span> <span class="n">k</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
</span><span class='line'>        <span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
</span><span class='line'>        <span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">combinations</span>
</span><span class='line'>        <span class="n">dep</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
</span><span class='line'>        <span class="c"># 保存当前课程的前置依赖关系</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">[</span><span class="n">pre</span><span class="p">,</span> <span class="n">cur</span><span class="p">]</span> <span class="ow">in</span> <span class="n">dependencies</span><span class="p">:</span>
</span><span class='line'>            <span class="n">dep</span><span class="p">[</span><span class="n">cur</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">|=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">pre</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="c"># 满足当前状态的 i, 所需要的最小步数</span>
</span><span class='line'>        <span class="n">dp</span> <span class="o">=</span> <span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'>        <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">deque</span>
</span><span class='line'>        <span class="n">queue</span> <span class="o">=</span> <span class="n">deque</span><span class="p">()</span>
</span><span class='line'>        <span class="n">queue</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>        <span class="k">while</span> <span class="n">queue</span><span class="p">:</span>
</span><span class='line'>            <span class="p">(</span><span class="n">pre</span><span class="p">,</span> <span class="n">step</span><span class="p">)</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class='line'>            <span class="n">to_learn_list</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">j</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">pre</span><span class="p">:</span> <span class="k">continue</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">pre</span> <span class="o">&amp;</span> <span class="n">dep</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">dep</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
</span><span class='line'>                    <span class="n">to_learn_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">j</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">to_learn_list</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="n">k</span><span class="p">:</span>
</span><span class='line'>                <span class="n">s</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>                <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">to_learn_list</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">s</span> <span class="o">|=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">j</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">dp</span><span class="p">[</span><span class="n">pre</span> <span class="o">|</span> <span class="n">s</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">dp</span><span class="p">[</span><span class="n">pre</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">dp</span><span class="p">[</span><span class="n">pre</span> <span class="o">|</span> <span class="n">s</span><span class="p">]</span> <span class="o">=</span>  <span class="n">dp</span><span class="p">[</span><span class="n">pre</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>                    <span class="n">queue</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">pre</span> <span class="o">|</span> <span class="n">s</span><span class="p">,</span> <span class="n">dp</span><span class="p">[</span><span class="n">pre</span><span class="o">|</span><span class="n">s</span><span class="p">]))</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="k">for</span> <span class="n">sub_list</span> <span class="ow">in</span> <span class="n">combinations</span><span class="p">(</span><span class="n">to_learn_list</span><span class="p">,</span> <span class="n">k</span><span class="p">):</span>
</span><span class='line'>                    <span class="n">s</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>                    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">sub_list</span><span class="p">:</span>
</span><span class='line'>                        <span class="n">s</span> <span class="o">|=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">j</span>
</span><span class='line'>                    <span class="k">if</span> <span class="n">dp</span><span class="p">[</span><span class="n">pre</span> <span class="o">|</span> <span class="n">s</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">dp</span><span class="p">[</span><span class="n">pre</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>                        <span class="n">dp</span><span class="p">[</span><span class="n">pre</span> <span class="o">|</span> <span class="n">s</span><span class="p">]</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">pre</span> <span class="o">|</span> <span class="n">s</span><span class="p">],</span> <span class="n">dp</span><span class="p">[</span><span class="n">pre</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>                        <span class="n">queue</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">pre</span> <span class="o">|</span> <span class="n">s</span><span class="p">,</span> <span class="n">dp</span><span class="p">[</span><span class="n">pre</span> <span class="o">|</span> <span class="n">s</span><span class="p">]))</span>
</span><span class='line'>            <span class="c"># print(pre)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">dp</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[891. Sum of Subsequence Width]]></title>
    <link href="http://alighters.github.io/blog/blog/2020/09/20/891-sum-of-subsequence-width/"/>
    <updated>2020-09-20T22:54:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2020/09/20/891-sum-of-subsequence-width</id>
    <content type="html"><![CDATA[<h1>demo</h1>

<p>1  -> 0
1, 2 -> 1
1, 2, 3 ->  （多出4中组合，1 和 2 选或者不选）</p>

<blockquote><p>多出的结果：（1， 3） （2， 3）（1，2， 3） 总和为 2 + 1 + 2 = 5
可看出选择 1 时的数目，取决于 1 到 3 之前的数目，取其 2 的幂数。（此种情况下， 2 <strong> 1 = 2）
可得： 2 </strong> 1 = 2    2 * （3 - 1） = 4<br/>
            2 ** 0 = 1     1 * （3 - 2） = 1</p></blockquote>

<!-- more -->


<h1>目标</h1>

<p>假设有 1，2 ，3， 4 的数据，如何一次循环后，找出不同的子序列的 “宽度”（最大值 - 最小值）</p>

<p>1，2     ->    ( w1 -> 1)
1,  2, 3     -> (w1 -> 1     w2 -> 2)
1, 2, 3, 5     -> (w2 ->1     w3 -> 2        w4 -> 4)
1，2，3， 5， 8 -> (w3 -> 1     w5-> 2  w6 -> 4    w7 -> 8)
如何在一次循环中找出这些不同的宽度值。</p>

<h1>思路</h1>

<p>通过集合记录上次的值。
循环遍历排序后的数组，当新加入一个数后，计算其与前一个所得的差值，根据此差值更新当前集合中的宽度及数值</p>

<p>参考 <a href="https://leetcode-cn.com/problems/sum-of-subsequence-widths/solution/pai-xu-shu-xue-by-lucifer1004">力扣</a> 只考虑当前的元素，计算其对结果的影响。</p>

<h1>代码</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">sumSubseqWidths</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">A</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
</span><span class='line'>        <span class="n">A</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>
</span><span class='line'>        <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="n">N</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
</span><span class='line'>        <span class="n">map2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">N</span><span class="p">):</span>
</span><span class='line'>            <span class="n">map2</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">map2</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
</span><span class='line'>            <span class="n">left</span> <span class="o">=</span> <span class="n">map2</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>            <span class="n">right</span> <span class="o">=</span> <span class="n">map2</span><span class="p">[</span><span class="n">N</span> <span class="o">-</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>            <span class="n">ans</span> <span class="o">+=</span> <span class="p">(</span><span class="n">left</span> <span class="o">-</span> <span class="n">right</span><span class="p">)</span> <span class="o">*</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">ans</span> <span class="o">%</span> <span class="p">(</span><span class="mi">10</span> <span class="o">**</span> <span class="mi">9</span> <span class="o">+</span> <span class="mi">7</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1562. Find Latest Group of Size M]]></title>
    <link href="http://alighters.github.io/blog/blog/2020/09/13/1562-find-latest-group-of-size-m/"/>
    <updated>2020-09-13T23:26:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2020/09/13/1562-find-latest-group-of-size-m</id>
    <content type="html"><![CDATA[<h1>思路</h1>

<p>主要在于每次通过数组 arr 中的值，进行将  “0“ 变为 ”1“，从而寻找出现连续的 1 值，问题就在于如何记录此时所出现的连续的 “1” 的字符串的长度。 （注意，这里不能再去循环遍历，肯定会超时。）</p>

<h1>前置</h1>

<p>n 表示数组的长度</p>

<!--more-->


<h1>方案一</h1>

<blockquote><p><em>参照 <a href="https://leetcode.com/problems/find-latest-group-of-size-m/discuss/806718/Python-Clean-Union-Find-solution-with-explanation-O(N"> [Python] Clean Union-Find solution with explanation - O(N)</a>)</em></p></blockquote>

<p>在 “0”  变为 “1” 的过程中，之后就需要对存在的连续的 “1” 进行合并。这里就想到了 unionset 。在 unionset 进行 union 的过程中，需要考虑 union 后连续的 “1” 的长度的问题。所以这里使用了 rank 数组来记录，合并后连续 “1” 的长度值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">List</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">UnionFind</span><span class="p">:</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">parent</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">rank</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">find</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">parent</span><span class="p">[</span><span class="n">s</span><span class="p">]</span> <span class="o">==</span> <span class="n">s</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">s</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">parent</span><span class="p">[</span><span class="n">s</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">parent</span><span class="p">[</span><span class="n">s</span><span class="p">])</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">parent</span><span class="p">[</span><span class="n">s</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">union</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
</span><span class='line'>        <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">a</span><span class="p">),</span> <span class="bp">self</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">a</span> <span class="o">==</span> <span class="n">b</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">a</span> <span class="o">&gt;</span> <span class="n">b</span><span class="p">:</span>
</span><span class='line'>            <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="p">,</span> <span class="n">a</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">parent</span><span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">rank</span><span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="o">+=</span> <span class="bp">self</span><span class="o">.</span><span class="n">rank</span><span class="p">[</span><span class="n">b</span><span class="p">]</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">True</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">findLatestStep</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">arr</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">M</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">==</span> <span class="n">M</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">M</span>
</span><span class='line'>        <span class="n">uf</span> <span class="o">=</span> <span class="n">UnionFind</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">))</span>
</span><span class='line'>        <span class="n">ans</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">num</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">arr</span><span class="p">):</span>
</span><span class='line'>            <span class="n">uf</span><span class="o">.</span><span class="n">rank</span><span class="p">[</span><span class="n">num</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="p">(</span><span class="n">num</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">num</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
</span><span class='line'>                <span class="k">if</span> <span class="mi">0</span> <span class="o">&lt;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">):</span>
</span><span class='line'>                    <span class="k">if</span> <span class="n">uf</span><span class="o">.</span><span class="n">rank</span><span class="p">[</span><span class="n">uf</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">j</span><span class="p">)]</span> <span class="o">==</span> <span class="n">M</span><span class="p">:</span>
</span><span class='line'>                        <span class="n">ans</span> <span class="o">=</span> <span class="n">i</span>
</span><span class='line'>                    <span class="k">if</span> <span class="n">uf</span><span class="o">.</span><span class="n">rank</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
</span><span class='line'>                        <span class="n">uf</span><span class="o">.</span><span class="n">union</span><span class="p">(</span><span class="n">num</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">ans</span>
</span></code></pre></td></tr></table></div></figure>


<h1>方案二</h1>

<p>逆向考虑，将数组中的值逆向插入到 [ 0, n + 1] 的数组中。
此时的操作，代表着将连续的 1 中的一项，修改为 ”0”。而根据其在数组左右两项的值做差，可求得其左右的连续的 “1” 的长度。</p>

<p>举例：[ 3, 5, 1, 2, 4]， 要插入的数组为 [0, 6]
1. 插入 4， 结果为 [0, 4, 6] ，左边连续的 “1” 的长度为 4 - 0 - 1 = 3，右边连续的 “1” 的长度为  6- 4 - 1 = 1
2. 插入 2,    结果为 [0, 2, 4, 6] 左边连续的 “1” 的长度为 4 - 2 - 1 = 1，右边连续的 “1” 的长度为 2 - 0 - 1  = 1
3. …</p>

<p>代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">findLatestStep</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">arr</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">M</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
</span><span class='line'>        <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">M</span> <span class="o">==</span> <span class="n">n</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">n</span>
</span><span class='line'>        <span class="n">lis</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">arr</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
</span><span class='line'>            <span class="kn">import</span> <span class="nn">bisect</span>
</span><span class='line'>            <span class="n">index</span> <span class="o">=</span> <span class="n">bisect</span><span class="o">.</span><span class="n">bisect</span><span class="p">(</span><span class="n">lis</span><span class="p">,</span> <span class="n">num</span><span class="p">)</span>
</span><span class='line'>            <span class="n">lis</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">num</span><span class="p">)</span>
</span><span class='line'>            <span class="n">right</span> <span class="o">=</span> <span class="n">lis</span><span class="p">[</span><span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">num</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">right</span> <span class="o">==</span> <span class="n">M</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>            <span class="n">left</span> <span class="o">=</span> <span class="n">num</span> <span class="o">-</span> <span class="n">lis</span><span class="p">[</span><span class="n">index</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">left</span> <span class="o">==</span> <span class="n">M</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>            <span class="n">n</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<h1>方案三</h1>

<blockquote><p>参照  <a href="https://leetcode.com/problems/find-latest-group-of-size-m/discuss/806786/JavaC%2B%2BPython-Count-the-Length-of-Groups-O(N">lee215</a>)  大佬的答案</p></blockquote>

<p>记录分析影响的左右边界的 长度值。</p>

<p>使用两个数组进行更新记录：
length 数组记录当前更新范围连续 “1” 的长度
Count 记录每个长度出现的次数。最后一次出现的次数即为所求的值。</p>

<p>代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">findLatestStep</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">arr</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">M</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
</span><span class='line'>        <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
</span><span class='line'>        <span class="n">length</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">n</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>        <span class="n">count</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="n">res</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">num</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">arr</span><span class="p">):</span>
</span><span class='line'>            <span class="n">left</span> <span class="o">=</span> <span class="n">length</span><span class="p">[</span><span class="n">num</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>            <span class="n">right</span> <span class="o">=</span> <span class="n">length</span><span class="p">[</span><span class="n">num</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>            <span class="n">length</span><span class="p">[</span><span class="n">num</span><span class="p">]</span> <span class="o">=</span> <span class="n">length</span><span class="p">[</span><span class="n">num</span> <span class="o">-</span> <span class="n">left</span><span class="p">]</span> <span class="o">=</span> <span class="n">length</span><span class="p">[</span><span class="n">num</span> <span class="o">+</span> <span class="n">right</span><span class="p">]</span> <span class="o">=</span> <span class="n">left</span> <span class="o">+</span> <span class="n">right</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>            <span class="n">count</span><span class="p">[</span><span class="n">left</span><span class="p">]</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>            <span class="n">count</span><span class="p">[</span><span class="n">right</span><span class="p">]</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>            <span class="n">count</span><span class="p">[</span><span class="n">length</span><span class="p">[</span><span class="n">num</span><span class="p">]]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">count</span><span class="p">[</span><span class="n">M</span><span class="p">]:</span>
</span><span class='line'>                <span class="n">res</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">res</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1498. Number of Subsequences That Satisfy the Given Sum Condition]]></title>
    <link href="http://alighters.github.io/blog/blog/2020/09/13/1498-number-of-subsequences-that-satisfy-the-given-sum-condition/"/>
    <updated>2020-09-13T23:23:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2020/09/13/1498-number-of-subsequences-that-satisfy-the-given-sum-condition</id>
    <content type="html"><![CDATA[<p>具体链接： <a href="https://leetcode-cn.com/problems/number-of-subsequences-that-satisfy-the-given-sum-condition/">https://leetcode-cn.com/problems/number-of-subsequences-that-satisfy-the-given-sum-condition/</a></p>

<h2>思路</h2>

<p>因题意中，不要求数组的连续，只需要求相应的组合即可。</p>

<p>所以，这里可以先进行数组的排序。
遍历当前的数组，以当前数为基准，求 target - nums[i] 的值，在数组中，所处于的 Index 值。（可通过 bisect.bisect 的二分求解来得到此值。）</p>

<p>当得到此 index 值，以包含当前  nums[i] ，来求一个可以的组合数。其选择的方案为从 <code>i + 1</code> 至 <code>index</code> 的数，可选或者不选，一共的组合数为：</p>

<!--more -->


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="mi">2</span> <span class="o">**</span> <span class="p">(</span><span class="n">index</span> <span class="o">-</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以，最后的结果数，就是将这些结果累加即可。</p>

<h2>代码</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">List</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">numSubseq</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">target</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
</span><span class='line'>        <span class="n">nums</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>
</span><span class='line'>        <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="kn">import</span> <span class="nn">bisect</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">num</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">nums</span><span class="p">):</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">num</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">&lt;=</span> <span class="n">target</span><span class="p">:</span>
</span><span class='line'>                <span class="n">index</span> <span class="o">=</span> <span class="n">bisect</span><span class="o">.</span><span class="n">bisect</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">target</span> <span class="o">-</span> <span class="n">num</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">index</span> <span class="o">&gt;</span> <span class="n">i</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">ans</span> <span class="o">+=</span> <span class="mi">2</span> <span class="o">**</span> <span class="p">(</span><span class="n">index</span> <span class="o">-</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="k">break</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">ans</span> <span class="o">%</span> <span class="p">(</span><span class="mi">10</span> <span class="o">**</span> <span class="mi">9</span> <span class="o">+</span> <span class="mi">7</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>注意事项</h2>

<p>在其他语言中，因求这个 2 的幂数，会存在溢出或者超时的情况。所以，都会使用预计算，这些 2  的幂数的结果。方便后续的加速求值。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1524. Number of Sub-arrays With Odd Sum]]></title>
    <link href="http://alighters.github.io/blog/blog/2020/09/13/1524-number-of-sub-arrays-with-odd-sum/"/>
    <updated>2020-09-13T23:18:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2020/09/13/1524-number-of-sub-arrays-with-odd-sum</id>
    <content type="html"><![CDATA[<p>这一题在周赛花费了不少时间，做题时用了个代码比较长的 dp 方案</p>

<h1>方案一</h1>

<p>动态规划</p>

<h2>定义动态方程</h2>

<p>定义一个 n * 2 的二维数组。
dp[i][0]  表示当前以 i 为结尾的子数组和为偶数的方法数
dp[i][1]  表示当前以 i 为结尾的子数组和为奇数的方法数</p>

<!-- more -->


<h2>状态转化方程</h2>

<ol>
<li>nums[i] 为奇数
 dp[i][0] = dp[i-1][1]        （等于前一个的奇数方案数）
 dp[i][1] = dp[i-1][0] + 1     （等于前一个的偶数方案数 + 1）</li>
<li>nums[i] 为偶数
 dp[i][0] = dp[i-1][0] + 1
 dp[i][1] = dp[i-1][1]</li>
</ol>


<blockquote><p>最后，dp 数组为奇数的总和，即为满足的结果数。</p></blockquote>

<h2>代码</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">numOfSubarrays</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">arr</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
</span><span class='line'>        <span class="n">dp</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="mi">2</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)]</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">arr</span><span class="p">):</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>                <span class="n">dp</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>                <span class="n">dp</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="n">dp</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>                <span class="n">dp</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>        <span class="c"># print(dp)</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">sum</span><span class="p">(</span> <span class="n">x</span> <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">dp</span><span class="p">)</span> <span class="o">%</span> <span class="p">(</span><span class="mi">10</span><span class="o">**</span><span class="mi">9</span> <span class="o">+</span> <span class="mi">7</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h1>方案二</h1>

<p>前缀和</p>

<p>通过前缀和来计算时，这里有个技巧：</p>

<blockquote><p>奇数 - 偶数 = 奇数
偶数 - 奇数 = 奇数</p></blockquote>

<p>这里大佬们会用一个长度为 2 的数组，来记录数组索引 i 之前的奇数前缀和、偶数前缀和的结果数。如下表示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">pre</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>初始状态时，即空数组，我们认为前缀和为偶数的有 1 个，奇数的有 0 个。</p>

<p>所以当计算到 i 时，得到其前缀和为 sum。
1. sum 为偶数时。此时的答案即前面有多少个前缀和为奇数的方案数
2. sum 为奇数时。此时的答案即前面有多少个前缀和为偶数的方案数。</p>

<p>因之前定义的数组大小为 2 ，就很方便进行奇数数的操作记录。</p>

<p>写一个 i 的状态记录方程。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">ans</span> <span class="o">+=</span> <span class="n">pre</span><span class="p">[</span><span class="mi">1</span> <span class="o">-</span> <span class="nb">sum</span> <span class="o">%</span> <span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="n">pre</span><span class="p">[</span><span class="nb">sum</span> <span class="o">%</span> <span class="mi">2</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<h2>代码</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">numOfSubarrays</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">arr</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
</span><span class='line'>        <span class="n">pre</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span>
</span><span class='line'>        <span class="nb">sum</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">arr</span><span class="p">:</span>
</span><span class='line'>            <span class="nb">sum</span> <span class="o">+=</span> <span class="n">n</span>
</span><span class='line'>            <span class="n">ans</span> <span class="o">+=</span> <span class="n">pre</span><span class="p">[</span><span class="mi">1</span> <span class="o">-</span> <span class="nb">sum</span> <span class="o">%</span> <span class="mi">2</span><span class="p">]</span>
</span><span class='line'>            <span class="n">pre</span><span class="p">[</span><span class="nb">sum</span> <span class="o">%</span> <span class="mi">2</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">ans</span> <span class="o">%</span> <span class="p">(</span><span class="mi">10</span> <span class="o">**</span> <span class="mi">9</span> <span class="o">+</span> <span class="mi">7</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker Config Ssr]]></title>
    <link href="http://alighters.github.io/blog/blog/2019/03/22/docker-config-ssr/"/>
    <updated>2019-03-22T14:24:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2019/03/22/docker-config-ssr</id>
    <content type="html"><![CDATA[<h2>安装 Docker</h2>

<p>具体针对自己的服务器，参照 <a href="https://docs.docker.com/install/overview/">Overview of Docker editions | Docker Documentation</a> 选择对应的版本进行安装</p>

<!-- more -->


<h2>创建用户组</h2>

<p>因为在 Docker 执行的用户，是非 root 的用户，所以这里需要创建一个 docker 的用户组。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo usermod -aG docker $user</span></code></pre></td></tr></table></div></figure>


<blockquote><p>需要退出登录，重新进入才会生效。</p></blockquote>

<h2>编写镜像</h2>

<p>创建一个目录，在目录下创建一个 <code>Dockerfile</code> 的文件</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Dockerfile for ShadowsocksR
</span><span class='line'># Copyright (C) 2018 - 2019 Teddysun &lt;i@teddysun.com&gt;
</span><span class='line'># Reference URL:
</span><span class='line'># https://github.com/shadowsocksrr/shadowsocksr
</span><span class='line'>
</span><span class='line'>FROM debian:stretch
</span><span class='line'>LABEL maintainer="david"
</span><span class='line'>
</span><span class='line'>RUN set -ex \
</span><span class='line'>        && apt-get update \
</span><span class='line'>        && apt-get install -y wget python libsodium-dev openssl \
</span><span class='line'>        && rm -rf /var/lib/apt/lists/* \
</span><span class='line'>        && wget -O /tmp/shadowsocksr-3.2.2.tar.gz https://github.com/shadowsocksrr/shadowsocksr/archive/3.2.2.tar.gz \
</span><span class='line'>        && tar zxf /tmp/shadowsocksr-3.2.2.tar.gz -C /tmp \
</span><span class='line'>        && mv /tmp/shadowsocksr-3.2.2/shadowsocks /usr/local/ \
</span><span class='line'>        && rm -fr /tmp/shadowsocksr-3.2.2 \
</span><span class='line'>        && rm -f /tmp/shadowsocksr-3.2.2.tar.gz
</span><span class='line'>
</span><span class='line'>COPY ./config_ssr.json /etc/shadowsocks-r/config.json
</span><span class='line'>VOLUME /etc/shadowsocks-r
</span><span class='line'>
</span><span class='line'>CMD ["/usr/local/shadowsocks/server.py", "-c", "/etc/shadowsocks-r/config.json" ]</span></code></pre></td></tr></table></div></figure>


<p>此目录下需要一个 config_ssr.json 的文件，用来配置 ssr 的参数：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    "server":"0.0.0.0",
</span><span class='line'>    "server_ipv6":"[::]",
</span><span class='line'>    "server_port":xxxxxx,
</span><span class='line'>    "local_address":"127.0.0.1",
</span><span class='line'>    "local_port":1080,
</span><span class='line'>    "password":"xxxxxx",
</span><span class='line'>    "timeout":120,
</span><span class='line'>    "method":"rc4-md5",
</span><span class='line'>    "protocol":"origin",
</span><span class='line'>    "protocol_param":"",
</span><span class='line'>    "obfs":"plain",
</span><span class='line'>    "obfs_param":"",
</span><span class='line'>    "redirect":"",
</span><span class='line'>    "dns_ipv6":false,
</span><span class='line'>    "fast_open":false,
</span><span class='line'>    "workers":1
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>这里的参数可参照，<a href="https://github.com/shadowsocksrr/shadowsocksr">https://github.com/shadowsocksrr/shadowsocksr</a> 进行设置。注意 server_port 与 password 的设置。</p>

<h2>创建镜像</h2>

<p>在当前目录下，执行如下命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker build -t shadowsocks:v1 .</span></code></pre></td></tr></table></div></figure>


<p>shadowsocks 为创建的服务名称，v1 表示的是版本，<code>.</code>指的是以当前的目录，为执行的上下文。</p>

<h2>创建容器</h2>

<p>可使用 <code>docker image ls</code> 来查看当前 docker 中的镜像。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker run -d -p 12345:12345 shadowsocks:v1</span></code></pre></td></tr></table></div></figure>


<p>-d 指定在后台创建, -p 指定的是端口的映射。这里是说将创建出来的 shadowsocks:v1 容器的端口 12345 映射至服务器的端口。</p>

<p>这样，便完成了 SSR 的服务创建，可自行测试服务是否正常工作了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RN 通信]]></title>
    <link href="http://alighters.github.io/blog/blog/2018/06/28/react-native-message-theory/"/>
    <updated>2018-06-28T16:28:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2018/06/28/react-native-message-theory</id>
    <content type="html"><![CDATA[<h2>JS 桥</h2>

<p>Android: Webkit 的 JavaScriptCore
ios: 自带的 javascriptcore</p>

<p>在 Android 的代码，其提供了一个 CatalystInstance 的接口，来做 JS 与 Native 的高度抽象的接口：</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">CatalystInstance</span>
</span><span class='line'>    <span class="kd">extends</span> <span class="n">MemoryPressureListener</span><span class="o">,</span> <span class="n">JSInstance</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">runJSBundle</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Returns the status of running the JS bundle; waits for an answer if runJSBundle is running</span>
</span><span class='line'>  <span class="kt">boolean</span> <span class="nf">hasRunJSBundle</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Return the source URL of the JS Bundle that was run, or {@code null} if no JS</span>
</span><span class='line'><span class="cm">   * bundle has been run yet.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="nd">@Nullable</span> <span class="n">String</span> <span class="nf">getSourceURL</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// This is called from java code, so it won&#39;t be stripped anyway, but proguard will rename it,</span>
</span><span class='line'>  <span class="c1">// which this prevents.</span>
</span><span class='line'>  <span class="nd">@Override</span> <span class="nd">@DoNotStrip</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">invokeCallback</span><span class="o">(</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">callbackID</span><span class="o">,</span>
</span><span class='line'>      <span class="n">NativeArray</span> <span class="n">arguments</span><span class="o">);</span>
</span><span class='line'>  <span class="nd">@DoNotStrip</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">callFunction</span><span class="o">(</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">module</span><span class="o">,</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">method</span><span class="o">,</span>
</span><span class='line'>      <span class="n">NativeArray</span> <span class="n">arguments</span><span class="o">);</span>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Destroys this catalyst instance, waiting for any other threads in ReactQueueConfiguration</span>
</span><span class='line'><span class="cm">   * (besides the UI thread) to finish running. Must be called from the UI thread so that we can</span>
</span><span class='line'><span class="cm">   * fully shut down other threads.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">destroy</span><span class="o">();</span>
</span><span class='line'>  <span class="kt">boolean</span> <span class="nf">isDestroyed</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Initialize all the native modules</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="nd">@VisibleForTesting</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">initialize</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ReactQueueConfiguration</span> <span class="nf">getReactQueueConfiguration</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">JavaScriptModule</span><span class="o">&gt;</span> <span class="n">T</span> <span class="nf">getJSModule</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">jsInterface</span><span class="o">);</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">NativeModule</span><span class="o">&gt;</span> <span class="kt">boolean</span> <span class="nf">hasNativeModule</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">nativeModuleInterface</span><span class="o">);</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">NativeModule</span><span class="o">&gt;</span> <span class="n">T</span> <span class="nf">getNativeModule</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">nativeModuleInterface</span><span class="o">);</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">JSIModule</span><span class="o">&gt;</span> <span class="n">T</span> <span class="nf">getJSIModule</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">jsiModuleInterface</span><span class="o">);</span>
</span><span class='line'>  <span class="n">Collection</span><span class="o">&lt;</span><span class="n">NativeModule</span><span class="o">&gt;</span> <span class="nf">getNativeModules</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * This method permits a CatalystInstance to extend the known</span>
</span><span class='line'><span class="cm">   * Native modules. This provided registry contains only the new modules to load.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">extendNativeModules</span><span class="o">(</span><span class="n">NativeModuleRegistry</span> <span class="n">modules</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Adds a idle listener for this Catalyst instance. The listener will receive notifications</span>
</span><span class='line'><span class="cm">   * whenever the bridge transitions from idle to busy and vice-versa, where the busy state is</span>
</span><span class='line'><span class="cm">   * defined as there being some non-zero number of calls to JS that haven&#39;t resolved via a</span>
</span><span class='line'><span class="cm">   * onBatchCompleted call. The listener should be purely passive and not affect application logic.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">addBridgeIdleDebugListener</span><span class="o">(</span><span class="n">NotThreadSafeBridgeIdleDebugListener</span> <span class="n">listener</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Removes a NotThreadSafeBridgeIdleDebugListener previously added with</span>
</span><span class='line'><span class="cm">   * {@link #addBridgeIdleDebugListener}</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">removeBridgeIdleDebugListener</span><span class="o">(</span><span class="n">NotThreadSafeBridgeIdleDebugListener</span> <span class="n">listener</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** This method registers the file path of an additional JS segment by its ID. */</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">registerSegment</span><span class="o">(</span><span class="kt">int</span> <span class="n">segmentId</span><span class="o">,</span> <span class="n">String</span> <span class="n">path</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@VisibleForTesting</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">setGlobalVariable</span><span class="o">(</span><span class="n">String</span> <span class="n">propName</span><span class="o">,</span> <span class="n">String</span> <span class="n">jsonValue</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Get the C pointer (as a long) to the JavaScriptCore context associated with this instance.</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * &lt;p&gt;Use the following pattern to ensure that the JS context is not cleared while you are using</span>
</span><span class='line'><span class="cm">   * it: JavaScriptContextHolder jsContext = reactContext.getJavaScriptContextHolder()</span>
</span><span class='line'><span class="cm">   * synchronized(jsContext) { nativeThingNeedingJsContext(jsContext.get()); }</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="n">JavaScriptContextHolder</span> <span class="nf">getJavaScriptContextHolder</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">addJSIModules</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">JSIModuleHolder</span><span class="o">&gt;</span> <span class="n">jsiModules</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中主要有 NativeModule 和 JSModule 获取的方法，并调用 JS 侧方法 invokeCallback 和 callFunction 方法。</p>

<h2>执行流程</h2>

<h4>1.构建 ReactNativeHost</h4>

<p>在 ReactNativeHost 中的 getPackages 方法中，我们需要传递实现的 ReactPackage 接口，接口中则定义了实现的 NativeModule 集合和 ViewManager 的集合。</p>

<h4>2.创建 ReactInstanceManger</h4>

<p>ReactNativeHost 是在 application 中提供获取的，而通过 ReactNativeHost 可以获取到 ReactInstanceManager 类，在创建 ReactInstanceManager 的过程中，会得到所有的 ReactPackage，将其保存在 ReactInstanceManager 类中。</p>

<blockquote><p>这里的 ReactPackage 的获取，会优先添加 CoreModulesPackage，其提供了 Android 基础的 Module功能，如 AndroidInfoModule、DeviceEventManageModule、UIManagerModule等。</p>

<p>这里的 UIManagerModule，则是来负责 UI 视图创建的 View 集合，并接受来自 View 的命令来操作更新 View。</p></blockquote>

<h4>3.ReactRootView 执行 startReactApplication</h4>

<p>在一个 RN 的 activity 中，其会在 onCreate 方法中，执行 ReactRootView 的创建工作，之后便是根据创建好的 ReactInstanceManager，来执行 ReactRootView 的 startReactApplication 的方法。</p>

<p>其中会调用 ReactInstanceManager 的 createReactContentInBackground 方法。这里会根据特定的 JS 来源，在一个新的线程执行 createReactContext 方法来创建一个ReactApplicationContext。</p>

<h4>4.createReactContext</h4>

<p>此方法中，首先会处理之前的 ReactPackages 来生成一个 NativeModuleRegistry，其是用来管理 NativeModule 并提供获取调用的功能。</p>

<p>紧接着，便是利用 CatalystInstanceImpl Builder 构造一个 CatalystInstance。在 CatalystInstanceImpl 的初始化方法中，其会利用传递过来的参数，调用 JNI 方法 initializeBridge，其会执行桥的初始化操作，如获取 NativeModule 至 JNI 中的 ModuleRegistry 中。</p>

<p>之后便是调用 CatalystInstance 的 runJSBundle 方法。其会执行 JSBundleLoader 的 loadScript 方法，这里又会调用回 CatalystInstanceImpl 中的几个提供的相关从 jni 中 load JS 内容的方法。这里主要来完成 JS 内容的加载。</p>

<h4>5.setupReactContext</h4>

<p>之后，在 NativeModulesQueueThread 上执行 setupReactContext 的方法，这里会执行 CatalyInstance 的 initalize，主要内容则是初始化所有的 NativeModule。</p>

<p>随之，便是调用 attachRootViewToInstance 方法，其参数为 ReactRootView 和 CatalystInstance。其中最主要的内容便是调用 ReactRootView 的 invokeJsEntryPoint :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="cm">/*package */</span> <span class="kt">void</span> <span class="nf">invokeJSEntryPoint</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mJSEntryPoint</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">defaultJSEntryPoint</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mJSEntryPoint</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中 defaultJsEntryPoint 方法，则是调用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Calls the default entry point into JS which is AppRegistry.runApplication()</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">defaultJSEntryPoint</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Systrace</span><span class="o">.</span><span class="na">beginSection</span><span class="o">(</span><span class="n">TRACE_TAG_REACT_JAVA_BRIDGE</span><span class="o">,</span> <span class="s">&quot;ReactRootView.runApplication&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">mReactInstanceManager</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="o">!</span><span class="n">mIsAttachedToInstance</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ReactContext</span> <span class="n">reactContext</span> <span class="o">=</span> <span class="n">mReactInstanceManager</span><span class="o">.</span><span class="na">getCurrentReactContext</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">reactContext</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">CatalystInstance</span> <span class="n">catalystInstance</span> <span class="o">=</span> <span class="n">reactContext</span><span class="o">.</span><span class="na">getCatalystInstance</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">WritableNativeMap</span> <span class="n">appParams</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">WritableNativeMap</span><span class="o">();</span>
</span><span class='line'>        <span class="n">appParams</span><span class="o">.</span><span class="na">putDouble</span><span class="o">(</span><span class="s">&quot;rootTag&quot;</span><span class="o">,</span> <span class="n">getRootViewTag</span><span class="o">());</span>
</span><span class='line'>        <span class="nd">@Nullable</span> <span class="n">Bundle</span> <span class="n">appProperties</span> <span class="o">=</span> <span class="n">getAppProperties</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">appProperties</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">appParams</span><span class="o">.</span><span class="na">putMap</span><span class="o">(</span><span class="s">&quot;initialProps&quot;</span><span class="o">,</span> <span class="n">Arguments</span><span class="o">.</span><span class="na">fromBundle</span><span class="o">(</span><span class="n">appProperties</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">getUIManagerType</span><span class="o">()</span> <span class="o">==</span> <span class="n">FABRIC</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">appParams</span><span class="o">.</span><span class="na">putBoolean</span><span class="o">(</span><span class="s">&quot;fabric&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">mShouldLogContentAppeared</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">String</span> <span class="n">jsAppModuleName</span> <span class="o">=</span> <span class="n">getJSModuleName</span><span class="o">();</span>
</span><span class='line'>        <span class="n">catalystInstance</span><span class="o">.</span><span class="na">getJSModule</span><span class="o">(</span><span class="n">AppRegistry</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">runApplication</span><span class="o">(</span><span class="n">jsAppModuleName</span><span class="o">,</span> <span class="n">appParams</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Systrace</span><span class="o">.</span><span class="na">endSection</span><span class="o">(</span><span class="n">TRACE_TAG_REACT_JAVA_BRIDGE</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看出，这里的关键内容便是将 rootTag、initialProps 参数内容，放置在 appParams 中，调用 JS 侧的对象 AppRegistry，并调用其 runApplication 方法，来完成 JS 端内容的调用。</p>

<h2>JS 调用 Native</h2>

<p>将 Native 的方法提供给 JS 来调用，</p>

<h3>1.步骤</h3>

<ul>
<li>1）Native 端定义实现 NativeModule 接口</li>
<li>2）将此 NativeModule 接口添加至 ReactPackage 中</li>
<li>3）JS 端在 NativeModule.js 中获取到指定的 Module 对象，根据提供的方法进行调用。</li>
</ul>


<h3>2.实现</h3>

<h4>1.获取 Native 对象</h4>

<p>在获取一个 Native 端提供的类、对象，通常系统的，我们都是通过 &lsquo;react-native&rsquo; 中获取，而我们自定义的模块则需要从 NativeModule 中获取，以 ToastAndroid 为例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">ToastAndroid</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react-native&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中，ToastAndroid 对应着 ToastAndroid.android.js，其文件中的 ToastAndroid 内容则是 RCTToastAndroid，其获取方式如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="p">{</span> <span class="nx">ToastAndroid</span><span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;NativeModule&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">RCTToastAndroid</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;NativeModules&#39;</span><span class="p">).</span><span class="nx">ToastAndroid</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>2.NativeModule 属性对象的赋值</h4>

<p>在 NativeModule.js 中，NativeModule 对象的生成过程中，其已经调用了 NativeModule 的 genModule 方法，生成了相应的 Module，并赋值了 NativeModule 对象。</p>

<p>其中 genModule 的参数为 ModuleConfig 和 moduleID 的数字类型值。ModuleConfig 的定义如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">type</span> <span class="nx">ModuleConfig</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>  <span class="nx">string</span><span class="p">,</span> <span class="cm">/* name */</span>
</span><span class='line'>  <span class="o">?</span><span class="nb">Object</span><span class="p">,</span> <span class="cm">/* constants */</span>
</span><span class='line'>  <span class="nb">Array</span><span class="o">&lt;</span><span class="nx">string</span><span class="o">&gt;</span><span class="p">,</span> <span class="cm">/* functions */</span>
</span><span class='line'>  <span class="nb">Array</span><span class="o">&lt;</span><span class="nx">number</span><span class="o">&gt;</span><span class="p">,</span> <span class="cm">/* promise method IDs */</span>
</span><span class='line'>  <span class="nb">Array</span><span class="o">&lt;</span><span class="nx">number</span><span class="o">&gt;</span><span class="p">,</span> <span class="cm">/* sync method IDs */</span>
</span><span class='line'><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>它包含了一个模块的名称、常量值、方法。其中 promise 及 sync 的方法采用方法数组索引来表示。
另外，moduleID 为 module 数组中的索引值。</p>

<p>而调用 genModule 方法，则是根据此 config 信息，生成一个对应的 module 对象：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="kr">const</span> <span class="p">[</span><span class="nx">moduleName</span><span class="p">,</span> <span class="nx">constants</span><span class="p">,</span> <span class="nx">methods</span><span class="p">,</span> <span class="nx">promiseMethods</span><span class="p">,</span> <span class="nx">syncMethods</span><span class="p">]</span> <span class="o">=</span> <span class="nx">config</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">constants</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">methods</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Module contents will be filled in lazily later</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="nx">moduleName</span> <span class="p">};</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">module</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>  <span class="nx">methods</span> <span class="o">&amp;&amp;</span> <span class="nx">methods</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">methodName</span><span class="p">,</span> <span class="nx">methodID</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">isPromise</span> <span class="o">=</span> <span class="nx">promiseMethods</span> <span class="o">&amp;&amp;</span> <span class="nx">arrayContains</span><span class="p">(</span><span class="nx">promiseMethods</span><span class="p">,</span> <span class="nx">methodID</span><span class="p">);</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">isSync</span> <span class="o">=</span> <span class="nx">syncMethods</span> <span class="o">&amp;&amp;</span> <span class="nx">arrayContains</span><span class="p">(</span><span class="nx">syncMethods</span><span class="p">,</span> <span class="nx">methodID</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">invariant</span><span class="p">(</span><span class="o">!</span><span class="nx">isPromise</span> <span class="o">||</span> <span class="o">!</span><span class="nx">isSync</span><span class="p">,</span> <span class="s1">&#39;Cannot have a method that is both async and a sync hook&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">methodType</span> <span class="o">=</span> <span class="nx">isPromise</span> <span class="o">?</span> <span class="s1">&#39;promise&#39;</span> <span class="o">:</span> <span class="nx">isSync</span> <span class="o">?</span> <span class="s1">&#39;sync&#39;</span> <span class="o">:</span> <span class="s1">&#39;async&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">module</span><span class="p">[</span><span class="nx">methodName</span><span class="p">]</span> <span class="o">=</span> <span class="nx">genMethod</span><span class="p">(</span><span class="nx">moduleID</span><span class="p">,</span> <span class="nx">methodID</span><span class="p">,</span> <span class="nx">methodType</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span><span class="nx">module</span><span class="p">,</span> <span class="nx">constants</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">__DEV__</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">BatchedBridge</span><span class="p">.</span><span class="nx">createDebugLookup</span><span class="p">(</span><span class="nx">moduleID</span><span class="p">,</span> <span class="nx">moduleName</span><span class="p">,</span> <span class="nx">methods</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="nx">moduleName</span><span class="p">,</span> <span class="nx">module</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>若是存在方法值，则会遍历方法，调用 genMethod 来生成方法对应的信息：</p>

<p>之后便是将其赋值给 NativeModule:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">info</span> <span class="o">=</span> <span class="nx">genModule</span><span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">moduleID</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">info</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">info</span><span class="p">.</span><span class="nx">module</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">NativeModules</span><span class="p">[</span><span class="nx">info</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="nx">info</span><span class="p">.</span><span class="nx">module</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>3.__fbBatchedBridgeConfig 的生成及赋值</h4>

<p>在上述2的步骤中，其中 config 数组信息对应着 bridgeConfig 的属性 remoteModuleConfig。而 bridgeConfig 则是 global.__fbBatchedBridgeConfig 的值。</p>

<p>这个值则是在 JS 引擎的 ProxyExecutor 执行 loadApplicationScript 中进行赋值的:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">void</span> <span class="nx">ProxyExecutor</span><span class="o">::</span><span class="nx">loadApplicationScript</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">std</span><span class="o">::</span><span class="nx">unique_ptr</span><span class="o">&lt;</span><span class="kr">const</span> <span class="nx">JSBigString</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">std</span><span class="o">::</span><span class="nx">string</span> <span class="nx">sourceURL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">folly</span><span class="o">::</span><span class="nx">dynamic</span> <span class="nx">nativeModuleConfig</span> <span class="o">=</span> <span class="nx">folly</span><span class="o">::</span><span class="nx">dynamic</span><span class="o">::</span><span class="nx">array</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nx">SystraceSection</span> <span class="nx">s</span><span class="p">(</span><span class="s2">&quot;collectNativeModuleDescriptions&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">auto</span> <span class="nx">moduleRegistry</span> <span class="o">=</span> <span class="nx">m_delegate</span><span class="o">-&gt;</span><span class="nx">getModuleRegistry</span><span class="p">();</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kr">const</span> <span class="nx">auto</span><span class="o">&amp;</span> <span class="nx">name</span> <span class="o">:</span> <span class="nx">moduleRegistry</span><span class="o">-&gt;</span><span class="nx">moduleNames</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">auto</span> <span class="nx">config</span> <span class="o">=</span> <span class="nx">moduleRegistry</span><span class="o">-&gt;</span><span class="nx">getConfig</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">nativeModuleConfig</span><span class="p">.</span><span class="nx">push_back</span><span class="p">(</span><span class="nx">config</span> <span class="o">?</span> <span class="nx">config</span><span class="o">-&gt;</span><span class="nx">config</span> <span class="o">:</span> <span class="nx">nullptr</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">folly</span><span class="o">::</span><span class="nx">dynamic</span> <span class="nx">config</span> <span class="o">=</span>
</span><span class='line'>    <span class="nx">folly</span><span class="o">::</span><span class="nx">dynamic</span><span class="o">::</span><span class="nx">object</span>
</span><span class='line'>    <span class="p">(</span><span class="s2">&quot;remoteModuleConfig&quot;</span><span class="p">,</span> <span class="nx">std</span><span class="o">::</span><span class="nx">move</span><span class="p">(</span><span class="nx">nativeModuleConfig</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nx">SystraceSection</span> <span class="nx">t</span><span class="p">(</span><span class="s2">&quot;setGlobalVariable&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">setGlobalVariable</span><span class="p">(</span>
</span><span class='line'>      <span class="s2">&quot;__fbBatchedBridgeConfig&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">folly</span><span class="o">::</span><span class="nx">make_unique</span><span class="o">&lt;</span><span class="nx">JSBigStdString</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">folly</span><span class="o">::</span><span class="nx">toJson</span><span class="p">(</span><span class="nx">config</span><span class="p">)));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">static</span> <span class="nx">auto</span> <span class="nx">loadApplicationScript</span> <span class="o">=</span>
</span><span class='line'>    <span class="nx">jni</span><span class="o">::</span><span class="nx">findClassStatic</span><span class="p">(</span><span class="nx">EXECUTOR_BASECLASS</span><span class="p">)</span><span class="o">-&gt;</span><span class="nx">getMethod</span><span class="o">&lt;</span><span class="k">void</span><span class="p">(</span><span class="nx">jstring</span><span class="p">)</span><span class="o">&gt;</span><span class="p">(</span><span class="s2">&quot;loadApplicationScript&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// The proxy ignores the script data passed in.</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">loadApplicationScript</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">m_executor</span><span class="p">.</span><span class="nx">get</span><span class="p">(),</span>
</span><span class='line'>    <span class="nx">jni</span><span class="o">::</span><span class="nx">make_jstring</span><span class="p">(</span><span class="nx">sourceURL</span><span class="p">).</span><span class="nx">get</span><span class="p">());</span>
</span><span class='line'>  <span class="c1">// We can get pending calls here to native but the queue will be drained when</span>
</span><span class='line'>  <span class="c1">// we launch the application.</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里利用 ExecutorDelegate 得到 ModuleRegistry，通过其获取到 moduleNames，进行遍历获取到每个 module 对应的 config 信息，将这些 config 信息放置在 nativeModuleConfig 数组中，并将其封装为 remoteModuleConfig 对象，调用 setGlobalVariable 方法，将此对象存放至名为 __fbBatchedBridgeConfig 的变量中。</p>

<h4>4.JNI NativeModule 的注册</h4>

<p>在上述过程中，就有个问题，NativeModule 是如何存在于 ModuleRegistry 中的?</p>

<p>首先暴露 JNI 相关的方法是在 OnLoad.cpp 的 JNI_OnLoad 方法中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>    <span class="nx">extern</span> <span class="s2">&quot;C&quot;</span> <span class="nx">JNIEXPORT</span> <span class="nx">jint</span> <span class="nx">JNI_OnLoad</span><span class="p">(</span><span class="nx">JavaVM</span> <span class="o">*</span><span class="nx">vm</span><span class="p">,</span> <span class="k">void</span> <span class="o">*</span><span class="nx">reserved</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">initialize</span><span class="p">(</span><span class="nx">vm</span><span class="p">,</span> <span class="p">[]</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">gloginit</span><span class="o">::</span><span class="nx">initialize</span><span class="p">();</span>
</span><span class='line'>          <span class="nx">JSCJavaScriptExecutorHolder</span><span class="o">::</span><span class="nx">registerNatives</span><span class="p">();</span>
</span><span class='line'>          <span class="nx">ProxyJavaScriptExecutorHolder</span><span class="o">::</span><span class="nx">registerNatives</span><span class="p">();</span>
</span><span class='line'>          <span class="nx">CatalystInstanceImpl</span><span class="o">::</span><span class="nx">registerNatives</span><span class="p">();</span>
</span><span class='line'>          <span class="nx">CxxModuleWrapperBase</span><span class="o">::</span><span class="nx">registerNatives</span><span class="p">();</span>
</span><span class='line'>          <span class="nx">CxxModuleWrapper</span><span class="o">::</span><span class="nx">registerNatives</span><span class="p">();</span>
</span><span class='line'>          <span class="nx">JCxxCallbackImpl</span><span class="o">::</span><span class="nx">registerNatives</span><span class="p">();</span>
</span><span class='line'>          <span class="nx">NativeArray</span><span class="o">::</span><span class="nx">registerNatives</span><span class="p">();</span>
</span><span class='line'>          <span class="nx">ReadableNativeArray</span><span class="o">::</span><span class="nx">registerNatives</span><span class="p">();</span>
</span><span class='line'>          <span class="nx">WritableNativeArray</span><span class="o">::</span><span class="nx">registerNatives</span><span class="p">();</span>
</span><span class='line'>          <span class="nx">NativeMap</span><span class="o">::</span><span class="nx">registerNatives</span><span class="p">();</span>
</span><span class='line'>          <span class="nx">ReadableNativeMap</span><span class="o">::</span><span class="nx">registerNatives</span><span class="p">();</span>
</span><span class='line'>          <span class="nx">WritableNativeMap</span><span class="o">::</span><span class="nx">registerNatives</span><span class="p">();</span>
</span><span class='line'>          <span class="nx">ReadableNativeMapKeySetIterator</span><span class="o">::</span><span class="nx">registerNatives</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span><span class="nx">ifdef</span> <span class="nx">WITH_INSPECTOR</span>
</span><span class='line'>          <span class="nx">JInspector</span><span class="o">::</span><span class="nx">registerNatives</span><span class="p">();</span>
</span><span class='line'><span class="err">#</span><span class="nx">endif</span>
</span><span class='line'>      <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>其调用了 CatalystInstanceImpl::registerNatives() 方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">void</span> <span class="nx">CatalystInstanceImpl</span><span class="o">::</span><span class="nx">registerNatives</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">registerHybrid</span><span class="p">({</span>
</span><span class='line'>                   <span class="nx">makeNativeMethod</span><span class="p">(</span><span class="s2">&quot;initHybrid&quot;</span><span class="p">,</span> <span class="nx">CatalystInstanceImpl</span><span class="o">::</span><span class="nx">initHybrid</span><span class="p">),</span>
</span><span class='line'>                   <span class="nx">makeNativeMethod</span><span class="p">(</span><span class="s2">&quot;initializeBridge&quot;</span><span class="p">,</span>
</span><span class='line'>                                    <span class="nx">CatalystInstanceImpl</span><span class="o">::</span><span class="nx">initializeBridge</span><span class="p">),</span>
</span><span class='line'>                   <span class="nx">makeNativeMethod</span><span class="p">(</span><span class="s2">&quot;jniExtendNativeModules&quot;</span><span class="p">,</span>
</span><span class='line'>                                    <span class="nx">CatalystInstanceImpl</span><span class="o">::</span><span class="nx">extendNativeModules</span><span class="p">),</span>
</span><span class='line'>                   <span class="nx">makeNativeMethod</span><span class="p">(</span><span class="s2">&quot;jniSetSourceURL&quot;</span><span class="p">,</span>
</span><span class='line'>                                    <span class="nx">CatalystInstanceImpl</span><span class="o">::</span><span class="nx">jniSetSourceURL</span><span class="p">),</span>
</span><span class='line'>                   <span class="nx">makeNativeMethod</span><span class="p">(</span><span class="s2">&quot;jniRegisterSegment&quot;</span><span class="p">,</span>
</span><span class='line'>                                    <span class="nx">CatalystInstanceImpl</span><span class="o">::</span><span class="nx">jniRegisterSegment</span><span class="p">),</span>
</span><span class='line'>                   <span class="nx">makeNativeMethod</span><span class="p">(</span><span class="s2">&quot;jniLoadScriptFromAssets&quot;</span><span class="p">,</span>
</span><span class='line'>                                    <span class="nx">CatalystInstanceImpl</span><span class="o">::</span><span class="nx">jniLoadScriptFromAssets</span><span class="p">),</span>
</span><span class='line'>                   <span class="nx">makeNativeMethod</span><span class="p">(</span><span class="s2">&quot;jniLoadScriptFromFile&quot;</span><span class="p">,</span>
</span><span class='line'>                                    <span class="nx">CatalystInstanceImpl</span><span class="o">::</span><span class="nx">jniLoadScriptFromFile</span><span class="p">),</span>
</span><span class='line'>                   <span class="nx">makeNativeMethod</span><span class="p">(</span><span class="s2">&quot;jniCallJSFunction&quot;</span><span class="p">,</span>
</span><span class='line'>                                    <span class="nx">CatalystInstanceImpl</span><span class="o">::</span><span class="nx">jniCallJSFunction</span><span class="p">),</span>
</span><span class='line'>                   <span class="nx">makeNativeMethod</span><span class="p">(</span><span class="s2">&quot;jniCallJSCallback&quot;</span><span class="p">,</span>
</span><span class='line'>                                    <span class="nx">CatalystInstanceImpl</span><span class="o">::</span><span class="nx">jniCallJSCallback</span><span class="p">),</span>
</span><span class='line'>                   <span class="nx">makeNativeMethod</span><span class="p">(</span><span class="s2">&quot;setGlobalVaeeriable&quot;</span><span class="p">,</span>
</span><span class='line'>                                    <span class="nx">CatalystInstanceImpl</span><span class="o">::</span><span class="nx">setGlobalVariable</span><span class="p">),</span>
</span><span class='line'>                   <span class="nx">makeNativeMethod</span><span class="p">(</span><span class="s2">&quot;getJavaScriptContext&quot;</span><span class="p">,</span>
</span><span class='line'>                                    <span class="nx">CatalystInstanceImpl</span><span class="o">::</span><span class="nx">getJavaScriptContext</span><span class="p">),</span>
</span><span class='line'>                   <span class="nx">makeNativeMethod</span><span class="p">(</span><span class="s2">&quot;jniHandleMemoryPressure&quot;</span><span class="p">,</span>
</span><span class='line'>                                    <span class="nx">CatalystInstanceImpl</span><span class="o">::</span><span class="nx">handleMemoryPressure</span><span class="p">),</span>
</span><span class='line'>                 <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">JNativeRunnable</span><span class="o">::</span><span class="nx">registerNatives</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到 CatalystInstanceImpl::initializeBridge 方法绑定为 initializeBridge JNI 方法，而此 JNI 方法的调用则是在初始化 CatalystInstanceImpl 的构造函数中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">private</span> <span class="nf">CatalystInstanceImpl</span><span class="o">(</span>
</span><span class='line'>      <span class="kd">final</span> <span class="n">ReactQueueConfigurationSpec</span> <span class="n">reactQueueConfigurationSpec</span><span class="o">,</span>
</span><span class='line'>      <span class="kd">final</span> <span class="n">JavaScriptExecutor</span> <span class="n">jsExecutor</span><span class="o">,</span>
</span><span class='line'>      <span class="kd">final</span> <span class="n">NativeModuleRegistry</span> <span class="n">nativeModuleRegistry</span><span class="o">,</span>
</span><span class='line'>      <span class="kd">final</span> <span class="n">JSBundleLoader</span> <span class="n">jsBundleLoader</span><span class="o">,</span>
</span><span class='line'>      <span class="n">NativeModuleCallExceptionHandler</span> <span class="n">nativeModuleCallExceptionHandler</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">ReactConstants</span><span class="o">.</span><span class="na">TAG</span><span class="o">,</span> <span class="s">&quot;Initializing React Xplat Bridge.&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mHybridData</span> <span class="o">=</span> <span class="n">initHybrid</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">mReactQueueConfiguration</span> <span class="o">=</span> <span class="n">ReactQueueConfigurationImpl</span><span class="o">.</span><span class="na">create</span><span class="o">(</span>
</span><span class='line'>        <span class="n">reactQueueConfigurationSpec</span><span class="o">,</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">NativeExceptionHandler</span><span class="o">());</span>
</span><span class='line'>    <span class="n">mBridgeIdleListeners</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CopyOnWriteArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>    <span class="n">mNativeModuleRegistry</span> <span class="o">=</span> <span class="n">nativeModuleRegistry</span><span class="o">;</span>
</span><span class='line'>    <span class="n">mJSModuleRegistry</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">JavaScriptModuleRegistry</span><span class="o">();</span>
</span><span class='line'>    <span class="n">mJSBundleLoader</span> <span class="o">=</span> <span class="n">jsBundleLoader</span><span class="o">;</span>
</span><span class='line'>    <span class="n">mNativeModuleCallExceptionHandler</span> <span class="o">=</span> <span class="n">nativeModuleCallExceptionHandler</span><span class="o">;</span>
</span><span class='line'>    <span class="n">mNativeModulesQueueThread</span> <span class="o">=</span> <span class="n">mReactQueueConfiguration</span><span class="o">.</span><span class="na">getNativeModulesQueueThread</span><span class="o">();</span>
</span><span class='line'>    <span class="n">mTraceListener</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">JSProfilerTraceListener</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">ReactConstants</span><span class="o">.</span><span class="na">TAG</span><span class="o">,</span> <span class="s">&quot;Initializing React Xplat Bridge before initializeBridge&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">initializeBridge</span><span class="o">(</span>
</span><span class='line'>      <span class="k">new</span> <span class="nf">BridgeCallback</span><span class="o">(</span><span class="k">this</span><span class="o">),</span>
</span><span class='line'>      <span class="n">jsExecutor</span><span class="o">,</span>
</span><span class='line'>      <span class="n">mReactQueueConfiguration</span><span class="o">.</span><span class="na">getJSQueueThread</span><span class="o">(),</span>
</span><span class='line'>      <span class="n">mNativeModulesQueueThread</span><span class="o">,</span>
</span><span class='line'>      <span class="n">mNativeModuleRegistry</span><span class="o">.</span><span class="na">getJavaModules</span><span class="o">(</span><span class="k">this</span><span class="o">),</span>
</span><span class='line'>      <span class="n">mNativeModuleRegistry</span><span class="o">.</span><span class="na">getCxxModules</span><span class="o">());</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">ReactConstants</span><span class="o">.</span><span class="na">TAG</span><span class="o">,</span> <span class="s">&quot;Initializing React Xplat Bridge after initializeBridge&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">mJavaScriptContextHolder</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">JavaScriptContextHolder</span><span class="o">(</span><span class="n">getJavaScriptContext</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中调用的 initializeBridge 调用的 Native 方法如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nl">CatalystInstanceImpl:</span><span class="o">:</span><span class="n">initializeBridge</span><span class="o">(</span>
</span><span class='line'>  <span class="nl">jni:</span><span class="o">:</span><span class="n">alias_ref</span> <span class="o">&lt;</span><span class="nl">ReactCallback:</span><span class="o">:</span><span class="n">javaobject</span><span class="o">&gt;</span> <span class="n">callback</span><span class="o">,</span>
</span><span class='line'>  <span class="c1">// This executor is actually a factory holder.</span>
</span><span class='line'>  <span class="n">JavaScriptExecutorHolder</span> <span class="o">*</span><span class="n">jseh</span><span class="o">,</span>
</span><span class='line'>  <span class="nl">jni:</span><span class="o">:</span><span class="n">alias_ref</span> <span class="o">&lt;</span><span class="nl">JavaMessageQueueThread:</span><span class="o">:</span><span class="n">javaobject</span><span class="o">&gt;</span> <span class="n">jsQueue</span><span class="o">,</span>
</span><span class='line'>  <span class="nl">jni:</span><span class="o">:</span><span class="n">alias_ref</span> <span class="o">&lt;</span><span class="nl">JavaMessageQueueThread:</span><span class="o">:</span><span class="n">javaobject</span><span class="o">&gt;</span> <span class="n">nativeModulesQueue</span><span class="o">,</span>
</span><span class='line'>  <span class="nl">jni:</span><span class="o">:</span><span class="n">alias_ref</span> <span class="o">&lt;</span><span class="nl">jni:</span><span class="o">:</span><span class="n">JCollection</span><span class="o">&lt;</span><span class="nl">JavaModuleWrapper:</span><span class="o">:</span><span class="n">javaobject</span><span class="o">&gt;::</span><span class="n">javaobject</span><span class="o">&gt;</span> <span class="n">javaModules</span><span class="o">,</span>
</span><span class='line'>  <span class="nl">jni:</span><span class="o">:</span><span class="n">alias_ref</span> <span class="o">&lt;</span><span class="nl">jni:</span><span class="o">:</span><span class="n">JCollection</span><span class="o">&lt;</span><span class="nl">ModuleHolder:</span><span class="o">:</span><span class="n">javaobject</span><span class="o">&gt;::</span><span class="n">javaobject</span><span class="o">&gt;</span> <span class="n">cxxModules</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">moduleMessageQueue_</span> <span class="o">=</span> <span class="nl">std:</span><span class="o">:</span><span class="n">make_shared</span><span class="o">&lt;</span><span class="n">JMessageQueueThread</span><span class="o">&gt;(</span><span class="n">nativeModulesQueue</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="n">moduleRegistry_</span> <span class="o">=</span> <span class="nl">std:</span><span class="o">:</span><span class="n">make_shared</span><span class="o">&lt;</span><span class="n">ModuleRegistry</span><span class="o">&gt;(</span>
</span><span class='line'>    <span class="n">buildNativeModuleList</span><span class="o">(</span>
</span><span class='line'>      <span class="nl">std:</span><span class="o">:</span><span class="n">weak_ptr</span><span class="o">&lt;</span><span class="n">Instance</span><span class="o">&gt;(</span><span class="n">instance_</span><span class="o">),</span>
</span><span class='line'>      <span class="n">javaModules</span><span class="o">,</span>
</span><span class='line'>      <span class="n">cxxModules</span><span class="o">,</span>
</span><span class='line'>      <span class="n">moduleMessageQueue_</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">instance_</span><span class="o">-&gt;</span><span class="n">initializeBridge</span><span class="o">(</span>
</span><span class='line'>    <span class="nl">folly:</span><span class="o">:</span><span class="n">make_unique</span><span class="o">&lt;</span><span class="n">JInstanceCallback</span><span class="o">&gt;(</span>
</span><span class='line'>      <span class="n">callback</span><span class="o">,</span>
</span><span class='line'>      <span class="n">moduleMessageQueue_</span><span class="o">),</span>
</span><span class='line'>    <span class="n">jseh</span><span class="o">-&gt;</span><span class="n">getExecutorFactory</span><span class="o">(),</span>
</span><span class='line'>    <span class="nl">folly:</span><span class="o">:</span><span class="n">make_unique</span><span class="o">&lt;</span><span class="n">JMessageQueueThread</span><span class="o">&gt;(</span><span class="n">jsQueue</span><span class="o">),</span>
</span><span class='line'>    <span class="n">moduleRegistry_</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中实现初始化了 moduleRegistry，这里调用了 buildNativeModuleList 方法，其对应这 ModuleRegistryBuilder 类：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nl">std:</span><span class="o">:</span><span class="n">vector</span> <span class="o">&lt;</span><span class="nl">std:</span><span class="o">:</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">NativeModule</span><span class="o">&gt;&gt;</span> <span class="nf">buildNativeModuleList</span><span class="o">(</span>
</span><span class='line'>  <span class="nl">std:</span><span class="o">:</span><span class="n">weak_ptr</span> <span class="o">&lt;</span><span class="n">Instance</span><span class="o">&gt;</span> <span class="n">winstance</span><span class="o">,</span>
</span><span class='line'>  <span class="nl">jni:</span><span class="o">:</span><span class="n">alias_ref</span> <span class="o">&lt;</span><span class="nl">jni:</span><span class="o">:</span><span class="n">JCollection</span><span class="o">&lt;</span><span class="nl">JavaModuleWrapper:</span><span class="o">:</span><span class="n">javaobject</span><span class="o">&gt;::</span><span class="n">javaobject</span><span class="o">&gt;</span> <span class="n">javaModules</span><span class="o">,</span>
</span><span class='line'>  <span class="nl">jni:</span><span class="o">:</span><span class="n">alias_ref</span> <span class="o">&lt;</span><span class="nl">jni:</span><span class="o">:</span><span class="n">JCollection</span><span class="o">&lt;</span><span class="nl">ModuleHolder:</span><span class="o">:</span><span class="n">javaobject</span><span class="o">&gt;::</span><span class="n">javaobject</span><span class="o">&gt;</span> <span class="n">cxxModules</span><span class="o">,</span>
</span><span class='line'>  <span class="nl">std:</span><span class="o">:</span><span class="n">shared_ptr</span> <span class="o">&lt;</span><span class="n">MessageQueueThread</span><span class="o">&gt;</span> <span class="n">moduleMessageQueue</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="nl">std:</span><span class="o">:</span><span class="n">vector</span> <span class="o">&lt;</span><span class="nl">std:</span><span class="o">:</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">NativeModule</span><span class="o">&gt;&gt;</span> <span class="n">modules</span><span class="o">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">javaModules</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kd">const</span> <span class="n">auto</span> <span class="o">&amp;</span><span class="n">jm</span> <span class="o">:</span> <span class="o">*</span><span class="n">javaModules</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">modules</span><span class="o">.</span><span class="na">emplace_back</span><span class="o">(</span><span class="nl">folly:</span><span class="o">:</span><span class="n">make_unique</span><span class="o">&lt;</span><span class="n">JavaNativeModule</span><span class="o">&gt;(</span>
</span><span class='line'>        <span class="n">winstance</span><span class="o">,</span> <span class="n">jm</span><span class="o">,</span> <span class="n">moduleMessageQueue</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">cxxModules</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kd">const</span> <span class="n">auto</span> <span class="o">&amp;</span><span class="n">cm</span> <span class="o">:</span> <span class="o">*</span><span class="n">cxxModules</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">modules</span><span class="o">.</span><span class="na">emplace_back</span><span class="o">(</span><span class="nl">folly:</span><span class="o">:</span><span class="n">make_unique</span><span class="o">&lt;</span><span class="n">CxxNativeModule</span><span class="o">&gt;(</span>
</span><span class='line'>        <span class="n">winstance</span><span class="o">,</span> <span class="n">cm</span><span class="o">-&gt;</span><span class="n">getName</span><span class="o">(),</span> <span class="n">cm</span><span class="o">-&gt;</span><span class="n">getProvider</span><span class="o">(),</span> <span class="n">moduleMessageQueue</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">modules</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里则会遍历 javaModules 和延迟加载的 cxxModules，全部存放于类型为 NativeModule 的数组中，由此得到 ModuleRegistry 中，这样便可生成 config 信息：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nl">folly:</span><span class="o">:</span><span class="n">Optional</span> <span class="o">&lt;</span><span class="n">ModuleConfig</span><span class="o">&gt;</span> <span class="nl">ModuleRegistry:</span><span class="o">:</span><span class="n">getConfig</span><span class="o">(</span><span class="kd">const</span> <span class="nl">std:</span><span class="o">:</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">SystraceSection</span> <span class="nf">s</span><span class="o">(</span><span class="s">&quot;ModuleRegistry::getConfig&quot;</span><span class="o">,</span> <span class="s">&quot;module&quot;</span><span class="o">,</span> <span class="n">name</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Initialize modulesByName_</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">modulesByName_</span><span class="o">.</span><span class="na">empty</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">modules_</span><span class="o">.</span><span class="na">empty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">moduleNames</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">modulesByName_</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">it</span> <span class="o">==</span> <span class="n">modulesByName_</span><span class="o">.</span><span class="na">end</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">unknownModules_</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="n">name</span><span class="o">)</span> <span class="o">!=</span> <span class="n">unknownModules_</span><span class="o">.</span><span class="na">end</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">nullptr</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">moduleNotFoundCallback_</span> <span class="o">||</span>
</span><span class='line'>        <span class="o">!</span><span class="n">moduleNotFoundCallback_</span><span class="o">(</span><span class="n">name</span><span class="o">)</span> <span class="o">||</span>
</span><span class='line'>        <span class="o">(</span><span class="n">it</span> <span class="o">=</span> <span class="n">modulesByName_</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="n">name</span><span class="o">))</span> <span class="o">==</span> <span class="n">modulesByName_</span><span class="o">.</span><span class="na">end</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">unknownModules_</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">nullptr</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">size_t</span> <span class="n">index</span> <span class="o">=</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">second</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">CHECK</span><span class="o">(</span><span class="n">index</span> <span class="o">&lt;</span> <span class="n">modules_</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
</span><span class='line'>  <span class="n">NativeModule</span> <span class="o">*</span><span class="n">module</span> <span class="o">=</span> <span class="n">modules_</span><span class="o">[</span><span class="n">index</span><span class="o">].</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// string name, object constants, array methodNames (methodId is index), [array promiseMethodIds], [array syncMethodIds]</span>
</span><span class='line'>  <span class="nl">folly:</span><span class="o">:</span><span class="n">dynamic</span> <span class="n">config</span> <span class="o">=</span> <span class="nl">folly:</span><span class="o">:</span><span class="nl">dynamic:</span><span class="o">:</span><span class="n">array</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="n">SystraceSection</span> <span class="nf">s_</span><span class="o">(</span><span class="s">&quot;getConstants&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="na">push_back</span><span class="o">(</span><span class="n">module</span><span class="o">-&gt;</span><span class="n">getConstants</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="n">SystraceSection</span> <span class="nf">s_</span><span class="o">(</span><span class="s">&quot;getMethods&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="nl">std:</span><span class="o">:</span><span class="n">vector</span> <span class="o">&lt;</span><span class="n">MethodDescriptor</span><span class="o">&gt;</span> <span class="n">methods</span> <span class="o">=</span> <span class="n">module</span><span class="o">-&gt;</span><span class="n">getMethods</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nl">folly:</span><span class="o">:</span><span class="n">dynamic</span> <span class="n">methodNames</span> <span class="o">=</span> <span class="nl">folly:</span><span class="o">:</span><span class="nl">dynamic:</span><span class="o">:</span><span class="n">array</span><span class="o">;</span>
</span><span class='line'>    <span class="nl">folly:</span><span class="o">:</span><span class="n">dynamic</span> <span class="n">promiseMethodIds</span> <span class="o">=</span> <span class="nl">folly:</span><span class="o">:</span><span class="nl">dynamic:</span><span class="o">:</span><span class="n">array</span><span class="o">;</span>
</span><span class='line'>    <span class="nl">folly:</span><span class="o">:</span><span class="n">dynamic</span> <span class="n">syncMethodIds</span> <span class="o">=</span> <span class="nl">folly:</span><span class="o">:</span><span class="nl">dynamic:</span><span class="o">:</span><span class="n">array</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">auto</span> <span class="o">&amp;</span><span class="n">descriptor</span> <span class="o">:</span> <span class="n">methods</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// TODO: #10487027 compare tags instead of doing string comparison?</span>
</span><span class='line'>      <span class="n">methodNames</span><span class="o">.</span><span class="na">push_back</span><span class="o">(</span><span class="nl">std:</span><span class="o">:</span><span class="n">move</span><span class="o">(</span><span class="n">descriptor</span><span class="o">.</span><span class="na">name</span><span class="o">));</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">descriptor</span><span class="o">.</span><span class="na">type</span> <span class="o">==</span> <span class="s">&quot;promise&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">promiseMethodIds</span><span class="o">.</span><span class="na">push_back</span><span class="o">(</span><span class="n">methodNames</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">descriptor</span><span class="o">.</span><span class="na">type</span> <span class="o">==</span> <span class="s">&quot;sync&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">syncMethodIds</span><span class="o">.</span><span class="na">push_back</span><span class="o">(</span><span class="n">methodNames</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">methodNames</span><span class="o">.</span><span class="na">empty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">config</span><span class="o">.</span><span class="na">push_back</span><span class="o">(</span><span class="nl">std:</span><span class="o">:</span><span class="n">move</span><span class="o">(</span><span class="n">methodNames</span><span class="o">));</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(!</span><span class="n">promiseMethodIds</span><span class="o">.</span><span class="na">empty</span><span class="o">()</span> <span class="o">||</span> <span class="o">!</span><span class="n">syncMethodIds</span><span class="o">.</span><span class="na">empty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">config</span><span class="o">.</span><span class="na">push_back</span><span class="o">(</span><span class="nl">std:</span><span class="o">:</span><span class="n">move</span><span class="o">(</span><span class="n">promiseMethodIds</span><span class="o">));</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">syncMethodIds</span><span class="o">.</span><span class="na">empty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">config</span><span class="o">.</span><span class="na">push_back</span><span class="o">(</span><span class="nl">std:</span><span class="o">:</span><span class="n">move</span><span class="o">(</span><span class="n">syncMethodIds</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="n">config</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="na">empty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// no constants or methods</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">nullptr</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">ModuleConfig</span><span class="o">{</span><span class="n">index</span><span class="o">,</span> <span class="n">config</span><span class="o">};</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其根据一个 name 值，从 modules 中获取到指定的 module，进行读取里面的值，得到 ModuleConfig 信息。</p>

<h4>5.调用方法的暴露</h4>

<p>这里提供了两个方法，来提供调用 Native 方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nl">ModuleRegistry:</span><span class="o">:</span><span class="n">callNativeMethod</span><span class="o">(</span><span class="n">unsigned</span> <span class="kt">int</span> <span class="n">moduleId</span><span class="o">,</span> <span class="n">unsigned</span> <span class="kt">int</span> <span class="n">methodId</span><span class="o">,</span>
</span><span class='line'>                                      <span class="nl">folly:</span><span class="o">:</span><span class="n">dynamic</span> <span class="o">&amp;&amp;</span><span class="n">params</span><span class="o">,</span> <span class="kt">int</span> <span class="n">callId</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">moduleId</span> <span class="o">&gt;=</span> <span class="n">modules_</span><span class="o">.</span><span class="na">size</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="nl">std:</span><span class="o">:</span><span class="n">runtime_error</span><span class="o">(</span>
</span><span class='line'>      <span class="nl">folly:</span><span class="o">:</span><span class="n">to</span><span class="o">&lt;</span><span class="nl">std:</span><span class="o">:</span><span class="n">string</span><span class="o">&gt;(</span><span class="s">&quot;moduleId &quot;</span><span class="o">,</span> <span class="n">moduleId</span><span class="o">,</span> <span class="s">&quot; out of range [0..&quot;</span><span class="o">,</span> <span class="n">modules_</span><span class="o">.</span><span class="na">size</span><span class="o">(),</span>
</span><span class='line'>                             <span class="s">&quot;)&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">modules_</span><span class="o">[</span><span class="n">moduleId</span><span class="o">]-&gt;</span><span class="n">invoke</span><span class="o">(</span><span class="n">methodId</span><span class="o">,</span> <span class="nl">std:</span><span class="o">:</span><span class="n">move</span><span class="o">(</span><span class="n">params</span><span class="o">),</span> <span class="n">callId</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">MethodCallResult</span>
</span><span class='line'><span class="nl">ModuleRegistry:</span><span class="o">:</span><span class="n">callSerializableNativeHook</span><span class="o">(</span><span class="n">unsigned</span> <span class="kt">int</span> <span class="n">moduleId</span><span class="o">,</span> <span class="n">unsigned</span> <span class="kt">int</span> <span class="n">methodId</span><span class="o">,</span>
</span><span class='line'>                                           <span class="nl">folly:</span><span class="o">:</span><span class="n">dynamic</span> <span class="o">&amp;&amp;</span><span class="n">params</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">moduleId</span> <span class="o">&gt;=</span> <span class="n">modules_</span><span class="o">.</span><span class="na">size</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="nl">std:</span><span class="o">:</span><span class="n">runtime_error</span><span class="o">(</span>
</span><span class='line'>      <span class="nl">folly:</span><span class="o">:</span><span class="n">to</span><span class="o">&lt;</span><span class="nl">std:</span><span class="o">:</span><span class="n">string</span><span class="o">&gt;(</span><span class="s">&quot;moduleId &quot;</span><span class="o">,</span> <span class="n">moduleId</span><span class="o">,</span> <span class="s">&quot;out of range [0..&quot;</span><span class="o">,</span> <span class="n">modules_</span><span class="o">.</span><span class="na">size</span><span class="o">(),</span>
</span><span class='line'>                             <span class="s">&quot;)&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">modules_</span><span class="o">[</span><span class="n">moduleId</span><span class="o">]-&gt;</span><span class="n">callSerializableNativeHook</span><span class="o">(</span><span class="n">methodId</span><span class="o">,</span> <span class="nl">std:</span><span class="o">:</span><span class="n">move</span><span class="o">(</span><span class="n">params</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这两个方法执行的是 module 对应的方法，对应类为 CxxNativeModule:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span>
</span><span class='line'><span class="nl">CxxNativeModule:</span><span class="o">:</span><span class="n">invoke</span><span class="o">(</span><span class="n">unsigned</span> <span class="kt">int</span> <span class="n">reactMethodId</span><span class="o">,</span> <span class="nl">folly:</span><span class="o">:</span><span class="n">dynamic</span> <span class="o">&amp;&amp;</span><span class="n">params</span><span class="o">,</span> <span class="kt">int</span> <span class="n">callId</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">reactMethodId</span> <span class="o">&gt;=</span> <span class="n">methods_</span><span class="o">.</span><span class="na">size</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="nl">std:</span><span class="o">:</span><span class="n">invalid_argument</span><span class="o">(</span><span class="nl">folly:</span><span class="o">:</span><span class="n">to</span><span class="o">&lt;</span><span class="nl">std:</span><span class="o">:</span><span class="n">string</span><span class="o">&gt;(</span><span class="s">&quot;methodId &quot;</span><span class="o">,</span> <span class="n">reactMethodId</span><span class="o">,</span>
</span><span class='line'>                                                       <span class="s">&quot; out of range [0..&quot;</span><span class="o">,</span>
</span><span class='line'>                                                       <span class="n">methods_</span><span class="o">.</span><span class="na">size</span><span class="o">(),</span> <span class="s">&quot;]&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(!</span><span class="n">params</span><span class="o">.</span><span class="na">isArray</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="nl">std:</span><span class="o">:</span><span class="n">invalid_argument</span><span class="o">(</span>
</span><span class='line'>      <span class="nl">folly:</span><span class="o">:</span><span class="n">to</span><span class="o">&lt;</span><span class="nl">std:</span><span class="o">:</span><span class="n">string</span><span class="o">&gt;(</span><span class="s">&quot;method parameters should be array, but are &quot;</span><span class="o">,</span>
</span><span class='line'>                             <span class="n">params</span><span class="o">.</span><span class="na">typeName</span><span class="o">()));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nl">CxxModule:</span><span class="o">:</span><span class="n">Callback</span> <span class="n">first</span><span class="o">;</span>
</span><span class='line'>  <span class="nl">CxxModule:</span><span class="o">:</span><span class="n">Callback</span> <span class="n">second</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">const</span> <span class="n">auto</span> <span class="o">&amp;</span><span class="n">method</span> <span class="o">=</span> <span class="n">methods_</span><span class="o">[</span><span class="n">reactMethodId</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(!</span><span class="n">method</span><span class="o">.</span><span class="na">func</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="nl">std:</span><span class="o">:</span><span class="n">runtime_error</span><span class="o">(</span><span class="nl">folly:</span><span class="o">:</span><span class="n">to</span><span class="o">&lt;</span><span class="nl">std:</span><span class="o">:</span><span class="n">string</span><span class="o">&gt;(</span><span class="s">&quot;Method &quot;</span><span class="o">,</span> <span class="n">method</span><span class="o">.</span><span class="na">name</span><span class="o">,</span>
</span><span class='line'>                                                    <span class="s">&quot; is synchronous but invoked asynchronously&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">params</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">method</span><span class="o">.</span><span class="na">callbacks</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="nl">std:</span><span class="o">:</span><span class="n">invalid_argument</span><span class="o">(</span><span class="nl">folly:</span><span class="o">:</span><span class="n">to</span><span class="o">&lt;</span><span class="nl">std:</span><span class="o">:</span><span class="n">string</span><span class="o">&gt;(</span><span class="s">&quot;Expected &quot;</span><span class="o">,</span> <span class="n">method</span><span class="o">.</span><span class="na">callbacks</span><span class="o">,</span>
</span><span class='line'>                                                       <span class="s">&quot; callbacks, but only &quot;</span><span class="o">,</span>
</span><span class='line'>                                                       <span class="n">params</span><span class="o">.</span><span class="na">size</span><span class="o">(),</span>
</span><span class='line'>                                                       <span class="s">&quot; parameters provided&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">callbacks</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">first</span> <span class="o">=</span> <span class="n">convertCallback</span><span class="o">(</span><span class="n">makeCallback</span><span class="o">(</span><span class="n">instance_</span><span class="o">,</span> <span class="n">params</span><span class="o">[</span><span class="n">params</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]));</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">callbacks</span> <span class="o">==</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">first</span> <span class="o">=</span> <span class="n">convertCallback</span><span class="o">(</span><span class="n">makeCallback</span><span class="o">(</span><span class="n">instance_</span><span class="o">,</span> <span class="n">params</span><span class="o">[</span><span class="n">params</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">2</span><span class="o">]));</span>
</span><span class='line'>    <span class="n">second</span> <span class="o">=</span> <span class="n">convertCallback</span><span class="o">(</span><span class="n">makeCallback</span><span class="o">(</span><span class="n">instance_</span><span class="o">,</span> <span class="n">params</span><span class="o">[</span><span class="n">params</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">params</span><span class="o">.</span><span class="na">resize</span><span class="o">(</span><span class="n">params</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="n">method</span><span class="o">.</span><span class="na">callbacks</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="n">messageQueueThread_</span><span class="o">-&gt;</span><span class="n">runOnQueue</span><span class="o">(</span>
</span><span class='line'>    <span class="o">[</span><span class="n">method</span><span class="o">,</span> <span class="n">params</span> <span class="o">=</span> <span class="nl">std:</span><span class="o">:</span><span class="n">move</span><span class="o">(</span><span class="n">params</span><span class="o">),</span> <span class="n">first</span><span class="o">,</span> <span class="n">second</span><span class="o">,</span> <span class="n">callId</span><span class="o">]()</span> <span class="o">{</span>
</span><span class='line'><span class="err">#</span><span class="n">ifdef</span> <span class="n">WITH_FBSYSTRACE</span>
</span><span class='line'>        <span class="nf">if</span> <span class="o">(</span><span class="n">callId</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">fbsystrace_end_async_flow</span><span class="o">(</span><span class="n">TRACE_TAG_REACT_APPS</span><span class="o">,</span> <span class="s">&quot;native&quot;</span><span class="o">,</span> <span class="n">callId</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'><span class="err">#</span><span class="n">endif</span>
</span><span class='line'>        <span class="n">SystraceSection</span> <span class="nf">s</span><span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">name</span><span class="o">.</span><span class="na">c_str</span><span class="o">());</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">method</span><span class="o">.</span><span class="na">func</span><span class="o">(</span><span class="nl">std:</span><span class="o">:</span><span class="n">move</span><span class="o">(</span><span class="n">params</span><span class="o">),</span> <span class="n">first</span><span class="o">,</span> <span class="n">second</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="kd">const</span> <span class="nl">facebook:</span><span class="o">:</span><span class="nl">xplat:</span><span class="o">:</span><span class="n">JsArgumentException</span> <span class="o">&amp;</span><span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">throw</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nl">std:</span><span class="o">:</span><span class="n">exception</span> <span class="o">&amp;</span><span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">LOG</span><span class="o">(</span><span class="n">ERROR</span><span class="o">)</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;std::exception. Method call &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">method</span><span class="o">.</span><span class="na">name</span><span class="o">.</span><span class="na">c_str</span><span class="o">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; failed: &quot;</span>
</span><span class='line'>                     <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="o">.</span><span class="na">what</span><span class="o">();</span>
</span><span class='line'>          <span class="nl">std:</span><span class="o">:</span><span class="n">terminate</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nl">std:</span><span class="o">:</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">error</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">LOG</span><span class="o">(</span><span class="n">ERROR</span><span class="o">)</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;std::string. Method call &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">method</span><span class="o">.</span><span class="na">name</span><span class="o">.</span><span class="na">c_str</span><span class="o">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; failed: &quot;</span>
</span><span class='line'>                     <span class="o">&lt;&lt;</span> <span class="n">error</span><span class="o">.</span><span class="na">c_str</span><span class="o">();</span>
</span><span class='line'>          <span class="nl">std:</span><span class="o">:</span><span class="n">terminate</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(...)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">LOG</span><span class="o">(</span><span class="n">ERROR</span><span class="o">)</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Method call &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">method</span><span class="o">.</span><span class="na">name</span><span class="o">.</span><span class="na">c_str</span><span class="o">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; failed. unknown error&quot;</span><span class="o">;</span>
</span><span class='line'>          <span class="nl">std:</span><span class="o">:</span><span class="n">terminate</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在 invoke 方法中，会解析参数，确定 callback 的数量，之后便是在指定的 MessageQueue 中执行方法的调用。同理：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">MethodCallResult</span>
</span><span class='line'><span class="nl">CxxNativeModule:</span><span class="o">:</span><span class="n">callSerializableNativeHook</span><span class="o">(</span><span class="n">unsigned</span> <span class="kt">int</span> <span class="n">hookId</span><span class="o">,</span> <span class="nl">folly:</span><span class="o">:</span><span class="n">dynamic</span> <span class="o">&amp;&amp;</span><span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">hookId</span> <span class="o">&gt;=</span> <span class="n">methods_</span><span class="o">.</span><span class="na">size</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="nl">std:</span><span class="o">:</span><span class="n">invalid_argument</span><span class="o">(</span>
</span><span class='line'>      <span class="nl">folly:</span><span class="o">:</span><span class="n">to</span><span class="o">&lt;</span><span class="nl">std:</span><span class="o">:</span><span class="n">string</span><span class="o">&gt;(</span><span class="s">&quot;methodId &quot;</span><span class="o">,</span> <span class="n">hookId</span><span class="o">,</span> <span class="s">&quot; out of range [0..&quot;</span><span class="o">,</span> <span class="n">methods_</span><span class="o">.</span><span class="na">size</span><span class="o">(),</span>
</span><span class='line'>                             <span class="s">&quot;]&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">const</span> <span class="n">auto</span> <span class="o">&amp;</span><span class="n">method</span> <span class="o">=</span> <span class="n">methods_</span><span class="o">[</span><span class="n">hookId</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(!</span><span class="n">method</span><span class="o">.</span><span class="na">syncFunc</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="nl">std:</span><span class="o">:</span><span class="n">runtime_error</span><span class="o">(</span>
</span><span class='line'>      <span class="nl">folly:</span><span class="o">:</span><span class="n">to</span><span class="o">&lt;</span><span class="nl">std:</span><span class="o">:</span><span class="n">string</span><span class="o">&gt;(</span><span class="s">&quot;Method &quot;</span><span class="o">,</span> <span class="n">method</span><span class="o">.</span><span class="na">name</span><span class="o">,</span>
</span><span class='line'>                             <span class="s">&quot; is asynchronous but invoked synchronously&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">method</span><span class="o">.</span><span class="na">syncFunc</span><span class="o">(</span><span class="nl">std:</span><span class="o">:</span><span class="n">move</span><span class="o">(</span><span class="n">args</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>callSerialiableNativeHook 则是进行方法同步的调用。</p>

<h2>Native 调用 JS</h2>

<p>将 JS 端定义的对象方法来提供给 Native 端调用。</p>

<h3>1.步骤</h3>

<ul>
<li>1）Native端声明定义一个实现 JavaScriptModule 接口的类</li>
<li>2) 在 JS 端，实现定义此 Module，并将此对象添加注册至 MessageQueue 中.</li>
</ul>


<p>在 MessageQueue.js 中，提供了两个用来注册 Module 的方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">registerCallableModule</span><span class="p">(</span><span class="nx">name</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">module</span><span class="o">:</span> <span class="nb">Object</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>以及懒加载方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">registerLazyCallableModule</span><span class="p">(</span><span class="nx">name</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">factory</span><span class="o">:</span> <span class="k">void</span> <span class="o">=&gt;</span> <span class="nb">Object</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2.实现</h3>

<h4>1.定义 JavaScriptModule</h4>

<p>在 Native 中定义了 <code>JavaScriptModule</code>，代表了在 JS 端定义的 JS 方法。</p>

<p>若需要调用 JS 端的方法时，使用 <code>CatalystInstance</code> 接口的 <code>getJSModule</code> 方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">JavaScriptModule</span><span class="o">&gt;</span> <span class="n">T</span> <span class="nf">getJSModule</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">jsInterface</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>如调用 <code>AppRegistry</code> 的 <code>runApplication</code> 方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">catalystInstance</span><span class="o">.</span><span class="na">getJSModule</span><span class="o">(</span><span class="n">AppRegistry</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">runApplication</span><span class="o">(</span><span class="n">jsAppModuleName</span><span class="o">,</span> <span class="n">appParams</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>2.调用过程</h4>

<p>获取 JavaScriptModule 的方法，则是在 JavaScriptModuleRegistry 了中，其对 JavaScriptModule 类的获取，做了缓存策略，这里使用了代理调用，来改变其方法的调用。具体便是通过 JavaScriptModuleInvocationHandler 的 invoke 方法，来通过 CatalystInstance 来完成真正 JS 方法的调用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="nd">@Nullable</span> <span class="n">Object</span> <span class="nf">invoke</span><span class="o">(</span><span class="n">Object</span> <span class="n">proxy</span><span class="o">,</span> <span class="n">Method</span> <span class="n">method</span><span class="o">,</span> <span class="nd">@Nullable</span> <span class="n">Object</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'><span class="n">NativeArray</span> <span class="n">jsArgs</span> <span class="o">=</span> <span class="n">args</span> <span class="o">!=</span> <span class="kc">null</span>
</span><span class='line'>  <span class="o">?</span> <span class="n">Arguments</span><span class="o">.</span><span class="na">fromJavaArgs</span><span class="o">(</span><span class="n">args</span><span class="o">)</span>
</span><span class='line'>  <span class="o">:</span> <span class="k">new</span> <span class="nf">WritableNativeArray</span><span class="o">();</span>
</span><span class='line'>  <span class="n">mCatalystInstance</span><span class="o">.</span><span class="na">callFunction</span><span class="o">(</span><span class="n">getJSModuleName</span><span class="o">(),</span> <span class="n">method</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span> <span class="n">jsArgs</span><span class="o">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于 CatalystInstance 在 C 层的实现，对应着 CatalystInstanceImpl.cpp 的类：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nl">CatalystInstanceImpl:</span><span class="o">:</span><span class="n">jniCallJSFunction</span><span class="o">(</span><span class="nl">std:</span><span class="o">:</span><span class="n">string</span> <span class="n">module</span><span class="o">,</span> <span class="nl">std:</span><span class="o">:</span><span class="n">string</span> <span class="n">method</span><span class="o">,</span> <span class="n">NativeArray</span><span class="o">*</span> <span class="n">arguments</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">instance_</span><span class="o">-&gt;</span><span class="n">callJSFunction</span><span class="o">(</span><span class="nl">std:</span><span class="o">:</span><span class="n">move</span><span class="o">(</span><span class="n">module</span><span class="o">),</span>
</span><span class='line'>                            <span class="nl">std:</span><span class="o">:</span><span class="n">move</span><span class="o">(</span><span class="n">method</span><span class="o">),</span>
</span><span class='line'>                            <span class="n">arguments</span><span class="o">-&gt;</span><span class="n">consume</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>instance_ 是指 Instance.cpp 类的实例，会调用到：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nl">Instance:</span><span class="o">:</span><span class="n">callJSFunction</span><span class="o">(</span><span class="nl">std:</span><span class="o">:</span><span class="n">string</span> <span class="o">&amp;&amp;</span><span class="n">module</span><span class="o">,</span> <span class="nl">std:</span><span class="o">:</span><span class="n">string</span> <span class="o">&amp;&amp;</span><span class="n">method</span><span class="o">,</span>
</span><span class='line'>                              <span class="nl">folly:</span><span class="o">:</span><span class="n">dynamic</span> <span class="o">&amp;&amp;</span><span class="n">params</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">callback_</span><span class="o">-&gt;</span><span class="n">incrementPendingJSCalls</span><span class="o">();</span>
</span><span class='line'>  <span class="n">nativeToJsBridge_</span><span class="o">-&gt;</span><span class="n">callFunction</span><span class="o">(</span><span class="nl">std:</span><span class="o">:</span><span class="n">move</span><span class="o">(</span><span class="n">module</span><span class="o">),</span> <span class="nl">std:</span><span class="o">:</span><span class="n">move</span><span class="o">(</span><span class="n">method</span><span class="o">),</span>
</span><span class='line'>                                  <span class="nl">std:</span><span class="o">:</span><span class="n">move</span><span class="o">(</span><span class="n">params</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其调用的便是 NativeToJsBridge.cpp 的 callFunction 方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nl">NativeToJsBridge:</span><span class="o">:</span><span class="n">callFunction</span><span class="o">(</span>
</span><span class='line'>    <span class="nl">std:</span><span class="o">:</span><span class="n">string</span><span class="o">&amp;&amp;</span> <span class="n">module</span><span class="o">,</span>
</span><span class='line'>    <span class="nl">std:</span><span class="o">:</span><span class="n">string</span><span class="o">&amp;&amp;</span> <span class="n">method</span><span class="o">,</span>
</span><span class='line'>    <span class="nl">folly:</span><span class="o">:</span><span class="n">dynamic</span><span class="o">&amp;&amp;</span> <span class="n">arguments</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">systraceCookie</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">runOnExecutorQueue</span><span class="o">([</span><span class="n">module</span> <span class="o">=</span> <span class="nl">std:</span><span class="o">:</span><span class="n">move</span><span class="o">(</span><span class="n">module</span><span class="o">),</span> <span class="n">method</span> <span class="o">=</span> <span class="nl">std:</span><span class="o">:</span><span class="n">move</span><span class="o">(</span><span class="n">method</span><span class="o">),</span> <span class="n">arguments</span> <span class="o">=</span> <span class="nl">std:</span><span class="o">:</span><span class="n">move</span><span class="o">(</span><span class="n">arguments</span><span class="o">),</span> <span class="n">systraceCookie</span><span class="o">]</span>
</span><span class='line'>    <span class="o">(</span><span class="n">JSExecutor</span><span class="o">*</span> <span class="n">executor</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="o">...</span>
</span><span class='line'>       <span class="c1">// This is safe because we are running on the executor&#39;s thread: it won&#39;t</span>
</span><span class='line'>      <span class="c1">// destruct until after it&#39;s been unregistered (which we check above) and</span>
</span><span class='line'>      <span class="c1">// that will happen on this thread</span>
</span><span class='line'>      <span class="n">executor</span><span class="o">-&gt;</span><span class="n">callFunction</span><span class="o">(</span><span class="n">module</span><span class="o">,</span> <span class="n">method</span><span class="o">,</span> <span class="n">arguments</span><span class="o">);</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>而 executor 便指的是 JSCExecutor.cpp 类：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kt">void</span> <span class="nl">JSCExecutor:</span><span class="o">:</span><span class="n">callFunction</span><span class="o">(</span><span class="kd">const</span> <span class="nl">std:</span><span class="o">:</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">moduleId</span><span class="o">,</span> <span class="kd">const</span> <span class="nl">std:</span><span class="o">:</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">methodId</span><span class="o">,</span> <span class="kd">const</span> <span class="nl">folly:</span><span class="o">:</span><span class="n">dynamic</span><span class="o">&amp;</span> <span class="n">arguments</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">SystraceSection</span> <span class="nf">s</span><span class="o">(</span><span class="s">&quot;JSCExecutor::callFunction&quot;</span><span class="o">);</span>
</span><span class='line'>   <span class="c1">// This weird pattern is because Value is not default constructible.</span>
</span><span class='line'>   <span class="c1">// The lambda is inlined, so there&#39;s no overhead.</span>
</span><span class='line'>   <span class="n">auto</span> <span class="n">result</span> <span class="o">=</span> <span class="o">[&amp;]</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">JSContextLock</span> <span class="nf">lock</span><span class="o">(</span><span class="n">m_context</span><span class="o">);</span>
</span><span class='line'>     <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">if</span> <span class="o">(!</span><span class="n">m_callFunctionReturnResultAndFlushedQueueJS</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">bindBridge</span><span class="o">();</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>       <span class="k">return</span> <span class="n">m_callFunctionReturnFlushedQueueJS</span><span class="o">-&gt;</span><span class="n">callAsFunction</span><span class="o">({</span>
</span><span class='line'>         <span class="n">Value</span><span class="o">(</span><span class="n">m_context</span><span class="o">,</span> <span class="nl">String:</span><span class="o">:</span><span class="n">createExpectingAscii</span><span class="o">(</span><span class="n">m_context</span><span class="o">,</span> <span class="n">moduleId</span><span class="o">)),</span>
</span><span class='line'>         <span class="n">Value</span><span class="o">(</span><span class="n">m_context</span><span class="o">,</span> <span class="nl">String:</span><span class="o">:</span><span class="n">createExpectingAscii</span><span class="o">(</span><span class="n">m_context</span><span class="o">,</span> <span class="n">methodId</span><span class="o">)),</span>
</span><span class='line'>         <span class="nl">Value:</span><span class="o">:</span><span class="n">fromDynamic</span><span class="o">(</span><span class="n">m_context</span><span class="o">,</span> <span class="nl">std:</span><span class="o">:</span><span class="n">move</span><span class="o">(</span><span class="n">arguments</span><span class="o">))</span>
</span><span class='line'>       <span class="o">});</span>
</span><span class='line'>     <span class="o">}</span> <span class="k">catch</span> <span class="o">(...)</span> <span class="o">{</span>
</span><span class='line'>       <span class="nl">std:</span><span class="o">:</span><span class="n">throw_with_nested</span><span class="o">(</span>
</span><span class='line'>                              <span class="nl">std:</span><span class="o">:</span><span class="n">runtime_error</span><span class="o">(</span><span class="s">&quot;Error calling &quot;</span> <span class="o">+</span> <span class="n">moduleId</span> <span class="o">+</span> <span class="s">&quot;.&quot;</span> <span class="o">+</span> <span class="n">methodId</span><span class="o">));</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'>   <span class="o">}();</span>
</span><span class='line'>   <span class="n">callNativeModules</span><span class="o">(</span><span class="nl">std:</span><span class="o">:</span><span class="n">move</span><span class="o">(</span><span class="n">result</span><span class="o">));</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中的 m_callFunctionReturnResultAndFlushedQueueJS 是在 bindBridge 过程中，从 JS 全局对象 <code>__fbBatchedBridge</code> 中进行获取读到的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kt">void</span> <span class="nl">JSCExecutor:</span><span class="o">:</span><span class="n">bindBridge</span><span class="o">()</span> <span class="k">throw</span><span class="o">(</span><span class="n">JSException</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">SystraceSection</span> <span class="nf">s</span><span class="o">(</span><span class="s">&quot;JSCExecutor::bindBridge&quot;</span><span class="o">);</span>
</span><span class='line'>   <span class="nl">std:</span><span class="o">:</span><span class="n">call_once</span><span class="o">(</span><span class="n">m_bindFlag</span><span class="o">,</span> <span class="o">[</span><span class="k">this</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">auto</span> <span class="n">global</span> <span class="o">=</span> <span class="nl">Object:</span><span class="o">:</span><span class="n">getGlobalObject</span><span class="o">(</span><span class="n">m_context</span><span class="o">);</span>
</span><span class='line'>     <span class="n">auto</span> <span class="n">batchedBridgeValue</span> <span class="o">=</span> <span class="n">global</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;__fbBatchedBridge&quot;</span><span class="o">);</span>
</span><span class='line'>     <span class="k">if</span> <span class="o">(</span><span class="n">batchedBridgeValue</span><span class="o">.</span><span class="na">isUndefined</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">auto</span> <span class="n">requireBatchedBridge</span> <span class="o">=</span> <span class="n">global</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;__fbRequireBatchedBridge&quot;</span><span class="o">);</span>
</span><span class='line'>       <span class="k">if</span> <span class="o">(!</span><span class="n">requireBatchedBridge</span><span class="o">.</span><span class="na">isUndefined</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">batchedBridgeValue</span> <span class="o">=</span> <span class="n">requireBatchedBridge</span><span class="o">.</span><span class="na">asObject</span><span class="o">().</span><span class="na">callAsFunction</span><span class="o">({});</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>       <span class="k">if</span> <span class="o">(</span><span class="n">batchedBridgeValue</span><span class="o">.</span><span class="na">isUndefined</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>         <span class="k">throw</span> <span class="nf">JSException</span><span class="o">(</span><span class="s">&quot;Could not get BatchedBridge, make sure your bundle is packaged correctly&quot;</span><span class="o">);</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>     <span class="n">auto</span> <span class="n">batchedBridge</span> <span class="o">=</span> <span class="n">batchedBridgeValue</span><span class="o">.</span><span class="na">asObject</span><span class="o">();</span>
</span><span class='line'>     <span class="n">m_callFunctionReturnFlushedQueueJS</span> <span class="o">=</span> <span class="n">batchedBridge</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;callFunctionReturnFlushedQueue&quot;</span><span class="o">).</span><span class="na">asObject</span><span class="o">();</span>
</span><span class='line'>     <span class="n">m_invokeCallbackAndReturnFlushedQueueJS</span> <span class="o">=</span> <span class="n">batchedBridge</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;invokeCallbackAndReturnFlushedQueue&quot;</span><span class="o">).</span><span class="na">asObject</span><span class="o">();</span>
</span><span class='line'>     <span class="n">m_flushedQueueJS</span> <span class="o">=</span> <span class="n">batchedBridge</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;flushedQueue&quot;</span><span class="o">).</span><span class="na">asObject</span><span class="o">();</span>
</span><span class='line'>     <span class="n">m_callFunctionReturnResultAndFlushedQueueJS</span> <span class="o">=</span> <span class="n">batchedBridge</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;callFunctionReturnResultAndFlushedQueue&quot;</span><span class="o">).</span><span class="na">asObject</span><span class="o">();</span>
</span><span class='line'>   <span class="o">});</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>而此 __fbBatchedBridge 的定义则是在 JS 端的 BatchedBridge.js 文件中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">MessageQueue</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;MessageQueue&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">BatchedBridge</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MessageQueue</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Wire up the batched bridge on the global object so that we can call into it.</span>
</span><span class='line'><span class="c1">// Ideally, this would be the inverse relationship. I.e. the native environment</span>
</span><span class='line'><span class="c1">// provides this global directly with its script embedded. Then this module</span>
</span><span class='line'><span class="c1">// would export it. A possible fix would be to trim the dependencies in</span>
</span><span class='line'><span class="c1">// MessageQueue to its minimal features and embed that in the native runtime.</span>
</span><span class='line'>
</span><span class='line'><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">global</span><span class="p">,</span> <span class="s1">&#39;__fbBatchedBridge&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">configurable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">value</span><span class="o">:</span> <span class="nx">BatchedBridge</span><span class="p">,</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">BatchedBridge</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里其值则是对应着 MessageQueue，其管理着 JS 端的 function 的注册调用逻辑，其中<code>callFunctionReturnResultAndFlushedQueue</code> ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="nx">callFunctionReturnFlushedQueue</span><span class="p">(</span><span class="nx">module</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">method</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">args</span><span class="o">:</span> <span class="nx">any</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">__guard</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">__callFunction</span><span class="p">(</span><span class="nx">module</span><span class="p">,</span> <span class="nx">method</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">flushedQueue</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>__callFunction</code> 方法的调用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">__callFunction</span><span class="p">(</span><span class="nx">module</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">method</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">args</span><span class="o">:</span> <span class="nx">any</span><span class="p">[])</span><span class="o">:</span> <span class="nx">any</span> <span class="p">{</span>
</span><span class='line'> <span class="k">this</span><span class="p">.</span><span class="nx">_lastFlush</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getTime</span><span class="p">();</span>
</span><span class='line'> <span class="k">this</span><span class="p">.</span><span class="nx">_eventLoopStartTime</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_lastFlush</span><span class="p">;</span>
</span><span class='line'> <span class="nx">Systrace</span><span class="p">.</span><span class="nx">beginEvent</span><span class="p">(</span><span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="nx">module</span><span class="p">}.</span><span class="nx">$</span><span class="p">{</span><span class="nx">method</span><span class="p">}()</span><span class="err">`</span><span class="p">);</span>
</span><span class='line'> <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">__spy</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">this</span><span class="p">.</span><span class="nx">__spy</span><span class="p">({</span><span class="nx">type</span><span class="o">:</span> <span class="nx">TO_JS</span><span class="p">,</span> <span class="nx">module</span><span class="p">,</span> <span class="nx">method</span><span class="p">,</span> <span class="nx">args</span><span class="p">});</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'> <span class="kr">const</span> <span class="nx">moduleMethods</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getCallableModule</span><span class="p">(</span><span class="nx">module</span><span class="p">);</span>
</span><span class='line'> <span class="nx">invariant</span><span class="p">(</span>
</span><span class='line'>   <span class="o">!!</span><span class="nx">moduleMethods</span><span class="p">,</span>
</span><span class='line'>   <span class="s1">&#39;Module %s is not a registered callable module (calling %s)&#39;</span><span class="p">,</span>
</span><span class='line'>   <span class="nx">module</span><span class="p">,</span>
</span><span class='line'>   <span class="nx">method</span><span class="p">,</span>
</span><span class='line'> <span class="p">);</span>
</span><span class='line'> <span class="nx">invariant</span><span class="p">(</span>
</span><span class='line'>   <span class="o">!!</span><span class="nx">moduleMethods</span><span class="p">[</span><span class="nx">method</span><span class="p">],</span>
</span><span class='line'>   <span class="s1">&#39;Method %s does not exist on module %s&#39;</span><span class="p">,</span>
</span><span class='line'>   <span class="nx">method</span><span class="p">,</span>
</span><span class='line'>   <span class="nx">module</span><span class="p">,</span>
</span><span class='line'> <span class="p">);</span>
</span><span class='line'> <span class="kr">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">moduleMethods</span><span class="p">[</span><span class="nx">method</span><span class="p">].</span><span class="nx">apply</span><span class="p">(</span><span class="nx">moduleMethods</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span>
</span><span class='line'> <span class="nx">Systrace</span><span class="p">.</span><span class="nx">endEvent</span><span class="p">();</span>
</span><span class='line'> <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中的 getCallableModule 则是从 _lazyCallableModules 中进行获取，其注册则是通过 <code>registerCallableModule</code> 方法。以 <code>AppRegistry.js</code> 为例，在其文件的末尾则是调用了 BatchedBridge 进行注册：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">BatchedBridge</span><span class="p">.</span><span class="nx">registerCallableModule</span><span class="p">(</span><span class="s1">&#39;AppRegistry&#39;</span><span class="p">,</span> <span class="nx">AppRegistry</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LeakCanary 浅析]]></title>
    <link href="http://alighters.github.io/blog/blog/2018/03/16/leakcanary-learn/"/>
    <updated>2018-03-16T16:46:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2018/03/16/leakcanary-learn</id>
    <content type="html"><![CDATA[<h2>内存分析工具</h2>

<p>关于内存分析，在 LeakCanary 之前，可以用到的工具主要以 MAT 为主，在新版的 AS 3.0 中，又提供了 Memory Profiler，可进一步帮助我们定位内存出现的问题。</p>

<!-- more -->


<blockquote><p><a href="https://developer.android.com/studio/profile/memory-profiler.html#HeapDump">Memory Profiler</a>
<a href="https://developer.android.com/studio/preview/features/android-profiler.html">Android Profiler in Android Studio 3.0</a></p>

<p><a href="https://joyrun.github.io/2016/08/08/AndroidMemoryLeak/">利用Android Studio、MAT对Android进行内存泄漏检测 - 悦跑圈技术团队的博客 | Joyrun&rsquo;s Blog</a></p>

<p><a href="https://developer.android.com/studio/profile/memory-profiler.html">View the Java Heap and Memory Allocations with Memory Profiler | Android Studio</a></p></blockquote>

<h2>原理描述</h2>

<p>其监听了 Application 中的 activityLifeCallback，在此会对得到的 activity 添加弱引用的方式，根据其特点来判断是否发生泄露。当泄露时，则 dump 出一份内存快照，得到 hprof 数据，再利用 square 的 haha 库，在另外的进程中，进行解析并显示。</p>

<h2>主要流程</h2>

<h3>1.类的定位</h3>

<p>在 Android 的 application onCreate 时，我们一般会调用 LeakCanary 的 install 方法，其所作的工作：</p>

<ul>
<li>1.通过 application 生成一个 AndroidRefWatcherBuilder</li>
<li>2.注册监听的 service 为 DisplayLeakService</li>
<li>3.设置排除的引用 AndroidExcludedRefs</li>
<li>4.调用 AndroidRefWatcherBuilder 的 buildAndInstall 方法，其会调用到 ActivityRefWatcher 的 install 方法：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">install</span><span class="o">(</span><span class="n">Application</span> <span class="n">application</span><span class="o">,</span> <span class="n">RefWatcher</span> <span class="n">refWatcher</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">ActivityRefWatcher</span><span class="o">(</span><span class="n">application</span><span class="o">,</span> <span class="n">refWatcher</span><span class="o">).</span><span class="na">watchActivities</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其会构造出 ActivityRefWatcher，然后调用其 watchActivities 方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">watchActivities</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Make sure you don&#39;t get installed twice.</span>
</span><span class='line'>    <span class="n">stopWatchingActivities</span><span class="o">();</span>
</span><span class='line'>    <span class="n">application</span><span class="o">.</span><span class="na">registerActivityLifecycleCallbacks</span><span class="o">(</span><span class="n">lifecycleCallbacks</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里主要的工作便是给 application 注册 ActivityLifecycleCallbacks，此类主要重写了 Application.ActivityLifecycleCallbacks 的 onActivityDestoryed 方法:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onActivityDestroyed</span><span class="o">(</span><span class="n">Activity</span> <span class="n">activity</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'> <span class="n">ActivityRefWatcher</span><span class="o">.</span><span class="na">this</span><span class="o">.</span><span class="na">onActivityDestroyed</span><span class="o">(</span><span class="n">activity</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在它的 onActivityDestoryed 方法中，其主要调用 RefWatcher 类的 watch 方法，其对象便是传递进来的 activity。</p>

<h3>2.类的监测</h3>

<p>接下来便是关键的 RefWatcher 类了，在其 watch 方法中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">watch</span><span class="o">(</span><span class="n">Object</span> <span class="n">watchedReference</span><span class="o">,</span> <span class="n">String</span> <span class="n">referenceName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'> <span class="k">if</span> <span class="o">(</span><span class="k">this</span> <span class="o">==</span> <span class="n">DISABLED</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">return</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'> <span class="n">checkNotNull</span><span class="o">(</span><span class="n">watchedReference</span><span class="o">,</span> <span class="s">&quot;watchedReference&quot;</span><span class="o">);</span>
</span><span class='line'> <span class="n">checkNotNull</span><span class="o">(</span><span class="n">referenceName</span><span class="o">,</span> <span class="s">&quot;referenceName&quot;</span><span class="o">);</span>
</span><span class='line'> <span class="kd">final</span> <span class="kt">long</span> <span class="n">watchStartNanoTime</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">nanoTime</span><span class="o">();</span>
</span><span class='line'> <span class="n">String</span> <span class="n">key</span> <span class="o">=</span> <span class="n">UUID</span><span class="o">.</span><span class="na">randomUUID</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'> <span class="n">retainedKeys</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'> <span class="kd">final</span> <span class="n">KeyedWeakReference</span> <span class="n">reference</span> <span class="o">=</span>
</span><span class='line'>     <span class="k">new</span> <span class="nf">KeyedWeakReference</span><span class="o">(</span><span class="n">watchedReference</span><span class="o">,</span> <span class="n">key</span><span class="o">,</span> <span class="n">referenceName</span><span class="o">,</span> <span class="n">queue</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'> <span class="n">ensureGoneAsync</span><span class="o">(</span><span class="n">watchStartNanoTime</span><span class="o">,</span> <span class="n">reference</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里会将 watchedReference、referenceName、queue 包装成一个 KeyedWeakReference 对象。
其中 queue 是一个成员变量 ReferenceQueue<Object> 的对象。而 KeyedWeakReference 是一个继承自 WeakReference 的类。</p>

<p>关于 WeakReference 的官方描述：</p>

<blockquote><p>Weak reference objects, which do not prevent their referents from being made finalizable, finalized, and then reclaimed. Weak references are most often used to implement canonicalizing mappings.</p>

<p>Suppose that the garbage collector determines at a certain point in time that an object is weakly reachable. At that time it will atomically clear all weak references to that object and all weak references to any other weakly-reachable objects from which that object is reachable through a chain of strong and soft references. At the same time it will declare all of the formerly weakly-reachable objects to be finalizable. At the same time or at some later time it will enqueue those newly-cleared weak references that are registered with reference queues.</p></blockquote>

<p>简单来说就是弱引用并不会影响对象的回收。当一个对象被回收之时，之前对此对象的持有弱引用的对象会被标记为 finalizable，与此同时或之后会将其添加至之前注册的 reference queue 中。</p>

<p>这样的话，通过弱引用持有 activity，在 application 注册的 activitylifecallback 中，当 activity 退出时，在 referencequeue 里查询不在其中的 activity，此时，便确定了泄露的类。接下来便是 dump 出内存，来分析出泄露的路径了。</p>

<h3>3.类的泄露定位</h3>

<p>在 ensureGoneAsync 方法中，会执行如下方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Retryable</span><span class="o">.</span><span class="na">Result</span> <span class="nf">ensureGone</span><span class="o">(</span><span class="kd">final</span> <span class="n">KeyedWeakReference</span> <span class="n">reference</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">watchStartNanoTime</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'> <span class="kt">long</span> <span class="n">gcStartNanoTime</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">nanoTime</span><span class="o">();</span>
</span><span class='line'> <span class="kt">long</span> <span class="n">watchDurationMs</span> <span class="o">=</span> <span class="n">NANOSECONDS</span><span class="o">.</span><span class="na">toMillis</span><span class="o">(</span><span class="n">gcStartNanoTime</span> <span class="o">-</span> <span class="n">watchStartNanoTime</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'> <span class="n">removeWeaklyReachableReferences</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'> <span class="k">if</span> <span class="o">(</span><span class="n">debuggerControl</span><span class="o">.</span><span class="na">isDebuggerAttached</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>   <span class="c1">// The debugger can create false leaks.</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">RETRY</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'> <span class="k">if</span> <span class="o">(</span><span class="n">gone</span><span class="o">(</span><span class="n">reference</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">DONE</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'> <span class="n">gcTrigger</span><span class="o">.</span><span class="na">runGc</span><span class="o">();</span>
</span><span class='line'> <span class="n">removeWeaklyReachableReferences</span><span class="o">();</span>
</span><span class='line'> <span class="k">if</span> <span class="o">(!</span><span class="n">gone</span><span class="o">(</span><span class="n">reference</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>   <span class="kt">long</span> <span class="n">startDumpHeap</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">nanoTime</span><span class="o">();</span>
</span><span class='line'>   <span class="kt">long</span> <span class="n">gcDurationMs</span> <span class="o">=</span> <span class="n">NANOSECONDS</span><span class="o">.</span><span class="na">toMillis</span><span class="o">(</span><span class="n">startDumpHeap</span> <span class="o">-</span> <span class="n">gcStartNanoTime</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">File</span> <span class="n">heapDumpFile</span> <span class="o">=</span> <span class="n">heapDumper</span><span class="o">.</span><span class="na">dumpHeap</span><span class="o">();</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(</span><span class="n">heapDumpFile</span> <span class="o">==</span> <span class="n">RETRY_LATER</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="c1">// Could not dump the heap.</span>
</span><span class='line'>     <span class="k">return</span> <span class="n">RETRY</span><span class="o">;</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="kt">long</span> <span class="n">heapDumpDurationMs</span> <span class="o">=</span> <span class="n">NANOSECONDS</span><span class="o">.</span><span class="na">toMillis</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">nanoTime</span><span class="o">()</span> <span class="o">-</span> <span class="n">startDumpHeap</span><span class="o">);</span>
</span><span class='line'>   <span class="n">heapdumpListener</span><span class="o">.</span><span class="na">analyze</span><span class="o">(</span>
</span><span class='line'>       <span class="k">new</span> <span class="nf">HeapDump</span><span class="o">(</span><span class="n">heapDumpFile</span><span class="o">,</span> <span class="n">reference</span><span class="o">.</span><span class="na">key</span><span class="o">,</span> <span class="n">reference</span><span class="o">.</span><span class="na">name</span><span class="o">,</span> <span class="n">excludedRefs</span><span class="o">,</span> <span class="n">watchDurationMs</span><span class="o">,</span>
</span><span class='line'>           <span class="n">gcDurationMs</span><span class="o">,</span> <span class="n">heapDumpDurationMs</span><span class="o">));</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'> <span class="k">return</span> <span class="n">DONE</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中调用的 removeWeaklyReachableReferences 方法，则是对 refernceQueue 的排查：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">removeWeaklyReachableReferences</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'> <span class="c1">// WeakReferences are enqueued as soon as the object to which they point to becomes weakly</span>
</span><span class='line'> <span class="c1">// reachable. This is before finalization or garbage collection has actually happened.</span>
</span><span class='line'> <span class="n">KeyedWeakReference</span> <span class="n">ref</span><span class="o">;</span>
</span><span class='line'> <span class="k">while</span> <span class="o">((</span><span class="n">ref</span> <span class="o">=</span> <span class="o">(</span><span class="n">KeyedWeakReference</span><span class="o">)</span> <span class="n">queue</span><span class="o">.</span><span class="na">poll</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">retainedKeys</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">ref</span><span class="o">.</span><span class="na">key</span><span class="o">);</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里从 queue 中，取出 KeyedWeakReference，并从 retainedKeys 集合中移除此 reference 对应的 key 值。</p>

<p>而判断此 reference 是否移除则是通过 gone 方法判断：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">gone</span><span class="o">(</span><span class="n">KeyedWeakReference</span> <span class="n">reference</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'> <span class="k">return</span> <span class="o">!</span><span class="n">retainedKeys</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">reference</span><span class="o">.</span><span class="na">key</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当集合中不包含此 WeakReference 对应的 key，则表示此弱引用持有的对象已被回收；否则表示有可能内存泄露。</p>

<p>这里进行了再一步的判断，触发调用一下 gc 方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">gcTrigger</span><span class="o">.</span><span class="na">runGc</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>而 gcTrigger 则是用的默认的 Default 实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">GcTrigger</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">GcTrigger</span> <span class="n">DEFAULT</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">GcTrigger</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">runGc</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// Code taken from AOSP FinalizationTest:</span>
</span><span class='line'>      <span class="c1">// https://android.googlesource.com/platform/libcore/+/master/support/src/test/java/libcore/</span>
</span><span class='line'>      <span class="c1">// java/lang/ref/FinalizationTester.java</span>
</span><span class='line'>      <span class="c1">// System.gc() does not garbage collect every time. Runtime.gc() is</span>
</span><span class='line'>      <span class="c1">// more likely to perfom a gc.</span>
</span><span class='line'>      <span class="n">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">gc</span><span class="o">();</span>
</span><span class='line'>      <span class="n">enqueueReferences</span><span class="o">();</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">runFinalization</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">enqueueReferences</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// Hack. We don&#39;t have a programmatic way to wait for the reference queue daemon to move</span>
</span><span class='line'>      <span class="c1">// references to the appropriate queues.</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">AssertionError</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">runGc</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码中通过 <code>Runtime.getRuntime().gc()</code> 来触发 gc，再将当前线程 sleep 100 毫秒，来保证弱引用被添加至引用队列中，则执行 <code>System.runFinalization()</code> 方法，则触发调用对象的 finalize 方法。</p>

<p>再触发 <code>gcTrigger.runGc()</code> 后，再调用一次 <code>removeWeaklyReachableReferences</code>，若是对象还未消失，那表示对象已经是真的泄露了。则需要导出内存快照进行分析了。</p>

<h3>4.Dump内存快照</h3>

<p>生成 heapDumpFile, 则是由 heapDumper 接口来负责：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">File</span> <span class="n">heapDumpFile</span> <span class="o">=</span> <span class="n">heapDumper</span><span class="o">.</span><span class="na">dumpHeap</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>此 heapDumper 在 Android 中相关的实现，是由 AndroidHeapDumper 类实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span> <span class="kd">public</span> <span class="n">File</span> <span class="nf">dumpHeap</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'> <span class="n">File</span> <span class="n">heapDumpFile</span> <span class="o">=</span> <span class="n">leakDirectoryProvider</span><span class="o">.</span><span class="na">newHeapDumpFile</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'> <span class="k">if</span> <span class="o">(</span><span class="n">heapDumpFile</span> <span class="o">==</span> <span class="n">RETRY_LATER</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">RETRY_LATER</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'> <span class="n">FutureResult</span><span class="o">&lt;</span><span class="n">Toast</span><span class="o">&gt;</span> <span class="n">waitingForToast</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FutureResult</span><span class="o">&lt;&gt;();</span>
</span><span class='line'> <span class="n">showToast</span><span class="o">(</span><span class="n">waitingForToast</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'> <span class="k">if</span> <span class="o">(!</span><span class="n">waitingForToast</span><span class="o">.</span><span class="na">wait</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span> <span class="n">SECONDS</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">CanaryLog</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;Did not dump heap, too much time waiting for Toast.&quot;</span><span class="o">);</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">RETRY_LATER</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'> <span class="n">Toast</span> <span class="n">toast</span> <span class="o">=</span> <span class="n">waitingForToast</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'> <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">Debug</span><span class="o">.</span><span class="na">dumpHprofData</span><span class="o">(</span><span class="n">heapDumpFile</span><span class="o">.</span><span class="na">getAbsolutePath</span><span class="o">());</span>
</span><span class='line'>   <span class="n">cancelToast</span><span class="o">(</span><span class="n">toast</span><span class="o">);</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">heapDumpFile</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">CanaryLog</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">e</span><span class="o">,</span> <span class="s">&quot;Could not dump heap&quot;</span><span class="o">);</span>
</span><span class='line'>   <span class="c1">// Abort heap dump</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">RETRY_LATER</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为这里是在主线程所做的 dump 工作，所以这里给了个 waiting 的 toast，之后便是利用 Debug 类中的 dumpHprofData 方法，来生成内存快照 hprof 的数据。</p>

<p>然后利用注册的 heapdumpListener 的 analyze 方法进行分析生成的此  HeapDump 对象：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">analyze</span><span class="o">(</span><span class="n">HeapDump</span> <span class="n">heapDump</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'> <span class="n">checkNotNull</span><span class="o">(</span><span class="n">heapDump</span><span class="o">,</span> <span class="s">&quot;heapDump&quot;</span><span class="o">);</span>
</span><span class='line'> <span class="n">HeapAnalyzerService</span><span class="o">.</span><span class="na">runAnalysis</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">heapDump</span><span class="o">,</span> <span class="n">listenerServiceClass</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里会通过启动一个监听的 service（HeapAnalyzerService），而在 Android 中的 service 便是另一个进程的 serice。</p>

<h3>5.引用分析</h3>

<p>HeapAnalyzerService 是一个跨进程的 IntentSerice，在其 onHandleIntent 方法中:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span> <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onHandleIntent</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'> <span class="k">if</span> <span class="o">(</span><span class="n">intent</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">CanaryLog</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;HeapAnalyzerService received a null intent, ignoring.&quot;</span><span class="o">);</span>
</span><span class='line'>   <span class="k">return</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'> <span class="n">String</span> <span class="n">listenerClassName</span> <span class="o">=</span> <span class="n">intent</span><span class="o">.</span><span class="na">getStringExtra</span><span class="o">(</span><span class="n">LISTENER_CLASS_EXTRA</span><span class="o">);</span>
</span><span class='line'> <span class="n">HeapDump</span> <span class="n">heapDump</span> <span class="o">=</span> <span class="o">(</span><span class="n">HeapDump</span><span class="o">)</span> <span class="n">intent</span><span class="o">.</span><span class="na">getSerializableExtra</span><span class="o">(</span><span class="n">HEAPDUMP_EXTRA</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'> <span class="n">HeapAnalyzer</span> <span class="n">heapAnalyzer</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">HeapAnalyzer</span><span class="o">(</span><span class="n">heapDump</span><span class="o">.</span><span class="na">excludedRefs</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'> <span class="n">AnalysisResult</span> <span class="n">result</span> <span class="o">=</span> <span class="n">heapAnalyzer</span><span class="o">.</span><span class="na">checkForLeak</span><span class="o">(</span><span class="n">heapDump</span><span class="o">.</span><span class="na">heapDumpFile</span><span class="o">,</span> <span class="n">heapDump</span><span class="o">.</span><span class="na">referenceKey</span><span class="o">);</span>
</span><span class='line'> <span class="n">AbstractAnalysisResultService</span><span class="o">.</span><span class="na">sendResultToListener</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">listenerClassName</span><span class="o">,</span> <span class="n">heapDump</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>获取到 HeapDump 后，生成一个 HeapAnalyzer 后，利用其 checkForLeak 方法，检查 heapDumpFile 中关于 referenceKey 的引用，生成一个分析的结果 AnalysisResult。</p>

<p>关于 checkForLeak 方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">* Searches the heap dump for a {@link KeyedWeakReference} instance with the corresponding key,</span>
</span><span class='line'><span class="cm">* and then computes the shortest strong reference path from that instance to the GC roots.</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="kd">public</span> <span class="n">AnalysisResult</span> <span class="nf">checkForLeak</span><span class="o">(</span><span class="n">File</span> <span class="n">heapDumpFile</span><span class="o">,</span> <span class="n">String</span> <span class="n">referenceKey</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'> <span class="kt">long</span> <span class="n">analysisStartNanoTime</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">nanoTime</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'> <span class="k">if</span> <span class="o">(!</span><span class="n">heapDumpFile</span><span class="o">.</span><span class="na">exists</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">Exception</span> <span class="n">exception</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;File does not exist: &quot;</span> <span class="o">+</span> <span class="n">heapDumpFile</span><span class="o">);</span>
</span><span class='line'>   <span class="k">return</span> <span class="nf">failure</span><span class="o">(</span><span class="n">exception</span><span class="o">,</span> <span class="n">since</span><span class="o">(</span><span class="n">analysisStartNanoTime</span><span class="o">));</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'> <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">HprofBuffer</span> <span class="n">buffer</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">MemoryMappedFileBuffer</span><span class="o">(</span><span class="n">heapDumpFile</span><span class="o">);</span>
</span><span class='line'>   <span class="n">HprofParser</span> <span class="n">parser</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">HprofParser</span><span class="o">(</span><span class="n">buffer</span><span class="o">);</span>
</span><span class='line'>   <span class="n">Snapshot</span> <span class="n">snapshot</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="na">parse</span><span class="o">();</span>
</span><span class='line'>   <span class="n">deduplicateGcRoots</span><span class="o">(</span><span class="n">snapshot</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">Instance</span> <span class="n">leakingRef</span> <span class="o">=</span> <span class="n">findLeakingReference</span><span class="o">(</span><span class="n">referenceKey</span><span class="o">,</span> <span class="n">snapshot</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// False alarm, weak reference was cleared in between key check and heap dump.</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(</span><span class="n">leakingRef</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="k">return</span> <span class="nf">noLeak</span><span class="o">(</span><span class="n">since</span><span class="o">(</span><span class="n">analysisStartNanoTime</span><span class="o">));</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">return</span> <span class="nf">findLeakTrace</span><span class="o">(</span><span class="n">analysisStartNanoTime</span><span class="o">,</span> <span class="n">snapshot</span><span class="o">,</span> <span class="n">leakingRef</span><span class="o">);</span>
</span><span class='line'> <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="nf">failure</span><span class="o">(</span><span class="n">e</span><span class="o">,</span> <span class="n">since</span><span class="o">(</span><span class="n">analysisStartNanoTime</span><span class="o">));</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里开始利用 square 的 haha 库来开始解析 dump 出来的文件数据了。首先将 heapDumpFile 包装为 HprofBuffer，再利用 HprofParse 转换得到 Snapshot 数据。</p>

<p>先利用 findLeakingReference 方法中，从 snapshot 中查看是否有 referenceKey。没有，则不存在泄露。</p>

<p>若有的话，在 findLeakTrace 方法，来找到关于此类引用泄露的路径关系。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">AnalysisResult</span> <span class="nf">findLeakTrace</span><span class="o">(</span><span class="kt">long</span> <span class="n">analysisStartNanoTime</span><span class="o">,</span> <span class="n">Snapshot</span> <span class="n">snapshot</span><span class="o">,</span>
</span><span class='line'>   <span class="n">Instance</span> <span class="n">leakingRef</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'> <span class="n">ShortestPathFinder</span> <span class="n">pathFinder</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ShortestPathFinder</span><span class="o">(</span><span class="n">excludedRefs</span><span class="o">);</span>
</span><span class='line'> <span class="n">ShortestPathFinder</span><span class="o">.</span><span class="na">Result</span> <span class="n">result</span> <span class="o">=</span> <span class="n">pathFinder</span><span class="o">.</span><span class="na">findPath</span><span class="o">(</span><span class="n">snapshot</span><span class="o">,</span> <span class="n">leakingRef</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'> <span class="c1">// False alarm, no strong reference path to GC Roots.</span>
</span><span class='line'> <span class="k">if</span> <span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">leakingNode</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="nf">noLeak</span><span class="o">(</span><span class="n">since</span><span class="o">(</span><span class="n">analysisStartNanoTime</span><span class="o">));</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'> <span class="n">LeakTrace</span> <span class="n">leakTrace</span> <span class="o">=</span> <span class="n">buildLeakTrace</span><span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">leakingNode</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'> <span class="n">String</span> <span class="n">className</span> <span class="o">=</span> <span class="n">leakingRef</span><span class="o">.</span><span class="na">getClassObj</span><span class="o">().</span><span class="na">getClassName</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'> <span class="c1">// Side effect: computes retained size.</span>
</span><span class='line'> <span class="n">snapshot</span><span class="o">.</span><span class="na">computeDominators</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'> <span class="n">Instance</span> <span class="n">leakingInstance</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">leakingNode</span><span class="o">.</span><span class="na">instance</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'> <span class="kt">long</span> <span class="n">retainedSize</span> <span class="o">=</span> <span class="n">leakingInstance</span><span class="o">.</span><span class="na">getTotalRetainedSize</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'> <span class="c1">// TODO: check O sources and see what happened to android.graphics.Bitmap.mBuffer</span>
</span><span class='line'> <span class="k">if</span> <span class="o">(</span><span class="n">SDK_INT</span> <span class="o">&lt;=</span> <span class="n">N_MR1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">retainedSize</span> <span class="o">+=</span> <span class="n">computeIgnoredBitmapRetainedSize</span><span class="o">(</span><span class="n">snapshot</span><span class="o">,</span> <span class="n">leakingInstance</span><span class="o">);</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'> <span class="k">return</span> <span class="nf">leakDetected</span><span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">excludingKnownLeaks</span><span class="o">,</span> <span class="n">className</span><span class="o">,</span> <span class="n">leakTrace</span><span class="o">,</span> <span class="n">retainedSize</span><span class="o">,</span>
</span><span class='line'>     <span class="n">since</span><span class="o">(</span><span class="n">analysisStartNanoTime</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>此方法中，</p>

<h3>6.结果显示</h3>

<p>之后将此结果 AnalysisResult 发送至 AbastractAnalysisResultService 的实现类中，此类的处理 Intent 方法如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span> <span class="kd">protected</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">onHandleIntent</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'> <span class="n">HeapDump</span> <span class="n">heapDump</span> <span class="o">=</span> <span class="o">(</span><span class="n">HeapDump</span><span class="o">)</span> <span class="n">intent</span><span class="o">.</span><span class="na">getSerializableExtra</span><span class="o">(</span><span class="n">HEAP_DUMP_EXTRA</span><span class="o">);</span>
</span><span class='line'> <span class="n">AnalysisResult</span> <span class="n">result</span> <span class="o">=</span> <span class="o">(</span><span class="n">AnalysisResult</span><span class="o">)</span> <span class="n">intent</span><span class="o">.</span><span class="na">getSerializableExtra</span><span class="o">(</span><span class="n">RESULT_EXTRA</span><span class="o">);</span>
</span><span class='line'> <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">onHeapAnalyzed</span><span class="o">(</span><span class="n">heapDump</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span><span class='line'> <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>   <span class="c1">//noinspection ResultOfMethodCallIgnored</span>
</span><span class='line'>   <span class="n">heapDump</span><span class="o">.</span><span class="na">heapDumpFile</span><span class="o">.</span><span class="na">delete</span><span class="o">();</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其 onHeapAnalyzed 抽象方法由 DisplayLeakService 来实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span> <span class="kd">protected</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">onHeapAnalyzed</span><span class="o">(</span><span class="n">HeapDump</span> <span class="n">heapDump</span><span class="o">,</span> <span class="n">AnalysisResult</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'> <span class="n">String</span> <span class="n">leakInfo</span> <span class="o">=</span> <span class="n">leakInfo</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">heapDump</span><span class="o">,</span> <span class="n">result</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'> <span class="n">CanaryLog</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;%s&quot;</span><span class="o">,</span> <span class="n">leakInfo</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'> <span class="kt">boolean</span> <span class="n">resultSaved</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'> <span class="kt">boolean</span> <span class="n">shouldSaveResult</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">leakFound</span> <span class="o">||</span> <span class="n">result</span><span class="o">.</span><span class="na">failure</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'> <span class="k">if</span> <span class="o">(</span><span class="n">shouldSaveResult</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">heapDump</span> <span class="o">=</span> <span class="n">renameHeapdump</span><span class="o">(</span><span class="n">heapDump</span><span class="o">);</span>
</span><span class='line'>   <span class="n">resultSaved</span> <span class="o">=</span> <span class="n">saveResult</span><span class="o">(</span><span class="n">heapDump</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'> <span class="n">PendingIntent</span> <span class="n">pendingIntent</span><span class="o">;</span>
</span><span class='line'> <span class="n">String</span> <span class="n">contentTitle</span><span class="o">;</span>
</span><span class='line'> <span class="n">String</span> <span class="n">contentText</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'> <span class="k">if</span> <span class="o">(!</span><span class="n">shouldSaveResult</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">contentTitle</span> <span class="o">=</span> <span class="n">getString</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">leak_canary_no_leak_title</span><span class="o">);</span>
</span><span class='line'>   <span class="n">contentText</span> <span class="o">=</span> <span class="n">getString</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">leak_canary_no_leak_text</span><span class="o">);</span>
</span><span class='line'>   <span class="n">pendingIntent</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">resultSaved</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">pendingIntent</span> <span class="o">=</span> <span class="n">DisplayLeakActivity</span><span class="o">.</span><span class="na">createPendingIntent</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">heapDump</span><span class="o">.</span><span class="na">referenceKey</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">if</span> <span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">failure</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">String</span> <span class="n">size</span> <span class="o">=</span> <span class="n">formatShortFileSize</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">result</span><span class="o">.</span><span class="na">retainedHeapSize</span><span class="o">);</span>
</span><span class='line'>     <span class="n">String</span> <span class="n">className</span> <span class="o">=</span> <span class="n">classSimpleName</span><span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">className</span><span class="o">);</span>
</span><span class='line'>     <span class="k">if</span> <span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">excludedLeak</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">contentTitle</span> <span class="o">=</span> <span class="n">getString</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">leak_canary_leak_excluded</span><span class="o">,</span> <span class="n">className</span><span class="o">,</span> <span class="n">size</span><span class="o">);</span>
</span><span class='line'>     <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">contentTitle</span> <span class="o">=</span> <span class="n">getString</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">leak_canary_class_has_leaked</span><span class="o">,</span> <span class="n">className</span><span class="o">,</span> <span class="n">size</span><span class="o">);</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'>   <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">contentTitle</span> <span class="o">=</span> <span class="n">getString</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">leak_canary_analysis_failed</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="n">contentText</span> <span class="o">=</span> <span class="n">getString</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">leak_canary_notification_message</span><span class="o">);</span>
</span><span class='line'> <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">contentTitle</span> <span class="o">=</span> <span class="n">getString</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">leak_canary_could_not_save_title</span><span class="o">);</span>
</span><span class='line'>   <span class="n">contentText</span> <span class="o">=</span> <span class="n">getString</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">leak_canary_could_not_save_text</span><span class="o">);</span>
</span><span class='line'>   <span class="n">pendingIntent</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'> <span class="c1">// New notification id every second.</span>
</span><span class='line'> <span class="kt">int</span> <span class="n">notificationId</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">SystemClock</span><span class="o">.</span><span class="na">uptimeMillis</span><span class="o">()</span> <span class="o">/</span> <span class="mi">1000</span><span class="o">);</span>
</span><span class='line'> <span class="n">showNotification</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">contentTitle</span><span class="o">,</span> <span class="n">contentText</span><span class="o">,</span> <span class="n">pendingIntent</span><span class="o">,</span> <span class="n">notificationId</span><span class="o">);</span>
</span><span class='line'> <span class="n">afterDefaultHandling</span><span class="o">(</span><span class="n">heapDump</span><span class="o">,</span> <span class="n">result</span><span class="o">,</span> <span class="n">leakInfo</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里检查获取的 AnalysisResult，根据其 leakFound 和 failure 来查看其是否泄漏。若存在，则创建一个跳转至 DisplayLeakActivity 的 Notification 的 intent。</p>

<p>在 DisplayLeakActivity 的界面中，用于显示关于 Leaks 的列表，而其 List 数据，则是通过运行一个后台线程来读取保存的泄露文件列表，之后更新 UI 显示。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Leak</span><span class="o">&gt;</span> <span class="n">leaks</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">File</span><span class="o">&gt;</span> <span class="n">files</span> <span class="o">=</span> <span class="n">leakDirectoryProvider</span><span class="o">.</span><span class="na">listFiles</span><span class="o">(</span><span class="k">new</span> <span class="nf">FilenameFilter</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">accept</span><span class="o">(</span><span class="n">File</span> <span class="n">dir</span><span class="o">,</span> <span class="n">String</span> <span class="n">filename</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">filename</span><span class="o">.</span><span class="na">endsWith</span><span class="o">(</span><span class="s">&quot;.result&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="n">File</span> <span class="n">resultFile</span> <span class="o">:</span> <span class="n">files</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">FileInputStream</span> <span class="n">fis</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">fis</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">FileInputStream</span><span class="o">(</span><span class="n">resultFile</span><span class="o">);</span>
</span><span class='line'>    <span class="n">ObjectInputStream</span> <span class="n">ois</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ObjectInputStream</span><span class="o">(</span><span class="n">fis</span><span class="o">);</span>
</span><span class='line'>    <span class="n">HeapDump</span> <span class="n">heapDump</span> <span class="o">=</span> <span class="o">(</span><span class="n">HeapDump</span><span class="o">)</span> <span class="n">ois</span><span class="o">.</span><span class="na">readObject</span><span class="o">();</span>
</span><span class='line'>    <span class="n">AnalysisResult</span> <span class="n">result</span> <span class="o">=</span> <span class="o">(</span><span class="n">AnalysisResult</span><span class="o">)</span> <span class="n">ois</span><span class="o">.</span><span class="na">readObject</span><span class="o">();</span>
</span><span class='line'>    <span class="n">leaks</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nf">Leak</span><span class="o">(</span><span class="n">heapDump</span><span class="o">,</span> <span class="n">result</span><span class="o">,</span> <span class="n">resultFile</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="o">|</span> <span class="n">ClassNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Likely a change in the serializable result class.</span>
</span><span class='line'>    <span class="c1">// Let&#39;s remove the files, we can&#39;t read them anymore.</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="n">deleted</span> <span class="o">=</span> <span class="n">resultFile</span><span class="o">.</span><span class="na">delete</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">deleted</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">CanaryLog</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">e</span><span class="o">,</span> <span class="s">&quot;Could not read result file %s, deleted it.&quot;</span><span class="o">,</span> <span class="n">resultFile</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">CanaryLog</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">e</span><span class="o">,</span> <span class="s">&quot;Could not read result file %s, could not delete it either.&quot;</span><span class="o">,</span>
</span><span class='line'>          <span class="n">resultFile</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">fis</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">fis</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">ignored</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">leaks</span><span class="o">,</span> <span class="k">new</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Leak</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Leak</span> <span class="n">lhs</span><span class="o">,</span> <span class="n">Leak</span> <span class="n">rhs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Long</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">rhs</span><span class="o">.</span><span class="na">resultFile</span><span class="o">.</span><span class="na">lastModified</span><span class="o">())</span>
</span><span class='line'>        <span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">lhs</span><span class="o">.</span><span class="na">resultFile</span><span class="o">.</span><span class="na">lastModified</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span><span class='line'><span class="n">mainHandler</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="k">new</span> <span class="nf">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">inFlight</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">LoadLeaks</span><span class="o">.</span><span class="na">this</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">activityOrNull</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">activityOrNull</span><span class="o">.</span><span class="na">leaks</span> <span class="o">=</span> <span class="n">leaks</span><span class="o">;</span>
</span><span class='line'>      <span class="n">activityOrNull</span><span class="o">.</span><span class="na">updateUi</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>学习资料</h2>

<ul>
<li><a href="https://academy.realm.io/cn/posts/droidcon-ricau-memory-leaks-leakcanary/">用 LeakCanary 检测内存泄漏</a></li>
<li><a href="http://blog.csdn.net/fearGod/article/details/46364599">Android System.gc()注意点 - CSDN博客</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kotlin DSL 学习]]></title>
    <link href="http://alighters.github.io/blog/blog/2018/03/02/kotlin-dsl-learn/"/>
    <updated>2018-03-02T16:46:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2018/03/02/kotlin-dsl-learn</id>
    <content type="html"><![CDATA[<p>DSL（domain-specific language），特定领域语言。wiki 关于 DSL 的定义如下：</p>

<!-- more -->


<blockquote><p>A domain-specific language (DSL) is a computer language specialized to a particular application domain. This is in contrast to a general-purpose language (GPL), which is broadly applicable across domains.</p></blockquote>

<p>通俗来讲，其是指特定领域的语言，如 SQL, Gradle 等。另外其语言是可表达的且易读的。</p>

<p>而 Kotlin 的语言特征，能够让我们更加方便地来实现 DSL。</p>

<h2>语言特性</h2>

<h3>1.Lambda Out of Parentheses</h3>

<p>lambda 通常定义的格式为 （list of param types） -> returned type。最简单的格式则为 () -> Unit , 其中 Unit 等同于 Void。</p>

<p>将一个  lambda 赋值给一个变量，最基本的格式如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>val helloPrint: (String) -&gt; Unit = { println(it) }</span></code></pre></td></tr></table></div></figure>


<p>调用此 lambda 的话：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>helloPrint("Hello")</span></code></pre></td></tr></table></div></figure>


<p>而多参数时，可如下使用：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>val helloPrint: (String, Int) -&gt; Unit = { _, _ -&gt; println("Do nothing") } 
</span><span class='line'>helloPrint("Does not matter", 42) //output: Do nothing</span></code></pre></td></tr></table></div></figure>


<p>其中参数不使用时，可用下划线来代替。</p>

<p>关于 Lambda 的使用，这里假设有个函数 x()，当一个 lambda 是这个函数的最后一个参数时，其可以放置在函数括号的外面。另外，如果这个 lambda 是这个函数的唯一参数时，这个括号是可以省略的。这样，形如 x({…}) 的使用可以转换为 x(){}，再省略括号的话，我们得到 x{}。</p>

<p>lambda 的使用则有如下的形式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>fun x( lambda: () -&gt; Unit ) { lambda() }</span></code></pre></td></tr></table></div></figure>


<p>也可以写成单行如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>fun x( lambda: () -&gt; Unit ) = lambda()</span></code></pre></td></tr></table></div></figure>


<p>这样若是实现一个形如</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">val</span> <span class="n">person</span> <span class="o">=</span> <span class="n">person</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">it</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="s">&quot;John&quot;</span>
</span><span class='line'>    <span class="n">it</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="mi">25</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>的 DSL 用法，其中 person 的声明如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">data</span> <span class="kd">class</span> <span class="nf">Person</span><span class="o">(</span><span class="n">var</span> <span class="nl">name:</span> <span class="n">String</span><span class="o">?</span> <span class="o">=</span> <span class="kc">null</span><span class="o">,</span>
</span><span class='line'>                  <span class="n">var</span> <span class="nl">age:</span> <span class="n">Int</span><span class="o">?</span> <span class="o">=</span> <span class="kc">null</span><span class="o">,</span>
</span><span class='line'>                  <span class="n">var</span> <span class="nl">address:</span> <span class="n">Address</span><span class="o">?</span> <span class="o">=</span> <span class="kc">null</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这时，则可以定义一个 person 的 lambda 定义：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fun</span> <span class="nf">person</span><span class="o">(</span><span class="nl">block:</span> <span class="o">(</span><span class="n">Person</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">Unit</span><span class="o">):</span> <span class="n">Person</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">val</span> <span class="n">p</span> <span class="o">=</span> <span class="n">Person</span><span class="o">()</span>
</span><span class='line'>    <span class="n">block</span><span class="o">(</span><span class="n">p</span><span class="o">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">p</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2.Lambdas with receivers</h3>

<p>在上述的 person dsl 用法中，it 的使用来说每次都是累赘的。这时可以通过 Lambda with receivers ，来避免每次写它。</p>

<p>它的意思是可以为 lambda 的声明指定一个接受者 receiver ，这样我们在 lambda 中只能访问这个 receiver 的所有非静态的公开函数。由于其限定了 receiver 的域，所以在 lambda 中，可以不必在提供前缀的 it 参数。</p>

<p>所以，这里的格式为  () -> Unit 转变为了 X.()-> Unit。</p>

<blockquote><p>注意，这里的写法只是用于方便书写，将这两种形式的代码转变为字节码时，可以发现其并没有区别的。仅仅在于其一个赋值给了变量 it，一个赋值给了变量 receiver。</p></blockquote>

<p>将 person 的 fun 修改为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fun</span> <span class="nf">person</span><span class="o">(</span><span class="nl">block:</span> <span class="n">Person</span><span class="o">.()</span> <span class="o">-&gt;</span> <span class="n">Unit</span><span class="o">):</span> <span class="n">Person</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">val</span> <span class="n">p</span> <span class="o">=</span> <span class="n">Person</span><span class="o">()</span>
</span><span class='line'>    <span class="n">p</span><span class="o">.</span><span class="na">block</span><span class="o">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">p</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>简写成一行的话如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fun</span> <span class="nf">person</span><span class="o">(</span><span class="nl">block:</span> <span class="n">Person</span><span class="o">.()</span> <span class="o">-&gt;</span> <span class="n">Unit</span><span class="o">):</span> <span class="n">Person</span> <span class="o">=</span> <span class="n">Person</span><span class="o">().</span><span class="na">apply</span><span class="o">(</span><span class="n">block</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这时，person 的调用便可以简化：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">val</span> <span class="n">person</span> <span class="o">=</span> <span class="n">person</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;John&quot;</span>
</span><span class='line'>    <span class="n">age</span> <span class="o">=</span> <span class="mi">25</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3.Extension functions</h3>

<p>此功能即为扩展函数，其表现就是给一些类提供额外的方法，来方便开发调用。其在 Java 中的实现则是通过静态函数来实现，参数便是 Kotlin 中对应的类。</p>

<p>所以，要实现如下的 DSL :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">val</span> <span class="n">person</span> <span class="o">=</span> <span class="n">person</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;John&quot;</span>
</span><span class='line'>    <span class="n">age</span> <span class="o">=</span> <span class="mi">25</span>
</span><span class='line'>    <span class="n">address</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">street</span> <span class="o">=</span> <span class="s">&quot;Main Street&quot;</span>
</span><span class='line'>        <span class="n">number</span> <span class="o">=</span> <span class="mi">42</span>
</span><span class='line'>        <span class="n">city</span> <span class="o">=</span> <span class="s">&quot;London&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在声明一个 Address：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">data</span> <span class="kd">class</span> <span class="nf">Address</span><span class="o">(</span><span class="n">var</span> <span class="nl">street:</span> <span class="n">String</span><span class="o">?</span> <span class="o">=</span> <span class="kc">null</span><span class="o">,</span>
</span><span class='line'>                   <span class="n">var</span> <span class="nl">number:</span> <span class="n">Int</span><span class="o">?</span> <span class="o">=</span> <span class="kc">null</span><span class="o">,</span>
</span><span class='line'>                   <span class="n">var</span> <span class="nl">city:</span> <span class="n">String</span><span class="o">?</span> <span class="o">=</span> <span class="kc">null</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>便要对 person 类作拓展：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fun</span> <span class="n">Person</span><span class="o">.</span><span class="na">address</span><span class="o">(</span><span class="nl">block:</span> <span class="n">Address</span><span class="o">.()</span> <span class="o">-&gt;</span> <span class="n">Unit</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">address</span> <span class="o">=</span> <span class="n">Address</span><span class="o">().</span><span class="na">apply</span><span class="o">(</span><span class="n">block</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4.Builder Pattern</h3>

<p>在上面的例子中，其参数都是为 var 定义，若需要为 val 定义，这里可以采用 builder 模式来实现。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fun</span> <span class="nf">person</span><span class="o">(</span><span class="nl">block:</span> <span class="n">PersonBuilder</span><span class="o">.()</span> <span class="o">-&gt;</span> <span class="n">Unit</span><span class="o">):</span> <span class="n">Person</span> <span class="o">=</span> <span class="n">PersonBuilder</span><span class="o">().</span><span class="na">apply</span><span class="o">(</span><span class="n">block</span><span class="o">).</span><span class="na">build</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">PersonBuilder</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">var</span> <span class="nl">name:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">var</span> <span class="nl">dob:</span> <span class="n">Date</span> <span class="o">=</span> <span class="n">Date</span><span class="o">()</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">dateOfBirth:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>        <span class="n">set</span><span class="o">(</span><span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">dob</span> <span class="o">=</span> <span class="n">SimpleDateFormat</span><span class="o">(</span><span class="s">&quot;yyyy-MM-dd&quot;</span><span class="o">).</span><span class="na">parse</span><span class="o">(</span><span class="n">value</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">var</span> <span class="nl">address:</span> <span class="n">Address</span><span class="o">?</span> <span class="o">=</span> <span class="kc">null</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fun</span> <span class="nf">address</span><span class="o">(</span><span class="nl">block:</span> <span class="n">AddressBuilder</span><span class="o">.()</span> <span class="o">-&gt;</span> <span class="n">Unit</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">address</span> <span class="o">=</span> <span class="n">AddressBuilder</span><span class="o">().</span><span class="na">apply</span><span class="o">(</span><span class="n">block</span><span class="o">).</span><span class="na">build</span><span class="o">()</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fun</span> <span class="nf">build</span><span class="o">():</span> <span class="n">Person</span> <span class="o">=</span> <span class="n">Person</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">dob</span><span class="o">,</span> <span class="n">address</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">AddressBuilder</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">var</span> <span class="nl">street:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">number:</span> <span class="n">Int</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">city:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fun</span> <span class="nf">build</span><span class="o">()</span> <span class="o">:</span> <span class="n">Address</span> <span class="o">=</span> <span class="n">Address</span><span class="o">(</span><span class="n">street</span><span class="o">,</span> <span class="n">number</span><span class="o">,</span> <span class="n">city</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如此，Person 的构造函数便可以使用 val 了，同时 builder 模式保证了类型安全的目的 （type-safe）。</p>

<h3>5. Scope control: @DslMarker (Since 1.1)</h3>

<p>因为 lambda 的实现都是匿名函数，其可以访问外部作用域。所以这里使用 @DslMarker ，可以达到收窄作用域的目的。如下，使用其声明一个 annotation class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@DslMarker</span>
</span><span class='line'><span class="n">annotation</span> <span class="kd">class</span> <span class="nc">PersonDsl</span>
</span></code></pre></td></tr></table></div></figure>


<p>之后，将 @PersonDsl 添加在指定的类上，然后以此类定义的闭包，则不能访问外层作用域的内容。其会在编译器中得到错误的提示。</p>

<h2>Anko</h2>

<p>在 Android 中关于 Kotlin 的使用，集大成者便属于  <a href="https://github.com/Kotlin/anko">Kotlin/anko: Pleasant Android application development</a> 了，其主要包含的内容：</p>

<ul>
<li>Anko Commons:  关于 intents、dialogs、 logging 等轻量级的工具库</li>
<li>Anko Layouts: 提供一个快速且类型安全的快速 Android 布局方法。</li>
<li>Anko SQLite:  对 Android SQLite 支持的查询和集合转换的 DSL 功能。</li>
<li>Anko Coroutines: 对 kotlinx.coroutines library 提供的工具类。</li>
</ul>


<p>其中，以最常用的 Anko Layouts 为例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">verticalLayout</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">val</span> <span class="n">name</span> <span class="o">=</span> <span class="n">editText</span><span class="o">()</span>
</span><span class='line'>    <span class="n">button</span><span class="o">(</span><span class="s">&quot;Say Hello&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">onClick</span> <span class="o">{</span> <span class="n">toast</span><span class="o">(</span><span class="s">&quot;Hello, ${name.text}!&quot;</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里指定了一个竖直的 layout，在其中声明了一个名称为 name 的 editText，另有一个文本为 “Say hello” 的按钮，并为按钮添加一个点击的事件，事件可以弹出一个 toast，提示内容为 Hello 加 name 控件的文本。</p>

<p>这里，相比以前的 xml 写法，这种写法简洁了许多。但要使用预览功能，这里需要另外安装 Anko Support Plugin 的插件，并采用 AnkoComponet 的方式书写 Anko Layout。</p>

<p>其中关于 verticalLayout 的定义是在 CustomViews 类中。且此方法针对 ViewManager、Context 及 Activity 做了扩展，以 Actiivty 为例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">inline</span> <span class="n">fun</span> <span class="n">Activity</span><span class="o">.</span><span class="na">verticalLayout</span><span class="o">(</span><span class="nl">theme:</span> <span class="n">Int</span> <span class="o">=</span> <span class="mi">0</span><span class="o">):</span> <span class="n">LinearLayout</span> <span class="o">=</span> <span class="n">verticalLayout</span><span class="o">(</span><span class="n">theme</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'><span class="n">inline</span> <span class="n">fun</span> <span class="n">Activity</span><span class="o">.</span><span class="na">verticalLayout</span><span class="o">(</span><span class="nl">theme:</span> <span class="n">Int</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="nl">init:</span> <span class="o">(</span><span class="nd">@AnkoViewDslMarker</span> <span class="n">_LinearLayout</span><span class="o">).()</span> <span class="o">-&gt;</span> <span class="n">Unit</span><span class="o">):</span> <span class="n">LinearLayout</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">ankoView</span><span class="o">(</span><span class="err">`</span><span class="n">$$Anko$Factories$CustomViews</span><span class="err">`</span><span class="o">.</span><span class="na">VERTICAL_LAYOUT_FACTORY</span><span class="o">,</span> <span class="n">theme</span><span class="o">,</span> <span class="n">init</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中的 Lambda 为 _LinearLayout 类，关于 VERTICAL_LAYOUT_FACTORY 的定义如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@PublishedApi</span>
</span><span class='line'><span class="n">internal</span> <span class="n">object</span> <span class="err">`</span><span class="n">$$Anko$Factories$CustomViews</span><span class="err">`</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">val</span> <span class="n">VERTICAL_LAYOUT_FACTORY</span> <span class="o">=</span> <span class="o">{</span> <span class="nl">ctx:</span> <span class="n">Context</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="n">val</span> <span class="n">view</span> <span class="o">=</span> <span class="n">_LinearLayout</span><span class="o">(</span><span class="n">ctx</span><span class="o">)</span>
</span><span class='line'>        <span class="n">view</span><span class="o">.</span><span class="na">orientation</span> <span class="o">=</span> <span class="n">LinearLayout</span><span class="o">.</span><span class="na">VERTICAL</span>
</span><span class='line'>        <span class="n">view</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过 lambda 的内容，来实例化一个 _LinearLayout，并指定其 orientation 为 LinearLayout.VERTICAL。另外， ankoView 方法，这里所做的工作：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">inline</span> <span class="n">fun</span> <span class="o">&lt;</span><span class="n">T</span> <span class="o">:</span> <span class="n">View</span><span class="o">&gt;</span> <span class="n">Activity</span><span class="o">.</span><span class="na">ankoView</span><span class="o">(</span><span class="nl">factory:</span> <span class="o">(</span><span class="nl">ctx:</span> <span class="n">Context</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">T</span><span class="o">,</span> <span class="nl">theme:</span> <span class="n">Int</span><span class="o">,</span> <span class="nl">init:</span> <span class="n">T</span><span class="o">.()</span> <span class="o">-&gt;</span> <span class="n">Unit</span><span class="o">):</span> <span class="n">T</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">val</span> <span class="n">ctx</span> <span class="o">=</span> <span class="n">AnkoInternals</span><span class="o">.</span><span class="na">wrapContextIfNeeded</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">theme</span><span class="o">)</span>
</span><span class='line'>    <span class="n">val</span> <span class="n">view</span> <span class="o">=</span> <span class="n">factory</span><span class="o">(</span><span class="n">ctx</span><span class="o">)</span>
</span><span class='line'>    <span class="n">view</span><span class="o">.</span><span class="na">init</span><span class="o">()</span>
</span><span class='line'>    <span class="n">AnkoInternals</span><span class="o">.</span><span class="na">addView</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">view</span><span class="o">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">view</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>对 context 做以包装，通过 factory 方法得到 View , 再调用 view 的 lambda init 方法。之后通过 AnkoInternals 的 addView 方法对 view 进行添加操作，将其添加至视图中。</p>

<p>回到上面的视图书写中。因为 Android 中的 view 都实现了接口 ViewManager，而这里的扩展方法，针对类便是以 Context、ViewManager、Activity 这三个为主。包含下面的 editText 方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">inline</span> <span class="n">fun</span> <span class="n">ViewManager</span><span class="o">.</span><span class="na">editText</span><span class="o">():</span> <span class="n">android</span><span class="o">.</span><span class="na">widget</span><span class="o">.</span><span class="na">EditText</span> <span class="o">=</span> <span class="n">editText</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'><span class="n">inline</span> <span class="n">fun</span> <span class="n">ViewManager</span><span class="o">.</span><span class="na">editText</span><span class="o">(</span><span class="nl">init:</span> <span class="o">(</span><span class="nd">@AnkoViewDslMarker</span> <span class="n">android</span><span class="o">.</span><span class="na">widget</span><span class="o">.</span><span class="na">EditText</span><span class="o">).()</span> <span class="o">-&gt;</span> <span class="n">Unit</span><span class="o">):</span> <span class="n">android</span><span class="o">.</span><span class="na">widget</span><span class="o">.</span><span class="na">EditText</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">ankoView</span><span class="o">(</span><span class="err">`</span><span class="n">$$Anko$Factories$Sdk25View</span><span class="err">`</span><span class="o">.</span><span class="na">EDIT_TEXT</span><span class="o">,</span> <span class="n">theme</span> <span class="o">=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span> <span class="n">init</span><span class="o">()</span> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中 editText 方法会调用到 ViewManager 的扩展，紧接着调用到下面的 editText，也就意味着 ankoView 方法的调用，所以在调用 editText 及 button 后，都会执行它们的 addView 方法。
以上，便是简单的通过扩展来实现 view 布局的 DSL 了。另，还有其他更加复杂的扩展可再自行研究了。</p>

<h2>Android KTX</h2>

<p><a href="https://github.com/android/android-ktx">android/android-ktx</a>  其定义了一系列关于 Android App 开发中 Kotlin 的扩展，其目的是将我们用 Kotlin 开发 Android 代码更加简化，而并不是对已有的 Android API 添加新的功能。</p>

<p>如：</p>

<p><em>Kotlin:</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">val</span> <span class="n">uri</span> <span class="o">=</span> <span class="n">Uri</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">myUriString</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Kotlin with Android KTX:</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">val</span> <span class="n">uri</span> <span class="o">=</span> <span class="n">myUriString</span><span class="o">.</span><span class="na">toUri</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是一个 Extension functions 的应用，另外还有其他关于 Lambda 等的应用。不过其目前处于一个 preview 的开发应用，可对其未支持的 API 提 pr，进行贡献开发。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://dzone.com/articles/kotlin-dsl-from-theory-to-practice">Kotlin DSL: From Theory to Practice - DZone Java</a></li>
<li><a href="https://proandroiddev.com/writing-dsls-in-kotlin-part-1-7f5d2193f277">Writing DSLs in Kotlin (part 1) – ProAndroidDev</a></li>
<li><a href="https://proandroiddev.com/writing-dsls-in-kotlin-part-2-cd9dcd0c4715">Writing DSLs in Kotlin (part 2) – ProAndroidDev</a></li>
<li><a href="https://kotlinlang.org/docs/reference/lambdas.html#higher-order-functions">Higher-Order Functions and Lambdas - Kotlin Programming Language</a></li>
<li><a href="https://kotlinlang.org/docs/reference/extensions.html">Extensions - Kotlin Programming Language</a></li>
<li><a href="https://kotlinlang.org/docs/reference/type-safe-builders.html">Type-Safe Groovy-Style Builders - Kotlin Programming Language</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[图片加载理解之 UIL]]></title>
    <link href="http://alighters.github.io/blog/blog/2017/01/25/understand-imageloader/"/>
    <updated>2017-01-25T16:46:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2017/01/25/understand-imageloader</id>
    <content type="html"><![CDATA[<p>针对Android 的图片加载，有着太多的细节问题，需要注意，本文针对 <a href="https://github.com/nostra13/Android-Universal-Image-Loader">Universal Image Loader</a> 的一些技术点，进行细致的剖析一番。由于涉及的内容，所以打算分成三个系列，分别从视图（View），数据（Cache）,网络等三个大的方面讲起：</p>

<!-- more -->


<h2>视图</h2>

<h3>1. ImageLoader是如何实现对ImageView的包装的？</h3>

<p>  1）ImageAware:针对 ImageView 行为的抽象&ndash;接口，获取 ImageView 的宽度、高度、scaleType、id；以及包装的ImageView，设定图片；
  2）ViewAware: 抽象类，实现ImageAware。提供了ViewRef的属性，来持有ImageView的弱引用；实现方式：this.viewRef = new WeakReference<View>(view)。</p>

<p>使用弱引用的目的，避免了异步耗时任务对 ImageView 的强引用，能够使 ImageView 能够被及时回收，防止内存泄露的发生（虽然很短暂的一瞬间）。</p>

<h3>2. 在 ListView 加载显示图片的时候，当一个正在加载图片的 View 被滑出屏幕，ImageLoader 是否会取消此次下载图片任务，是如何取消的？</h3>

<p>首先在加载获取图片时，是通过 ImageLoaderEngine 来进行提交进行的。在 ImageLoaderEngine 是启动线程池来异步加载图片，分别从内存、磁盘、网络中进行获取。而在这几步之前，会首先进行 View 是否被回收的判断，若是被回收，则抛出异常，并调用相应 listener 的 cancel 方法。</p>

<h3>3. 在 ListView 的滑动过程中，如何暂停所有的图片加载任务？</h3>

<p>在 ImageLoader 中，其提供了一个 <code>PauseOnScrollListener</code> 的类，在使用 <code>ListView</code> 的时，只需进行设置即可。</p>

<p>其实现原理则是在通过调用  ImageLoader 的 <code>pause</code> 和 <code>resume</code> 方法，在调用图片加载的第一步会进行判断，是否设置了<strong>暂停</strong>状态，如果设置了，则会通过对象锁 <code>pauseLock</code> 的 wait 方法，来使当前图片加载线程处于阻塞状态；当调用了 <code>resume</code> 方法，则会调用了 <code>pauseLock</code> 的 notifyAll 方法，来恢复线程的执行。</p>

<p>这样做的作用是达到 CPU 资源的充分利用，通过暂停异步图片加载的线程，来不使 UI 线程卡顿，提高 ListView 在滑动过程的流畅程度。</p>

<h3>4. 怎样针对 View 的特定大小，处理获取到图片的大小？</h3>

<p>在 ImageLoader 调用 <code>displayImage</code> 方法时，在指定相应的 ImageView 时，也可以传递一个 <code>ImageSize</code> 的参数，用来指定所需显示的图片的大小；若是不传的话，则会获取 ImageView 的 width 及 height，若获取到的值为 0，那么这个相应 <code>ImageSize</code> 的宽与高则会取屏幕的宽与高。</p>

<p>另外，在对图片进行缓存时，生成相应的缓存 Key 的值是根据图片的 <code>uri</code> 和 <code>targetSize</code>  （指定的图片大小）来生成的，所以，不同大小的 ImageView 获取到的 bitmap 则是不同的，即从缓存中拿到的是不同的。</p>

<p>这里，可以看出相应大小的 ImageView 与内存的缓存中的不同的 bitmap 是相对应的。而 diskCache 中则是以 uri 为键值的磁盘文件。另外，由磁盘文件转换为相应的 bitmap 则是对应下面问题的答案。</p>

<h3>5. 图片是如何进行压缩的？</h3>

<p>我们知道图片加载到内存之中，是以 Bitmap 的形式存在的。而在 Android App 中，内存是非常稀缺的资源。所以当加载大图片时，需要根据当前显示图片的控件，采用相应手段，只在内存中加载出来相应大小的 Bitmap ，来避免 <code>Out Of Memory</code> 的发生。</p>

<p>这里采用 BitmapFactory 来进行图片文件转换至 Bitmap 对象，通过其 <code>decodeStream</code> 方法，若是我们传递的参数 Options，其指定了  <code>inJustDecodeBounds</code> 为 true， 则只会获取图片的大小（并不会生成 Bitmap 对象），其输出值为 Options 对象的 <code>outWidth</code> 和 <code>outHeight</code>。</p>

<p>根据获取到的图片大小，以及我们要显示图片的 View 的大小，便可计算出我们需要对图片进行缩放的比例，即指定 Options 参数的 <code>inSampleSize</code> 的值。（此时 inJustDecodeBounds 的值为 false）这样获取到的 Bitmap 对象就是进行缩放调整过的图像。</p>

<p>这一步便是 Android 中调整 Bitmap 大小，减少内存消耗关键性的一步。</p>

<h2>数据</h2>

<p>数据主要体现在对图片的缓存处理。UIL 对图片的缓存为三级缓存，一是内存，二是磁盘，三是网络（远程的服务器）。</p>

<p>在内存中保存的为 Bitmap 对象，其是根据相应的 View 和 View 大小为 Key 值的。即加载的是同一张图片的两个不同大小的 View，会在内存缓存中存在针对这张图片的两个 Bitmap 对象。而磁盘中缓存的则只有这一张图片文件，即从远程服务器中下载到本地的图片文件。</p>

<p>若是本地磁盘中没有响应的图片文件的话，则会通过网络从远程服务器中下载图片至本地。</p>

<h2>网络</h2>

<p>从网络中获取图片，UIL 使用的是 <code>HttpURLConnection</code>，来执行图片的获取下载。对应逻辑代码是在 <code>ImageLoader</code> 接口中，其定义了由图片 imageUri，来得到 InputStream 。另外以指定 Scheme 的方式（如 HTTP，FILE，ASSETS，DRAWABLE） 来得到图片的输入流。</p>

<h2>总结</h2>

<p>UIL 作为图片加载的入门库，其逻辑代码也是写的非常漂亮。结构化清晰，简单明了，对各个模块都由一个接口来定义，极大地丰富细节的实现，像不同的内存、磁盘缓存策略及图片下载获取方式，另外这些策略都可以在 ImageLoader 的配置策略进行修改。总之，这个库是一个不错的学习 Android 图片加载的资料。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://github.com/nostra13/Android-Universal-Image-Loader/wiki/Useful-Info">ImageLoader Useful Info</a></li>
<li><a href="https://github.com/nostra13/Android-Universal-Image-Loader">ImageLoader</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React Native 之 JS 分离]]></title>
    <link href="http://alighters.github.io/blog/blog/2017/01/23/reactnative-seprate-js/"/>
    <updated>2017-01-23T13:34:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2017/01/23/reactnative-seprate-js</id>
    <content type="html"><![CDATA[<p>项目中遇到了要使 JS 与客户端分离的问题，即由前端开发人员开发相应的 JS 部分，客户端人员（Android 和 Ios）开发对应的 Native 部分。</p>

<p>不过幸运的是，React Native 对这部分内容已经做了支持。主要的思想是，当进入手机端的 RN 界面时，通过加载 JS 部分生成的 bundle，来达到 JS 测试开发的目的。</p>

<p>在前端开发时，需要通过启动 npm server，连接手机端的 server，来进行开发。 下面对其中的过程做一笔记：</p>

<!-- more -->


<h3>1.分离 JS 部分</h3>

<p>前端开发所需要的东西只是 npm 的配置文件 <code>package.json</code> 及相应的 index 文件（index.android.js 和 index.ios.js）。</p>

<p>当然种类还是需要配置环境，根据 <code>package.json</code> 文件，执行 <code>npm install</code> 即可，完成之后会生成相应的  <code>node_modules</code> 目录。另外，需要安装的是 react-native-cli 的工具。执行如下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g react-native-cli</span></code></pre></td></tr></table></div></figure>


<p>当需要升级的时候，执行如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm update react-native-cli -g</span></code></pre></td></tr></table></div></figure>


<p>之后，当我们需要启动一个 Server 的时候，在包含 index 文件和 node_modules 目录下，执行如下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm start</span></code></pre></td></tr></table></div></figure>


<p>或者如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>react-native start</span></code></pre></td></tr></table></div></figure>


<p>这样，便可启动一个用于提供 JS 的 Server.</p>

<h3>2.对接调试</h3>

<p>在启动了 JS 的 server 之后，会在命令行中看到有关服务的地址和端口信息。手机端在对接 RN 的内容并启动之后，通过在 RN 界面的设置界面（使用菜单键或者摇一摇打开）连接 JS Server  的地址和端口即可。另外可以启用 Hot Loading 模式来实时加载 JS。</p>

<p>若是我们指定其他的端口，可以使用如下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>react-native start --port 8088</span></code></pre></td></tr></table></div></figure>


<h3>3.指定端口</h3>

<p>若是需要在真机上进行调试，需要注意端口的启用：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>adb reverse tcp:8081 tcp:8081</span></code></pre></td></tr></table></div></figure>


<p>如果需要改变端口，可参考链接  <a href="http://blog.grio.com/2015/07/android-tip-adb-reverse.html">Android Tip: adb reverse | Grio Blog</a>。</p>

<h2>遇到的问题</h2>

<h3>64位手机不兼容的问题</h3>

<p>这里可参照链接 <a href="https://corbt.com/posts/2015/09/18/mixing-32-and-64bit-dependencies-in-android.html">Mixing 32- and 64-bit Dependencies in Android - Corbt blog</a> 过滤掉 64 位的使用。</p>

<h3>Could not get BatchedBridge</h3>

<p>这个错误表示 RN 界面找不到需要加载的 js bundle，可以通过尝试以下几个途径去解决：
1. 进入 RN 的设置界面，在 Dev Setting 中 Debugging 中指定 Server 的地址和端口号。
2. 另外，需要确保手机端和 Server 端保证在同一个 WIFI 之下。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://facebook.github.io/react-native/docs/getting-started.html">React Native Doc</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[理解 Multidex 生成]]></title>
    <link href="http://alighters.github.io/blog/blog/2017/01/16/multidex-generate/"/>
    <updated>2017-01-16T15:00:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2017/01/16/multidex-generate</id>
    <content type="html"><![CDATA[<h2>介绍</h2>

<p>在 Android 开发中，提到 65536 问题，就不得不提 Multidex 的解决方案。具体问题就是在 Android 打包的期间，是需要对 java 文件编译成 class 文件，class 文件信息过多而又冗余，这就再经过一步合并变成 dex 文件的过程（这一步是 dx 工具来处理的），其才是 Davilk 虚拟机加载识别的东西。而单个 dex 文件，其对方法数、字段数做了限制，即不能超过 65536，这便是问题的由来了。</p>

<p>当然，解决这个问题也是很简单的。在 gradle 中启用 Multidex，在 application 中添加 Multidex.install 方法。乍以为万事大吉了，但在我们项目中还是遇到了 65536 的问题，主要是因为项目太大，在生成 mainDex 的过程中，还是出现了方法数超过了 65536 的问题，解决这个问题的思想是要将 mainDex 中的一些类移除至其它的 dex 中。那这一步，应该怎么玩呢？这里先看一些 dx 工具为我们提供了什么？</p>

<!-- more -->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  [--multi-dex [--main-dex-list=&lt;file&gt; [--minimal-main-dex]]</span></code></pre></td></tr></table></div></figure>


<p>执行 dx 命令，可以看到其提供了 &ndash;multi-dex 的选项参数，需要接受的是一个文件的 &ndash;main-dex-list 以及一个最小化主 dex 的 &ndash;minimal-main-dex 参数。这里就是需要我们最终控制的地方，但要接触到这里，需要我们先看看 gradle plugin 是如何集成与使用它的？</p>

<h2>生成</h2>

<p>在使用 Android Studio 的时候，在 build.gradle 文件中，已经提供了 multidex 的支持。相应的选项是在 defaultConfig 中的 <code>multiDexEnabled</code> 设置为 true 即可。那其是如何生成多个 dex 的过程，就需要在 gradle plugin 的源码中来寻找答案了。</p>

<p>通过 gradle 编译生成 apk 的期间，可以通过 <code>Gradle Console</code> 视图查看 gradle 执行任务的输出，期间跟 multidex 几个相关的任务如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:app:transformClassesWithJarMergingForDevDebug UP-TO-DATE
</span><span class='line'>:app:collectDevDebugMultiDexComponents
</span><span class='line'>:app:transformClassesWithMultidexlistForDevDebug UP-TO-DATE
</span><span class='line'>:app:transformClassesWithDexForDevDebug UP-TO-DATE</span></code></pre></td></tr></table></div></figure>


<p>这几个任务对应在 gradle plugin 的源码中的位置为 TaskManager 的方法 <code>createPostCompilationTasks</code>。这里针对其中相关的 transform 和 task 做以简单的讲解：</p>

<h3>1. JarMergingTransform</h3>

<p>JarMergingTransform 的主要作用是将所用到的 jar 转换至一个单一的 Jar 中。具体输出的结果，可以在 build/intermediates/transforms/jarMerging 目录下，看到一个名称为 combined 的 jar 文件。</p>

<h3>2. CreateManifestKeepList</h3>

<p>CreateManifestKeepList 继承自 DefaultAndroidTask, 这一步会读取项目之前合并后的 manifest 文件，根据既定的规则，获取其中的 application、activity、service、provider、instrumentation 类，与 Mainifest 中的类组件进行比较来获取，最后会在 build/intermediates/multidex 下生成名为 manifest_keep.txt 的文件。</p>

<p>另外，此任务设置 <code>Filter</code> 类，支持对特定的类进行过滤，让指定的类保存在 maindex 中。但是此方法已被标记为 Deprecated, 可能会在后续的版本中废弃掉。</p>

<h3>3. MultiDexTransform</h3>

<p>MultiDexTransform 的主要任务是根据之前的 mainfest_keep 及一些 proguard 文件来生成 mainDex 中指定的类集合文件，对应生成的输出结果为 <code>maindexlist.txt</code> 。</p>

<p>但这里有个问题，就是 mainDex 的生成规则，其是如何指定哪些类在 mainDexList 中？</p>

<p>查看源码可看到它把这部分工作交给类 <code>ClassReferenceListBuilder</code>。其又调用了类 <code>MainDexListBuilder</code>，后者对应着 build_tools 中的 mainClasses 工具中处理依赖关系所使用到的类。这里真正的依赖判端逻辑是在 <code>ClassReferenceListBuilder</code> 中，所需要指定的两个参数 <code>path</code> 和 <code>jarOfRoots</code>，前者表示的是所需要处理的所有类文件的路径(对应上文的 combined.jar)，后者指定的是所需要在 mainDex 中的类（即处理依赖时的 root，获取 root 所依赖的类, 对应上述步骤中生成的 manifest_keep.txt 中的类），</p>

<p>其生成规则是遍历 <code>jarOfRoots</code> 中的 class 文件，将其对应程 <code>DirectClassFile</code> 对象（包含 class 信息的相应对象），之后从其中获取常量池中的类型，判断是类、方法、字段，并添加其类型所包含的类型信息。若是方法的时候，则需要的是方法的返回值类型以及参数值的类型。这里类型信息进行获取的时候，会从类、超类、实现的接口列表三个角度进行判断获取相应的类型信息。</p>

<p>所以说，这里的依赖类的获取，是通过当前类的常量池来进行获取判断的，不得不说很机智。</p>

<h3>4. DexTransform</h3>

<p>它被 dexTask 所使用，相对应的调用程序为 build-tools 中的 dx 程序。在 DexTransform 中的参数 dexOptions、mainDexListFile 指定了 dx 命令执行过程中所需要的参数。其主要的任务用来生成 apk 中的 dex 文件，若是指定了 multidex 为 true 时，则会根据 mainDexList 文件(指定哪些类会在 mainDex)来划分生成最后的多个 dex 文件。</p>

<p>这一步就是通过以上步骤的输出作为输入，进而执行 dx 命令的，来生成最终的 dex。了解到这里，接下来我们需要在以上的过程中动些手脚，来解决我们遇到的问题。</p>

<h2>解决</h2>

<h3>方法一：改变 keepList 任务列表</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>afterEvaluate {
</span><span class='line'>  project.tasks.each { task -&gt;
</span><span class='line'>      if (task.name.startsWith('collect') && task.name.endsWith('MultiDexComponents')) {
</span><span class='line'>          println "main-dex-filter: found task $task.name"
</span><span class='line'>          task.filter { name, attrs -&gt;
</span><span class='line'>              def componentName = attrs.get('android:name')
</span><span class='line'>              if ('activity'.equals(name)) {
</span><span class='line'>                  println "main-dex-filter: skipping, detected activity [$componentName]"
</span><span class='line'>                  return false
</span><span class='line'>              } else {
</span><span class='line'>                  println "main-dex-filter: keeping, detected $name [$componentName]"
</span><span class='line'>                  return true
</span><span class='line'>              }
</span><span class='line'>          }
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>这一步对应 gradle 执行过程中的 <code>CreateManifestKeepList</code>，利用其提供的 filter，进行一些过滤操作，其中 <code>name</code> 参数表示为节点类型，例如 activity、service、receiver 等; <code>attrs</code> 参数表示相应的节点信息，它是一个 Map 类型的参数，可表示的值形如 <code>['android:name':'com.example.ActivityClass']</code> 。</p>

<p>这一步可对 mainDex 中的组件信息做一些过滤，而不是添加所有的组件信息。像上述代码的处理就很残暴，把所有的 activity 都过滤掉。</p>

<blockquote><p>PS: 需要注意的是，在源码中的 setFilter 已经被标为废弃，可能会在后续的版本被替换掉，所以用这种方案需要所使用的 gradle plugin 版本注意一二。</p></blockquote>

<h3>方法二：修改 dx 的参数值</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>afterEvaluate {
</span><span class='line'>  tasks.matching {
</span><span class='line'>      it.name.startsWith('dex')
</span><span class='line'>      println("task name:" + it.name)
</span><span class='line'>  }.each { dx -&gt;
</span><span class='line'>
</span><span class='line'>      if (dx.additionalParameters == null) {
</span><span class='line'>          dx.additionalParameters = []
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>      //允许生成多个dex文件
</span><span class='line'>      dx.additionalParameters += '--multi-dex' // enable multidex
</span><span class='line'>
</span><span class='line'>      // 设置multidex.keep文件中class为第一个dex文件中包含的class，如果没有下一项设置此项无作用
</span><span class='line'>      dx.additionalParameters += "--main-dex-list=$projectDir/multidex.keep".toString()
</span><span class='line'>
</span><span class='line'>      //此项添加后第一个classes.dex文件只能包含-main-dex-list列表中class
</span><span class='line'>      dx.additionalParameters += '--minimal-main-dex'
</span><span class='line'>
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>这一步直接对应 dx 最终的调用，即修改我们上文所提到的参数值，将其替换我们手动填充的值，但是这一步的 multidex.keep 文件就需要我们折腾一二了。</p>

<p>不过针对这个方案，笔者是一直没有找到在 Task 中相对应的以 dex 开头的任务，所以这个方案没有生效。那为什么会有这种写法呢？笔者在 <code>Project</code> 中的 <code>Variant</code> 中相对应的 <code>ApkVariant</code> 类中看到一点信息，此接口定义了 <code>getDex()</code> 方法，对应实现在 <code>ApkVariantImpl</code> 中如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="nd">@Nullable</span>
</span><span class='line'> <span class="nd">@Override</span>
</span><span class='line'> <span class="kd">public</span> <span class="n">Object</span> <span class="nf">getDex</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>     <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">&quot;Access to the dex task is now impossible, starting with 1.4.0\n&quot;</span>
</span><span class='line'>             <span class="o">+</span> <span class="s">&quot;1.4.0 introduces a new Transform API allowing manipulation of the .class files.\n&quot;</span>
</span><span class='line'>             <span class="o">+</span> <span class="s">&quot;See more information: http://tools.android.com/tech-docs/new-build-system/transform-api&quot;</span><span class="o">);</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码中返回的值就是这个方案中与 <code>dx</code> 相对应的值。不过从异常信息中可以看到的是在 gradle plugin 1.4.0 的版本开始，此方法就已被废弃，而改为采用 transform 的实现。</p>

<p>所以此方案只针对 gradle plugin 1.4.0 之前的版本。</p>

<h3>方案三：修改 MainDexList</h3>

<p>这里所说的 MainDexList 对应着 bulld-tools 目录下的 dx 工具中 &ndash;main-dex-list 参数，与 Gradle  任务中相对应的是上文中提到的 <code>DexTransform</code> 的参数 <code>mainDexListFile</code>。意味着我们在调用 dx 命令（对应着执行 DexTransform）时，可对 KeepList 进行二次修改，保证 mainDex 中的类不超过限制，同时不出现 NoClassDefFoundError 的错误。</p>

<h3>最终方案：DexKnifePlugin</h3>

<p>推荐使用 <a href="https://github.com/ceabie/DexKnifePlugin">DexKnifePlugin</a>。来简单描述一下它的实现。其定义了一套类似 Proguard 的规则，用来定制生成 mainDex 所需 MainDexList 的规则，另外其考虑了 Gradle Plugin 针对 Dex 生成的两个不同版本的兼容。最后达到缩减、调整 MainDexList 来保证 mainDex 的生成无误。(是上述方案二和三的结合)</p>

<h2>扩展</h2>

<h3>NoClassDefFoundError 的出现</h3>

<p>出现这个错误时，解决办法是将异常中的这个类加至 mainDex 中。但是这个错误跟 <code>NotClassFoundException</code> 的区别，可查阅 <a href="http://stackoverflow.com/a/5756989">链接</a>。</p>

<p>其出现这个问题的说法，简单理解为虚拟机在第一次加载该类的出现了问题，当第二次再次使用这个类的时候，就会报出 NoClassDefFoundError。对应为我们 App 在运行时，在 mainDex 中有些类找不到，就会出现这样的错误。</p>

<p>但是为什么出现 NoClassDefFoundError 呢？从上面的分析可知 mainDex 并不会把它依赖的所有类都包含进去，那么其类加载的规则是什么样的？这些内容是跟 Dalvik 虚拟机相关的，任务量不小，就暂且留作 2017 年的一项学习任务了。</p>

<h2>总结</h2>

<p>文章简单介绍了 Gradle Plugin 处理 MultiDex 的步骤，若是需要对 MainDex 做特殊处理时，便可根据 Manifest 文件生成的 keepList 或者 DexTransform 中的 MainDexList 做处理。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multidex 的问题]]></title>
    <link href="http://alighters.github.io/blog/blog/2016/11/01/multidex-problems/"/>
    <updated>2016-11-01T18:10:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2016/11/01/multidex-problems</id>
    <content type="html"><![CDATA[<h2>降低启动速度的问题</h2>

<p>文章中提到的一点，在 Android 设备 4.4 及其之前的版本，当开启 Multidex 的时候，启动速度会延长 15% 。而 5.0及以上的设备因使用 ART 的方式，其默认支持多 dex 的加载。</p>

<h2>NoClassDefFoundError 的问题</h2>

<!-- more -->


<ul>
<li>查看加载的类问题
在目录  [buildDir]/intermediates/multi-dex/[buildType]/maindexlist.txt 中可查看在主 dex 文件中的类，（但并不是 100% 准确，可能会丢失一些类）</li>
<li>解决办法：配置一个新的 multidex.keep 文件，用来指定在 mainDex 中包含的类。通过配置 gradle 文件，指定 gradle 打包过程中，执行 dex 生成时的 keep 文件追加。具体实施是创建一个新的 task，使用 finalizedBy 来指定在 create**MainDexClassList 任务之后执行。另外还需要指定 dx 执行时，添加 &ndash;minimal-main-dex 选项，来使 maindex 最小化。</li>
</ul>


<h2>如何判断 App 启动过程中哪些类是需要加载的呢？</h2>

<p>通过使用类加载 ClassLoader 中，其提供了方法 findLoadedClass。这个方法的作用是用来判断某个类是否被加载，所以文章中使用的技巧就是通过读在 second dex files 中的类，来判断主 dex 是否加载到。若是加载到，则我们就需要将这个类添加至 main dex 来提高 App 的启动速度。</p>

<h2>解决与建议</h2>

<p> 出现 65k 的问题时候，通过其他方式（重构、优化第三方 SDK的使用）来尽量避免使用 Multidex;若是不可避免地使用，需要对 Multidex 的方式进行优化来使用，来尽量提高我们 App 的启动速度。</p>

<h3>延迟加载</h3>

<p>对纯 java 文件，可以将其单独打成一个 dex，利用 Multidex 加载的原理，在当我们使用到相应 java 文件的时候，再加载这个 dex，来执行相应代码的调用。（方案有些不成熟，不支持涉及到资源文件的情况。）</p>

<h2>其他</h2>

<h3>1. 工具 ClassShark</h3>

<p>在评论区，提到的一个软件 <a href="https://github.com/google/android-classyshark">android-classyshark</a>，可以帮我们更加容易分析 APK、dex、jar 中的使用内容，（不再通过 dex2jar, jd-gui等工具来查看）能够对 apk 中的内容一目了然, 功能非常强大。</p>

<blockquote><p>在 Android Studio 2.2 之后的版本，其已经支持了对 apk 的分析，可以直接点击进行查看。</p></blockquote>

<h3>2. dex2oat 与 dexopt</h3>

<p>评论中关于 5.0及以上不受影响的讨论，主要原因是因为 5.0 采用了 ART 的编译方式，其是在 app 安装的时候执行的，期间对 dex 文件采用了 dex2oat 的执行过程，来对 dex 文件进行优化。而 5.0 之前的设备是没有这一步，其采用的 dexopt 的过程，并处理的是单个 dex 文件，这样也会影响了 multidex 的启动速度，但是这个是每次打开 app 都会进行的，并不是安装时执行的。</p>

<blockquote><p>作者的关注点是在每次 App 打开的过程中， Multidex 带来的影响，所以这个讨论在这里并不是与主题太多相关，但是我们还是又必要了解一下的。</p></blockquote>

<h2>参考资料</h2>

<ul>
<li><a href="https://medium.com/groupon-eng/android-s-multidex-slows-down-app-startup-d9f10b46770f#.nvl5amjzl">Android’s multidex slows down app startup</a></li>
<li><a href="https://github.com/mmadev/multidex-sample">multidex-sample</a></li>
<li><a href="https://medium.com/@Macarse/lazy-loading-dex-files-d41f6f37df0e#.9ftjpld1s">Lazy Loading Dex files</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[创建 Gradle Plugin]]></title>
    <link href="http://alighters.github.io/blog/blog/2016/11/01/create-gradle-plugin/"/>
    <updated>2016-11-01T18:09:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2016/11/01/create-gradle-plugin</id>
    <content type="html"><![CDATA[<p>在使用 Android Studio 开发的同时，必定离不开 Gradle，再加之最近对 Gradle 在 InstanRun 所扮演的角色颇有兴趣。所以，这里先有一个开篇，理解并编写简单的 gradle plugin。</p>

<h2>写一个简单的插件</h2>

<p>创建一个 build.gradle 文件</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="n">GreetingPlugin</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">GreetingPlugin</span> <span class="kd">implements</span> <span class="n">Plugin</span><span class="o">&lt;</span><span class="n">Project</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Project</span> <span class="n">project</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">project</span><span class="o">.</span><span class="na">task</span><span class="o">(</span><span class="s1">&#39;hello&#39;</span><span class="o">)</span> <span class="o">&lt;&lt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">println</span> <span class="s2">&quot;Hello from the GreetingPlugin&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在当前目录下，执行 <code>gradle -q hello</code>，会得到输出：Hello from the GreetingPlugin</p>

<h2>设置输入参数</h2>

<p>若是需要通过类型来指定参数，可以自定义一个 Extension 相应的 class, 并添加至 project 的 extensions 中，指定名称为 greeting，使用 greeting 来设定参数。替换上面的 build.gradle 文件内容，代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="n">GreetingPlugin</span>
</span><span class='line'>
</span><span class='line'><span class="n">greeting</span><span class="o">.</span><span class="na">message</span> <span class="o">=</span> <span class="s1">&#39;Hi from Gradle&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">GreetingPlugin</span> <span class="kd">implements</span> <span class="n">Plugin</span><span class="o">&lt;</span><span class="n">Project</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Project</span> <span class="n">project</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Add the &#39;greeting&#39; extension object</span>
</span><span class='line'>        <span class="n">project</span><span class="o">.</span><span class="na">extensions</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="s2">&quot;greeting&quot;</span><span class="o">,</span> <span class="n">GreetingPluginExtension</span><span class="o">)</span>
</span><span class='line'>        <span class="c1">// Add a task that uses the configuration</span>
</span><span class='line'>        <span class="n">project</span><span class="o">.</span><span class="na">task</span><span class="o">(</span><span class="s1">&#39;hello&#39;</span><span class="o">)</span> <span class="o">&lt;&lt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">println</span> <span class="n">project</span><span class="o">.</span><span class="na">greeting</span><span class="o">.</span><span class="na">message</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">GreetingPluginExtension</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">def</span> <span class="n">String</span> <span class="n">message</span> <span class="o">=</span> <span class="s1">&#39;Hello from GreetingPlugin&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行同上命令，会得到输出 Hi from Gradle.</p>

<h2>利用闭包输入参数</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="n">GreetingPlugin</span>
</span><span class='line'>
</span><span class='line'><span class="n">greeting</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">message</span> <span class="o">=</span> <span class="s1">&#39;Hi&#39;</span>
</span><span class='line'>    <span class="n">greeter</span> <span class="o">=</span> <span class="s1">&#39;Gradle&#39;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">GreetingPlugin</span> <span class="kd">implements</span> <span class="n">Plugin</span><span class="o">&lt;</span><span class="n">Project</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Project</span> <span class="n">project</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">project</span><span class="o">.</span><span class="na">extensions</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="s2">&quot;greeting&quot;</span><span class="o">,</span> <span class="n">GreetingPluginExtension</span><span class="o">)</span>
</span><span class='line'>        <span class="n">project</span><span class="o">.</span><span class="na">task</span><span class="o">(</span><span class="s1">&#39;hello&#39;</span><span class="o">)</span> <span class="o">&lt;&lt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">println</span> <span class="s2">&quot;${project.greeting.message} from ${project.greeting.greeter}&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">GreetingPluginExtension</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">message</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">greeter</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过以闭包的格式来设置 greeting 参数 message 和 greeter，来控制输出。
执行之后，会得到输出 Hi from Gradle.</p>

<h2>输出文件</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kd">class</span> <span class="nc">GreetingToFileTask</span> <span class="kd">extends</span> <span class="n">DefaultTask</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">def</span> <span class="n">destination</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">File</span> <span class="nf">getDestination</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">project</span><span class="o">.</span><span class="na">file</span><span class="o">(</span><span class="n">destination</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@TaskAction</span>
</span><span class='line'>    <span class="kt">def</span> <span class="nf">greet</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">def</span> <span class="n">file</span> <span class="o">=</span> <span class="n">getDestination</span><span class="o">()</span>
</span><span class='line'>        <span class="n">file</span><span class="o">.</span><span class="na">parentFile</span><span class="o">.</span><span class="na">mkdirs</span><span class="o">()</span>
</span><span class='line'>        <span class="n">file</span><span class="o">.</span><span class="na">write</span> <span class="s2">&quot;Hello!&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="nf">greet</span><span class="o">(</span><span class="nl">type:</span> <span class="n">GreetingToFileTask</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">destination</span> <span class="o">=</span> <span class="o">{</span> <span class="n">project</span><span class="o">.</span><span class="na">greetingFile</span> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="nf">sayGreeting</span><span class="o">(</span><span class="nl">dependsOn:</span> <span class="n">greet</span><span class="o">)</span> <span class="o">&lt;&lt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">println</span> <span class="nf">file</span><span class="o">(</span><span class="n">greetingFile</span><span class="o">).</span><span class="na">text</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">ext</span><span class="o">.</span><span class="na">greetingFile</span> <span class="o">=</span> <span class="s2">&quot;$buildDir/hello.txt&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码中首先定义了 <code>GreetingToFileTask</code> 的 task，含有一个属性名称为 <code>destination</code>，通过使用 <code>@TaskAction</code> 的注解，指定了该 task 所执行的内容。之后，将其以参数的形式传至 <code>greet</code> 的 task 之中，并设置了 destination 属性的值为当前目录下 <code>build/hello.txt</code>。最后使用 sayGreeting 的 task 来依赖 greet。
在当前目录下，执行 <code>gradle -q sayGreeting</code>, 会得到 Hello! 的输出，并会创建 build 目录，及其下面 hello.txt 的文件且其内容为 Hello!。</p>

<h2>项目创建</h2>

<p>1.在新的 Library 中，将其中的 build.gradle 文件改为如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;groovy&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">compile</span> <span class="nf">gradleApi</span><span class="o">()</span>
</span><span class='line'>    <span class="n">compile</span> <span class="nf">localGroovy</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>2.编写 groovy 插件代码
在 src/main 目录下，建立 groovy 文件夹，之后是相应的包名路径，在路径下创建 GreetingPlugin.groovy 的文件，内容如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">lighters</span><span class="o">.</span><span class="na">gradle</span><span class="o">.</span><span class="na">lib</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.gradle.api.Plugin</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.gradle.api.Project</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">GreetingPlugin</span> <span class="kd">implements</span> <span class="n">Plugin</span><span class="o">&lt;</span><span class="n">Project</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Project</span> <span class="n">project</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">project</span><span class="o">.</span><span class="na">task</span><span class="o">(</span><span class="s1">&#39;hello&#39;</span><span class="o">)</span> <span class="o">&lt;&lt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">println</span> <span class="s2">&quot;hello&quot;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>3.配置插件，编写 <code>src/main/resources/META-INF/gradle-plugins/com.lighters.gradletest.properties</code>，设置其内容，为相应的类名称：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">implementation</span><span class="o">-</span><span class="n">class</span><span class="o">=</span><span class="n">com</span><span class="o">.</span><span class="na">lighters</span><span class="o">.</span><span class="na">gradle</span><span class="o">.</span><span class="na">lib</span><span class="o">.</span><span class="na">GreetingPlugin</span>
</span></code></pre></td></tr></table></div></figure>


<p>4.发布至本地仓库
在 Library 的 build.gradle 文件中，添加如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mavenCentral</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">group</span><span class="o">=</span><span class="s1">&#39;com.lighters.gradle.lib&#39;</span>
</span><span class='line'><span class="n">version</span><span class="o">=</span><span class="s1">&#39;1.0.1&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">uploadArchives</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mavenDeployer</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">repository</span><span class="o">(</span><span class="nl">url:</span> <span class="n">uri</span><span class="o">(</span><span class="s1">&#39;../repo&#39;</span><span class="o">))</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>之后，执行 gradle 刷新同步任务，会在 other 中，看到 uploadArchives 的任务，执行这个任务，就会在本地创建好 repo 的仓库。</p>

<p>5.在主项目中引入使用如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">buildscript</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">maven</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">url</span> <span class="nf">uri</span><span class="o">(</span><span class="s1">&#39;../repo&#39;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">classpath</span> <span class="nl">group:</span> <span class="s1">&#39;com.lighters.gradle.lib&#39;</span><span class="o">,</span> <span class="nl">name:</span> <span class="s1">&#39;gradletest&#39;</span><span class="o">,</span>
</span><span class='line'>                  <span class="nl">version:</span> <span class="s1">&#39;1.0.1&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;com.lighters.gradletest&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Gradle 任务 build 完成之后，会看到一个新多出来的 hello 任务，执行这个任务，则可得到 &ldquo;hello&rdquo; 的输出。</p>

<h2>扩展</h2>

<ul>
<li><p>自定义 Task
可通过实现 <a href="https://docs.gradle.org/current/javadoc/org/gradle/api/DefaultTask.html">DefaultTask</a> ，来定义 Task, 通过使用 TaskAction 注解的形式，来指定 task 的输出行为。</p></li>
<li><p>参数传递
使用 project 对象的 extendtions 参数来创建参数对象，如下：</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">project</span><span class="o">.</span><span class="na">extensions</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="s1">&#39;myArgs&#39;</span><span class="o">,</span> <span class="n">MyCustomPluginExtension</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>其中，MyCustomPluginExtension 是一个简单的对象，只指定属性字段即可。</p></blockquote>

<p>另外，也可指定 <code>myArgs</code> 参数，来实现嵌套参数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'> <span class="n">project</span><span class="o">.</span><span class="na">myArgs</span><span class="o">.</span><span class="na">extensions</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="s1">&#39;nestArgs&#39;</span><span class="o">,</span> <span class="n">MyNestPluginExtension</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Demo</h2>

<p>具体代码，可参照：<a href="https://github.com/alighters/GradleDemos">GradleDemos</a></p>

<h2>参考资料</h2>

<ul>
<li><a href="https://docs.gradle.org/current/userguide/custom_plugins.html">Writing Custom Plugins</a></li>
<li><a href="https://docs.gradle.org/current/userguide/custom_tasks.html">Writing Custom Task Classes</a></li>
<li><a href="http://blog.csdn.net/sbsujjbcy/article/details/50782830">如何使用Android Studio开发Gradle插件</a></li>
<li><a href="http://blog.csdn.net/liuhongwei123888/article/details/50541759">自定义Gradle插件（一）</a></li>
<li><a href="http://blog.csdn.net/liuhongwei123888/article/details/50542104">自定义Gradle插件（二）</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[位运算之巧用]]></title>
    <link href="http://alighters.github.io/blog/blog/2016/10/27/bit-skill/"/>
    <updated>2016-10-27T14:12:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2016/10/27/bit-skill</id>
    <content type="html"><![CDATA[<p>之前接触到位运算的时候，总是似懂非懂，一脸萌比。最近花点时间，细细研究，其实发现也相当简单。下面来举两个相当实用的例子，来彻底掌握位运算。</p>

<h2>异或实现交换</h2>

<p>在涉及到两个数的相交换的诸多实现中，一个不错的及格的算法，就是利用加法来做。如下：</p>

<!-- more -->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a = a + b;
</span><span class='line'>b = a - b;
</span><span class='line'>a = a - b;</span></code></pre></td></tr></table></div></figure>


<p>写出这个的话，还算不错，再来个惊艳的，就是利用位运算，如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a = a ^ b;
</span><span class='line'>b = a ^ b;
</span><span class='line'>a = a ^ b;</span></code></pre></td></tr></table></div></figure>


<p>如此工整的代码也是没谁了。初始乍看起来，是一脸懵逼，不知道其到底原理何在？
首先，说说加法。加法与减法是相对的，因为相加得到的和为固定值，再利用减法可以逆转回去，根据其中相加两个数的一个值，得到另一个值。这里，我称之为加减法的可逆转性。
再者，来看看异或运算，是如何做到的？先看如下的表格，来理解异或运算的特性。</p>

<table>
<thead>
<tr>
<th> Tables        </th>
<th style="text-align:center;"> Col1  </th>
<th style="text-align:center;"> Col2  </th>
<th style="text-align:center;"> Col3  </th>
<th style="text-align:center;"> Col4  </th>
</tr>
</thead>
<tbody>
<tr>
<td> a             </td>
<td style="text-align:center;"> 0     </td>
<td style="text-align:center;"> 1     </td>
<td style="text-align:center;"> 0     </td>
<td style="text-align:center;"> 1     </td>
</tr>
<tr>
<td> b             </td>
<td style="text-align:center;"> 0     </td>
<td style="text-align:center;"> 1     </td>
<td style="text-align:center;"> 1     </td>
<td style="text-align:center;"> 0     </td>
</tr>
<tr>
<td> c(result)     </td>
<td style="text-align:center;"> 0     </td>
<td style="text-align:center;"> 0     </td>
<td style="text-align:center;"> 1     </td>
<td style="text-align:center;"> 1     </td>
</tr>
</tbody>
</table>


<p>其中，c 为 a ^ b 的值，可以看出异或最直白的表述为相同为假（即0），不同为真（即1）。另外，也可以运算得出 a = b ^ c, b = a ^ c。我称之为真正的可逆性，即不再需要其他运算符，即可再转换回去。</p>

<p>这时，结合上述的表格，便可理解上述的异或交换算法了。（若是没理解，也不用着急，算法就是慢慢理解，慢慢消化的，可在闲时慢慢回想，揣摩这段简单的代码。）</p>

<h2>实现两个数的相加</h2>

<p>这是在网上看到的一道<a href="https://www.h5jun.com/post/multiply7.html">面试题</a>，需要不采用加减乘除的四则运算，来实现一个数的 7倍。</p>

<p>7 倍的问题可以转换为(8 - 1) 的问题，即左移 3 位，然后加上自身的负数。最终还是转换为如何实现加法的问题。所以这里只关注如何实现加法的核心问题。</p>

<p>首先，先以两个二进制数相加，查看其有什么特征。</p>

<p>  0 1 1 0
  0 1 0 0
这两个数相加，可得 1010, 期间可拆分为两个过程，相对应的位数为 0 与 1 或 1 与 0 相加所得为 1 的过程一；相对应的位数为 1 与 1 相加所得为 10，即需要发生进位的过程二。（0 与 0 相加为 0，不需要考虑）。</p>

<p>过程一可转换为异或运算，过程二转换为与运算，然后左移一位，来发生进位。若此时所得的数为 0，则表示没有进位发生，上步异或的结果，即为运算的结果；若不为 0，则表示有进位，则需要拿这个数，与相与所得的数，来重复过程一，过程二。写出的算法如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">add</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="o">(</span><span class="n">x</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">result</span> <span class="o">=</span> <span class="n">x</span> <span class="o">^</span> <span class="n">y</span><span class="o">;</span>
</span><span class='line'>      <span class="n">x</span> <span class="o">=</span> <span class="o">(</span><span class="n">x</span> <span class="o">&amp;</span> <span class="n">y</span><span class="o">)</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>      <span class="n">y</span> <span class="o">=</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">y</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>测试所得，对负数也是没问题的，（这里只要不发生溢出，都是没有问题的）。纠其原因，还是计算机在运算的时候，是采用补码的形式来运行的。另外补码的相加减，符号位也是参与运算的。</p>

<h2>参考资料</h2>

<ul>
<li><a href="http://www.cnblogs.com/zhangziqiu/archive/2011/03/30/ComputerCode.html">原码, 反码, 补码 详解</a></li>
<li><a href="https://www.h5jun.com/post/multiply7.html">别人家的面试题：不用加减乘除，求整数的7倍</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac 下 Terminal 快捷键]]></title>
    <link href="http://alighters.github.io/blog/blog/2016/10/27/terminal-command/"/>
    <updated>2016-10-27T14:11:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2016/10/27/terminal-command</id>
    <content type="html"><![CDATA[<p>在mac下，是没有meta键的。具体的修改方法：</p>

<ul>
<li>若是系统自带的terminal，在设置的键盘选项中，将“使用option键作为meta键”</li>
<li><p>若是在iterm下，需要在profiles->keys中，将“Left option key acts as”修改为“+Esc”即可。</p>

<p>  <!-- more --></p></li>
<li><p>ctrl + a/e 回到命令行的开头和结尾</p></li>
<li>alt + b/f  向前/后一个单词</li>
<li>ctrl + u/k 剪切光标前/后 所有单词</li>
<li>ctrl + y 撤销上个操作</li>
<li>ctrl + w 删除光标前一个单词</li>
<li>ctrl + b/f 光标向前/后移动一个位置</li>
<li><p>ctrl + h 删除光标位置的前一个字符</p></li>
<li><p>command + ; 显示使用过的命令</p></li>
<li>command + shift + h 弹出历史记录窗口</li>
</ul>


<h3>参考资料</h3>

<ul>
<li><a href="http://ixhan.com/2009/11/osx-terminal-keyshort/">OSX Terminal(终端) 使用快捷键</a></li>
<li><a href="http://wulfric.me/2015/08/iterm2/">你应该知道的 iTerm2 使用方法&ndash;MAC终端工具</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[编程之法-字符串]]></title>
    <link href="http://alighters.github.io/blog/blog/2016/10/27/algorithm-string/"/>
    <updated>2016-10-27T14:11:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2016/10/27/algorithm-string</id>
    <content type="html"><![CDATA[<h2>字符串的旋转</h2>

<p>题：abcedf -> edfabc</p>

<h3>1.蛮力移位</h3>

<p>原理：将后一个位置的字符向前移动，第一个字符放置在最后的位置上。
即分三步完成 bcedfa -> cedfab -> edfabc</p>

<!-- more -->


<h3>2. 三步反转</h3>

<p>拆分为两段即 abc 与 edf，对他俩分别进行反转得到 cbafde；再对整个进行反转，得到结果</p>

<p>练习：单词翻转
“I am a student.&ldquo; -> "student. a am I&rdquo;.
思路：按空格分隔，分别进行反转，再整理反转。</p>

<h2>字符串的包含。</h2>

<p>题：a: &ldquo;ABCD&rdquo;, b:&ldquo;BAD&rdquo; 则包含为true;
    若b 是 ”BCE", 为 false;
    若b 是 “AA", 为true. 即字符串b 中出现的字符都必须按在 a 中出现。</p>

<h3>1.蛮力轮询</h3>

<h3>2.排序后轮询</h3>

<p>排序使用快排，需要 O(mlogm) + O(nlogn), 线性扫描需要 O(m+n)次操作。</p>

<h3>3.素数相乘</h3>

<p>原理：利用素数相乘取余数的结果来判断，是否存在。（若是余数为0，表示存在，若是余数不为0，则表示不存在）</p>

<p>分步：
1.将 a 中出现的字符对应到 26 个素数当中，并相乘得到结果
2.遍历 b 中的字符，取得相应的素数，与上一步乘积的结果，取余进行判断。</p>

<p>现实不可行：前16个素数相乘的结果会超出 long 能表示的结果。</p>

<h3>4.位运算法</h3>

<p>原理：将 a 中的字符存至 hash 表中，b 来进行获取判断。
位运算：先用一个 int 来表示最终的结果，因为 Int 为32位，完全满足 26 个字符的要求，对 a 中的字符，对应 26 个字符的顺序进行移位放置 a 中。
即 hash |= (1 &lt;&lt; a[i] - &lsquo;A&rsquo;)
再进行 b 中判断的时候，直接进行相与，即可得到结果。</p>

<h2>字符串的全排列</h2>

<h3>1.递归实现</h3>

<h3>2.字典序排列</h3>

<p>原理：起点字典序最小的排列 1 ~ n 如 ”12345“；终点 n ~ 1, 如 ”54321“。 执行过程就是获取比当前字典序大的下一个排列。</p>

<p>举例： 21543，
1. 获得第一个升序的数字为 1
2. 比 1 大，并在 1 右边的最小一个数自，得到 3
3. 它俩交换，得到 23541，
4. 翻转 541 ，得到 23145.</p>

<p>两种解法的都一共有 n! 种情况，复杂度为 O(n!)。</p>

<p>练习</p>

<h3>1. 字典序的所有排列</h3>

<p>如 &ldquo;ab&rdquo;, 任意排列为 aa, ab, ba，bb。</p>

<p>采用递归的思想，当字符的个数为 2 时，输出结果。</p>

<h3>2. 字符的所有组合</h3>

<p>输入 &ldquo;abc&rdquo;, 组合有 a,b,c,ab,ac,bc,abc</p>

<h3>3.序列的打印</h3>

<p>(a),(b),&copy;
(a,b),(a,c)(b,c)
(a,b,c)</p>

<h2>字符串转成整数</h2>

<p>&ldquo;123&rdquo; -> 123</p>

<h3>乘以进制10</h3>

<p>其他问题：溢出，正负</p>

<h2>回文判断</h2>

<h3>1. 两头往中间</h3>

<h3>2. 中间往两头</h3>

<p>练习
1. 链表回文
2. 栈回文</p>

<h2>最长回文子串</h2>

<h3>中心扩展法</h3>

<p>需要考虑奇数还是偶数</p>

<h3>Manacher 算法</h3>

<p>将字符串间隔添加特殊字符，变为一个长度为奇数长度的新的字符串。
如 S[i]: # 1 # 2 # 2 # 1 # 2 # 3 # 2 # 1 #
得 P[i]: 1 2 1 2 5 2 1 4 1 2 1 6 1 2 1 2 1
其中 P[i] 来记录为字符 S[i] 为中心的最长回文子串向左或向右扩张的长度（包括 S[i]）</p>

<p>一个利用中间变量特殊技巧，增加两个变量 id 和 mx, id 表示最大回文子串中心的位置，mx 为 id + P[id], 即最大回文子串的右边界。会得到一个重要的结论： 如果 mx > i, 那么 P[i] >= min(P[2 * id -i], mx - i)。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://book.douban.com/subject/26641732/">编程之法</a></li>
<li><a href="https://github.com/julycoding/The-Art-Of-Programming-By-July">The-Art-Of-Programming-By-July
</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 代码重构]]></title>
    <link href="http://alighters.github.io/blog/blog/2016/09/26/ruby-code-refactor/"/>
    <updated>2016-09-26T07:59:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2016/09/26/ruby-code-refactor</id>
    <content type="html"><![CDATA[<p>在《 Ruby 元编程》一书的第二章 <code>method</code> 中，通过一段代码的重构，来展示 Ruby 的特性，如何以很少的代码来达到我们最终的效果。</p>

<h2>示例 Demo</h2>

<p>源代码：data_source.rb，其通过传入工作站点的 id，用来获取工作站点信息，如下：</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">DS</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">initialize</span> <span class="c1"># connect to data source...</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">get_mouse_info</span><span class="p">(</span><span class="n">workstation_id</span><span class="p">)</span> <span class="c1"># ...</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">get_mouse_price</span><span class="p">(</span><span class="n">workstation_id</span><span class="p">)</span> <span class="c1"># ...</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">get_keyboard_info</span><span class="p">(</span><span class="n">workstation_id</span><span class="p">)</span> <span class="c1"># ...</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">get_keyboard_price</span><span class="p">(</span><span class="n">workstation_id</span><span class="p">)</span> <span class="c1"># ...</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">get_cpu_info</span><span class="p">(</span><span class="n">workstation_id</span><span class="p">)</span> <span class="c1"># ...</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">get_cpu_price</span><span class="p">(</span><span class="n">workstation_id</span><span class="p">)</span> <span class="c1"># ...</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">get_display_info</span><span class="p">(</span><span class="n">workstation_id</span><span class="p">)</span> <span class="c1"># ...</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">get_display_price</span><span class="p">(</span><span class="n">workstation_id</span><span class="p">)</span> <span class="c1"># ...</span>
</span><span class='line'>   <span class="c1"># ...and so on</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>调用代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ds</span> <span class="o">=</span> <span class="no">DS</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">ds</span><span class="o">.</span><span class="n">get_cpu_info</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span> <span class="c1"># =&gt; 2.16 Ghz</span>
</span><span class='line'><span class="n">ds</span><span class="o">.</span><span class="n">get_cpu_price</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span> <span class="c1"># =&gt; 150</span>
</span><span class='line'><span class="n">ds</span><span class="o">.</span><span class="n">get_mouse_info</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span> <span class="c1"># =&gt; Dual Optical</span>
</span><span class='line'><span class="n">ds</span><span class="o">.</span><span class="n">get_mouse_price</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span> <span class="c1"># =&gt; 40</span>
</span></code></pre></td></tr></table></div></figure>


<h2>重构</h2>

<p>可以看到在 <code>DS</code> 类中，有很多重复的信息。第一步，首先将其抽象成一个 Computer 的类：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Computer</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">computer_id</span><span class="p">,</span> <span class="n">data_source</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@id</span> <span class="o">=</span> <span class="n">computer_id</span>
</span><span class='line'>    <span class="vi">@data_source</span> <span class="o">=</span> <span class="n">data_source</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">mouse</span>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">get_mouse_info</span><span class="p">(</span><span class="vi">@id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">price</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">get_mouse_price</span><span class="p">(</span><span class="vi">@id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="s2">&quot;Mouse: </span><span class="si">#{</span><span class="n">info</span><span class="si">}</span><span class="s2"> ($</span><span class="si">#{</span><span class="n">price</span><span class="si">}</span><span class="s2">)&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;* </span><span class="si">#{</span><span class="n">result</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="n">price</span> <span class="o">&gt;=</span> <span class="mi">100</span>
</span><span class='line'>    <span class="n">result</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">cpu</span>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">get_cpu_info</span><span class="p">(</span><span class="vi">@id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">price</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">get_cpu_price</span><span class="p">(</span><span class="vi">@id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="s2">&quot;Cpu: </span><span class="si">#{</span><span class="n">info</span><span class="si">}</span><span class="s2"> ($</span><span class="si">#{</span><span class="n">price</span><span class="si">}</span><span class="s2">)&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;* </span><span class="si">#{</span><span class="n">result</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="n">price</span> <span class="o">&gt;=</span> <span class="mi">100</span>
</span><span class='line'>    <span class="n">result</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">keyboard</span>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">get_keyboard_info</span><span class="p">(</span><span class="vi">@id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">price</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">get_keyboard_price</span><span class="p">(</span><span class="vi">@id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="s2">&quot;Keyboard: </span><span class="si">#{</span><span class="n">info</span><span class="si">}</span><span class="s2"> ($</span><span class="si">#{</span><span class="n">price</span><span class="si">}</span><span class="s2">)&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;* </span><span class="si">#{</span><span class="n">result</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="n">price</span> <span class="o">&gt;=</span> <span class="mi">100</span>
</span><span class='line'>    <span class="n">result</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是，抽象成这个类中，可以看到方法中对 <code>data_source</code> 的使用还有点信息的冗余。这里可以对方法再以参数的形式调用，如下。</p>

<h2>1.使用 Object 类的 send 方法：</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Computer</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">computer_id</span><span class="p">,</span> <span class="n">data_source</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@id</span> <span class="o">=</span> <span class="n">computer_id</span>
</span><span class='line'>    <span class="vi">@data_source</span> <span class="o">=</span> <span class="n">data_source</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">mouse</span>
</span><span class='line'>    <span class="n">component</span> <span class="ss">:mouse</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">cpu</span>
</span><span class='line'>    <span class="n">component</span> <span class="ss">:cpu</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">keyboard</span>
</span><span class='line'>    <span class="n">component</span> <span class="ss">:keyboard</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">component</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">send</span> <span class="s2">&quot;get_</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">_info&quot;</span><span class="p">,</span> <span class="vi">@id</span>
</span><span class='line'>    <span class="n">price</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">send</span> <span class="s2">&quot;get_</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">_price&quot;</span><span class="p">,</span> <span class="vi">@id</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">name</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">capitalize</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">info</span><span class="si">}</span><span class="s2"> ($</span><span class="si">#{</span><span class="n">price</span><span class="si">}</span><span class="s2">)&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;* </span><span class="si">#{</span><span class="n">result</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="n">price</span> <span class="o">&gt;=</span> <span class="mi">100</span>
</span><span class='line'>    <span class="n">result</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>send</code> 方法的参数指定一个方法的名称和参数，这样对方法的调用就可以抽象在 <code>component</code> 方法中。
调用代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">my_computer</span> <span class="o">=</span> <span class="no">Computer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">42</span><span class="p">,</span> <span class="no">DS</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span><span class='line'><span class="n">my_computer</span><span class="o">.</span><span class="n">cpu</span> <span class="c1"># =&gt; * Cpu: 2.16 Ghz ($220)</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>PS: 这种动态派发的这种特殊用法有时被称为**模式派发 （Pattern Dispatch），因为它基于方法名的某种模式来过滤方法。</p></blockquote>

<h2>2.方法 define_method</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Computer</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">computer_id</span><span class="p">,</span> <span class="n">data_source</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@id</span> <span class="o">=</span> <span class="n">computer_id</span>
</span><span class='line'>    <span class="vi">@data_source</span> <span class="o">=</span> <span class="n">data_source</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">define_component</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="n">define_method</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">info</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">send</span> <span class="s2">&quot;get_</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">_info&quot;</span><span class="p">,</span> <span class="vi">@id</span>
</span><span class='line'>      <span class="n">price</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">send</span> <span class="s2">&quot;get_</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">_price&quot;</span><span class="p">,</span> <span class="vi">@id</span>
</span><span class='line'>      <span class="n">result</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">name</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">capitalize</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">info</span><span class="si">}</span><span class="s2"> ($</span><span class="si">#{</span><span class="n">price</span><span class="si">}</span><span class="s2">)&quot;</span>
</span><span class='line'>      <span class="k">return</span> <span class="s2">&quot;* </span><span class="si">#{</span><span class="n">result</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="n">price</span> <span class="o">&gt;=</span> <span class="mi">100</span>
</span><span class='line'>      <span class="n">result</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">define_component</span> <span class="ss">:mouse</span>
</span><span class='line'>  <span class="n">define_component</span> <span class="ss">:cpu</span>
</span><span class='line'>  <span class="n">define_component</span> <span class="ss">:keyboard</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用 <code>define_method</code> 方法，来在运行时动态地定义方法，也称<strong> 动态方法 （Dynamic Method）</strong>。</p>

<h3>3. 内省代码的使用</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Computer</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">computer_id</span><span class="p">,</span> <span class="n">data_source</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@id</span> <span class="o">=</span> <span class="n">computer_id</span>
</span><span class='line'>    <span class="vi">@data_source</span> <span class="o">=</span> <span class="n">data_source</span>
</span><span class='line'>    <span class="n">data_source</span><span class="o">.</span><span class="n">methods</span><span class="o">.</span><span class="n">grep</span><span class="p">(</span><span class="sr">/^get_(.*)_info$/</span><span class="p">)</span> <span class="p">{</span> <span class="no">Computer</span><span class="o">.</span><span class="n">define_component</span> <span class="vg">$1</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">define_component</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="n">define_method</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">info</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">send</span> <span class="s2">&quot;get_</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">_info&quot;</span><span class="p">,</span> <span class="vi">@id</span>
</span><span class='line'>      <span class="n">price</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">send</span> <span class="s2">&quot;get_</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">_price&quot;</span><span class="p">,</span> <span class="vi">@id</span>
</span><span class='line'>      <span class="n">result</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">name</span><span class="o">.</span><span class="n">capitalize</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">info</span><span class="si">}</span><span class="s2"> ($</span><span class="si">#{</span><span class="n">price</span><span class="si">}</span><span class="s2">)&quot;</span>
</span><span class='line'>      <span class="k">return</span> <span class="s2">&quot;* </span><span class="si">#{</span><span class="n">result</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="n">price</span> <span class="o">&gt;=</span> <span class="mi">100</span>
</span><span class='line'>      <span class="n">result</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里通过使用正则表达式，来进一步简化方法的定义。使用 <code>grep</code>，当满足之后的正则表达式，则会定义相应的方法。</p>

<h3>4.method_missing 的使用</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Computer</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">computer_id</span><span class="p">,</span> <span class="n">data_source</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@id</span> <span class="o">=</span> <span class="n">computer_id</span>
</span><span class='line'>    <span class="vi">@data_source</span> <span class="o">=</span> <span class="n">data_source</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span> <span class="k">if</span> <span class="o">!</span><span class="vi">@data_source</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="s2">&quot;get_</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">_info&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;get_</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">_info&quot;</span><span class="p">,</span> <span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">price</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;get_</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">_price&quot;</span><span class="p">,</span> <span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">name</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">capitalize</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">info</span><span class="si">}</span><span class="s2"> ($</span><span class="si">#{</span><span class="n">price</span><span class="si">}</span><span class="s2">)&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot; * </span><span class="si">#{</span><span class="n">result</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="n">price</span> <span class="o">&gt;=</span> <span class="mi">100</span>
</span><span class='line'>    <span class="n">result</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>method_missing</code> 方法又称 ghost 方法（幽灵方法），是指在方法的调用过程中，若是在其类型中及其祖先链上找不到相应的方法，则会在实例上调用 <code>method_missing</code> 方法（其属于 Kernel 的一个实例方法，而所有的对象都继承自 kernel 模块）。这里通过重写 <code>method_missing</code> 方法，来达到对 <code>data_source</code> 中相应的方法的动态调用。</p>

<h2>参考资料</h2>

<p><a href="http://media.pragprog.com/titles/ppmetr/methods.pdf">Metaprogramming Ruby</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 字节码实践 - 解读]]></title>
    <link href="http://alighters.github.io/blog/blog/2016/09/16/read-java-bytecode/"/>
    <updated>2016-09-16T07:58:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2016/09/16/read-java-bytecode</id>
    <content type="html"><![CDATA[<p>最近刚看完 <a href="https://book.douban.com/subject/24722612/">深入理解 Java 虚拟机</a> 一书中的第 6 章 （类文件结构），便迫不及待地自己写一个小的 Demo，来自己分析一把 Java 源文件经过编译之后成为字节码文件到底是个什么东西？先由一个简单的小 Demo 开始：</p>

<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">lighters</span><span class="o">.</span><span class="na">demo</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Test</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sayHello</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;Hello &quot;</span> <span class="o">+</span> <span class="n">name</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行 <code>javac Test.java</code>，会在此目录下生成 <code>Test.class</code> 的文件。但是这个 class 字节码文件，是以二进制的形式存储的，我们需要以十六进制的形式进行查看。这里我使用 Vim 进行查看，在命令行模式输入：<code>%!xxd</code>，来采用十六进制的格式查看，得到下面的输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nl">location:</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span>  <span class="mi">4</span> <span class="mi">5</span>  <span class="mi">6</span> <span class="mi">7</span>  <span class="mi">8</span> <span class="mi">9</span>  <span class="n">a</span> <span class="n">b</span>  <span class="n">c</span> <span class="n">d</span>  <span class="n">e</span> <span class="n">f</span>
</span><span class='line'>
</span><span class='line'><span class="mi">0000000</span><span class="o">:</span> <span class="n">cafe</span> <span class="n">babe</span> <span class="mi">0000</span> <span class="mi">0034</span> <span class="mi">002</span><span class="n">c</span> <span class="mi">0</span><span class="n">a00</span> <span class="mi">0900</span> <span class="mi">1609</span>  <span class="o">.......</span><span class="mi">4</span><span class="o">.,......</span>
</span><span class='line'><span class="mi">0000010</span><span class="o">:</span> <span class="mi">000</span><span class="n">b</span> <span class="mi">0017</span> <span class="mi">0900</span> <span class="mi">1800</span> <span class="mi">1907</span> <span class="mi">001</span><span class="n">a</span> <span class="mi">0</span><span class="n">a00</span> <span class="mi">0400</span>  <span class="o">................</span>
</span><span class='line'><span class="mi">0000020</span><span class="o">:</span> <span class="mi">1608</span> <span class="mi">001</span><span class="n">b</span> <span class="mi">0</span><span class="n">a00</span> <span class="mi">0400</span> <span class="mi">1</span><span class="n">c0a</span> <span class="mi">0004</span> <span class="mi">001</span><span class="n">d</span> <span class="mi">0700</span>  <span class="o">................</span>
</span><span class='line'><span class="mi">0000030</span><span class="o">:</span> <span class="mi">1</span><span class="n">e0a</span> <span class="mi">001</span><span class="n">f</span> <span class="mi">0020</span> <span class="mi">0700</span> <span class="mi">2101</span> <span class="mi">0004</span> <span class="mi">6</span><span class="n">e61</span> <span class="mi">6</span><span class="n">d65</span>  <span class="o">.....</span> <span class="o">..!...</span><span class="na">name</span>
</span><span class='line'><span class="mi">0000040</span><span class="o">:</span> <span class="mi">0100</span> <span class="mi">124</span><span class="n">c</span> <span class="mi">6</span><span class="n">a61</span> <span class="mi">7661</span> <span class="mi">2</span><span class="n">f6c</span> <span class="mi">616</span><span class="n">e</span> <span class="mi">672</span><span class="n">f</span> <span class="mi">5374</span>  <span class="o">...</span><span class="na">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">St</span>
</span><span class='line'><span class="mi">0000050</span><span class="o">:</span> <span class="mi">7269</span> <span class="mi">6</span><span class="n">e67</span> <span class="mi">3</span><span class="n">b01</span> <span class="mi">0006</span> <span class="mi">3</span><span class="n">c69</span> <span class="mi">6</span><span class="n">e69</span> <span class="mi">743</span><span class="n">e</span> <span class="mi">0100</span>  <span class="n">ring</span><span class="o">;...&lt;</span><span class="n">init</span><span class="o">&gt;..</span>
</span><span class='line'><span class="mi">0000060</span><span class="o">:</span> <span class="mi">1528</span> <span class="mi">4</span><span class="n">c6a</span> <span class="mi">6176</span> <span class="mi">612</span><span class="n">f</span> <span class="mi">6</span><span class="n">c61</span> <span class="mi">6</span><span class="n">e67</span> <span class="mi">2</span><span class="n">f53</span> <span class="mi">7472</span>  <span class="o">.(</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">Str</span>
</span><span class='line'><span class="mi">0000070</span><span class="o">:</span> <span class="mi">696</span><span class="n">e</span> <span class="mi">673</span><span class="n">b</span> <span class="mi">2956</span> <span class="mi">0100</span> <span class="mi">0443</span> <span class="mi">6</span><span class="n">f64</span> <span class="mi">6501</span> <span class="mi">000</span><span class="n">f</span>  <span class="n">ing</span><span class="o">;)</span><span class="n">V</span><span class="o">...</span><span class="na">Code</span><span class="o">...</span>
</span><span class='line'><span class="mi">0000080</span><span class="o">:</span> <span class="mi">4</span><span class="n">c69</span> <span class="mi">6</span><span class="n">e65</span> <span class="mi">4</span><span class="n">e75</span> <span class="mi">6</span><span class="n">d62</span> <span class="mi">6572</span> <span class="mi">5461</span> <span class="mi">626</span><span class="n">c</span> <span class="mi">6501</span>  <span class="n">LineNumberTable</span><span class="o">.</span>
</span><span class='line'><span class="mi">0000090</span><span class="o">:</span> <span class="mi">0008</span> <span class="mi">7361</span> <span class="mi">7948</span> <span class="mi">656</span><span class="n">c</span> <span class="mi">6</span><span class="n">c6f</span> <span class="mi">0100</span> <span class="mi">0328</span> <span class="mi">2956</span>  <span class="o">..</span><span class="na">sayHello</span><span class="o">...()</span><span class="n">V</span>
</span><span class='line'><span class="mi">00000</span><span class="nl">a0:</span> <span class="mi">0100</span> <span class="mi">0</span><span class="n">a53</span> <span class="mi">6</span><span class="n">f75</span> <span class="mi">7263</span> <span class="mi">6546</span> <span class="mi">696</span><span class="n">c</span> <span class="mi">6501</span> <span class="mi">0009</span>  <span class="o">...</span><span class="na">SourceFile</span><span class="o">...</span>
</span><span class='line'><span class="mi">00000</span><span class="nl">b0:</span> <span class="mi">5465</span> <span class="mi">7374</span> <span class="mi">2</span><span class="n">e6a</span> <span class="mi">6176</span> <span class="mi">610</span><span class="n">c</span> <span class="mi">000</span><span class="n">e</span> <span class="mi">0013</span> <span class="mi">0</span><span class="n">c00</span>  <span class="n">Test</span><span class="o">.</span><span class="na">java</span><span class="o">.......</span>
</span><span class='line'><span class="mi">00000</span><span class="nl">c0:</span> <span class="mi">0</span><span class="n">c00</span> <span class="mi">0</span><span class="n">d07</span> <span class="mi">0022</span> <span class="mi">0</span><span class="n">c00</span> <span class="mi">2300</span> <span class="mi">2401</span> <span class="mi">0017</span> <span class="mi">6</span><span class="n">a61</span>  <span class="o">.....</span><span class="s">&quot;..#.$...ja</span>
</span><span class='line'><span class="s">00000d0: 7661 2f6c 616e 672f 5374 7269 6e67 4275  va/lang/StringBu</span>
</span><span class='line'><span class="s">00000e0: 696c 6465 7201 0006 4865 6c6c 6f20 0c00  ilder...Hello ..</span>
</span><span class='line'><span class="s">00000f0: 2500 260c 0027 0028 0100 106a 6176 612f  %.&amp;..&#39;.(...java/</span>
</span><span class='line'><span class="s">0000100: 6c61 6e67 2f4f 626a 6563 7407 0029 0c00  lang/Object..)..</span>
</span><span class='line'><span class="s">0000110: 2a00 2b01 0016 636f 6d2f 6c69 6768 7465  *.+...com/lighte</span>
</span><span class='line'><span class="s">0000120: 7273 2f64 656d 6f2f 5465 7374 0100 106a  rs/demo/Test...j</span>
</span><span class='line'><span class="s">0000130: 6176 612f 6c61 6e67 2f53 7973 7465 6d01  ava/lang/System.</span>
</span><span class='line'><span class="s">0000140: 0003 6f75 7401 0015 4c6a 6176 612f 696f  ..out...Ljava/io</span>
</span><span class='line'><span class="s">0000150: 2f50 7269 6e74 5374 7265 616d 3b01 0006  /PrintStream;...</span>
</span><span class='line'><span class="s">0000160: 6170 7065 6e64 0100 2d28 4c6a 6176 612f  append..-(Ljava/</span>
</span><span class='line'><span class="s">0000170: 6c61 6e67 2f53 7472 696e 673b 294c 6a61  lang/String;)Lja</span>
</span><span class='line'><span class="s">0000180: 7661 2f6c 616e 672f 5374 7269 6e67 4275  va/lang/StringBu</span>
</span><span class='line'><span class="s">0000190: 696c 6465 723b 0100 0874 6f53 7472 696e  ilder;...toStrin</span>
</span><span class='line'><span class="s">00001a0: 6701 0014 2829 4c6a 6176 612f 6c61 6e67  g...()Ljava/lang</span>
</span><span class='line'><span class="s">00001b0: 2f53 7472 696e 673b 0100 136a 6176 612f  /String;...java/</span>
</span><span class='line'><span class="s">00001c0: 696f 2f50 7269 6e74 5374 7265 616d 0100  io/PrintStream..</span>
</span><span class='line'><span class="s">00001d0: 0670 7269 6e74 6601 003c 284c 6a61 7661  .printf..&lt;(Ljava</span>
</span><span class='line'><span class="s">00001e0: 2f6c 616e 672f 5374 7269 6e67 3b5b 4c6a  /lang/String;[Lj</span>
</span><span class='line'><span class="s">00001f0: 6176 612f 6c61 6e67 2f4f 626a 6563 743b  ava/lang/Object;</span>
</span><span class='line'><span class="s">0000200: 294c 6a61 7661 2f69 6f2f 5072 696e 7453  )Ljava/io/PrintS</span>
</span><span class='line'><span class="s">0000210: 7472 6561 6d3b 0021 000b 0009 0000 0001  tream;.!........</span>
</span><span class='line'><span class="s">0000220: 0002 000c 000d 0000 0002 0001 000e 000f  ................</span>
</span><span class='line'><span class="s">0000230: 0001 0010 0000 002a 0002 0002 0000 000a  .......*........</span>
</span><span class='line'><span class="s">0000240: 2ab7 0001 2a2b b500 02b1 0000 0001 0011  *...*+..........</span>
</span><span class='line'><span class="s">0000250: 0000 000e 0003 0000 0007 0004 0008 0009  ................</span>
</span><span class='line'><span class="s">0000260: 0009 0001 0012 0013 0001 0010 0000 003e  ...............&gt;</span>
</span><span class='line'><span class="s">0000270: 0003 0001 0000 0022 b200 03bb 0004 59b7  .......&quot;</span><span class="o">......</span><span class="na">Y</span><span class="o">.</span>
</span><span class='line'><span class="mi">0000280</span><span class="o">:</span> <span class="mi">0005</span> <span class="mi">1206</span> <span class="n">b600</span> <span class="mi">072</span><span class="n">a</span> <span class="n">b400</span> <span class="mi">02</span><span class="n">b6</span> <span class="mi">0007</span> <span class="n">b600</span>  <span class="o">.......*........</span>
</span><span class='line'><span class="mi">0000290</span><span class="o">:</span> <span class="mi">0803</span> <span class="n">bd00</span> <span class="mi">09</span><span class="n">b6</span> <span class="mi">000</span><span class="n">a</span> <span class="mi">57</span><span class="n">b1</span> <span class="mi">0000</span> <span class="mi">0001</span> <span class="mi">0011</span>  <span class="o">........</span><span class="na">W</span><span class="o">.......</span>
</span><span class='line'><span class="mi">00002</span><span class="nl">a0:</span> <span class="mi">0000</span> <span class="mi">000</span><span class="n">a</span> <span class="mi">0002</span> <span class="mi">0000</span> <span class="mi">000</span><span class="n">c</span> <span class="mi">0021</span> <span class="mi">000</span><span class="n">d</span> <span class="mi">0001</span>  <span class="o">...........!....</span>
</span><span class='line'><span class="mi">00002</span><span class="nl">b0:</span> <span class="mi">0014</span> <span class="mi">0000</span> <span class="mi">0002</span> <span class="mi">0015</span>                      <span class="o">........</span>
</span></code></pre></td></tr></table></div></figure>


<p>
这里的输出还是蛮人性化的，每行开头前面的冒号前那一串是表示每行开头的第一个字符的位置索引。1 个字符是 4 位，即每两位是 1 个字节，一行则是 16 个 字节，对应十六进制表示为 0 - F。</p>

<blockquote><p>PS: 第一行的内容为人为添加，方便定位列的索引。</p></blockquote>

<p>可知，这里用十六进制表示，整个文件内容的大小没超过 3 位，所以这里用 3 位的十六进制，来表示地址。例如，若地址为0x000，指向的内容为 ca ；地址为 0x001，指向的内容为 fe；地址为0x011 ，指向的内容为 0b；下文都将以这样的形式来指向字节码中的内容。</p>

<p>准备工作做好之后，我们还需要关于的 Java 字节码的结构信息表，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ClassFile</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">u4</span>             <span class="n">magic</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">minor_version</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">major_version</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">constant_pool_count</span><span class="o">;</span>
</span><span class='line'>    <span class="n">cp_info</span>        <span class="n">constant_pool</span><span class="o">[</span><span class="n">constant_pool_count</span><span class="o">-</span><span class="mi">1</span><span class="o">];</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">access_flags</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">this_class</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">super_class</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">interfaces_count</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">interfaces</span><span class="o">[</span><span class="n">interfaces_count</span><span class="o">];</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">fields_count</span><span class="o">;</span>
</span><span class='line'>    <span class="n">field_info</span>     <span class="n">fields</span><span class="o">[</span><span class="n">fields_count</span><span class="o">];</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">methods_count</span><span class="o">;</span>
</span><span class='line'>    <span class="n">method_info</span>    <span class="n">methods</span><span class="o">[</span><span class="n">methods_count</span><span class="o">];</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">attributes_count</span><span class="o">;</span>
</span><span class='line'>    <span class="n">attribute_info</span> <span class="n">attributes</span><span class="o">[</span><span class="n">attributes_count</span><span class="o">];</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的 u1 、u2、 u4 表示的分别为 1 个字节，2个字节，4 个字节。接下来，我们将会跟字节码的结构信息表来一一对应在上面 Test.class 文件的解析：</p>

<h2>魔数 - magic</h2>

<p>在字节码结构表中，可知 magic 对应的是 4 个字节的容量，相应在 Test.class 文件位置为0x000 - 0x003 的 4 个字节，信息为 <code>cafe babe</code>。用来表示为这是一个 class 文件，能够被 JVM 所识别。</p>

<h2>次版本 - minor_version</h2>

<p>大小为两个字节，对应位置索引 0x004 - 0x005 的 2个字节，即 0x0000，表示此版本的大小为 0。</p>

<h2>主版本 - major_version</h2>

<p>大小为两个字节，对应位置索引为 0x006 - 0x007 的2个字节，即 0034，对应十进制的大小为 52，而初始的 Jvm 版本 1.0 支持的大小为 45，也就意味着这是由 JDK 1.8 生成的字节码，则之能由 Jvm 1.8 及以上版本才能解析上文的字节码文件。</p>

<h2>常量池容量 - constant_pool_count</h2>

<p>由 2 个字节来表示常量池的大小，这个大小包含自身，即其余的常量大小只能为  2<sup>16</sup> - 1，对应 Test.class 文件中的描述为 002c ，对应十进制大小为 44，表明还将有 43 个字节用来描述常量池。</p>

<p>常量池中主要存放两大类常量：字面量和符号引用。字面量主要指文本字符串，声明为 final 的常量值等。而符号引用属于编译原理方面的概念，主要包含类和接口的全限定名，字段的名称和描述符，方法的名称和描述符。</p>

<h2>常量池 - constant_pool[constant_pool_count-1]</h2>

<p>这里将会有 43 个常量。常量池包含着一组信息，不过他们的通用格式如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">cp_info</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">u1</span> <span class="n">tag</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u1</span> <span class="n">info</span><span class="o">[];</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>即 1 个自己的 tag描述，加上一组相应信息的描述。看到这里，我们继续接下来的字节，内容为 0x0a，对应十进制的 10，在下面的常量 tag 表中，进行查找，可知对应的常量类型为 Constant_Methodref，表示当前类方法的符号引用。</p>

<p><img src="http://upload-images.jianshu.io/upload_images/656559-223a2c97df971838.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="常量池 tag" /></p>

<p>接着查找 Constant_Methodref 的结构，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">CONSTANT_Methodref_info</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">u1</span> <span class="n">tag</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span> <span class="n">class_index</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span> <span class="n">name_and_type_index</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可知 第一个字节是为 tag 标记，这里已经确定了是刚才的 <code>Constant_Methodref</code>；然后是两个字节的 class_index ，指向的内容是指类在常量池中的索引；最后是两个字节的 name_and_type_index，同样也是方法的描述在常量池中的索引值。</p>

<p>先看 class_index，可知其内容是地址0x00b - 0x00c ，相应内容为 0x0009，即这里我们需要从 0x00b 的位置开始数，数至第 9 个常量。常量寻找定位的过程如下：</p>

<ul>
<li>常量1：<code>CONSTANT_Methodref</code>，一共占 5 个字节，位置为 0x00a - 0x00e</li>
<li>常量2: <code>CONSTANT_Fieldref</code>，格式与常量1 <code>methodref</code>相同，5个字节，位置为 0x00f - 0x013</li>
<li>常量3：<code>CONSTANT_Fieldref</code>，同上，位置为 0x014 - 0x018</li>
<li>常量4：<code>CONSTANT_Class</code>，其格式为下述代码，3个字节，位置为 0x019 - 0x01b</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">CONSTANT_Class_info</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">u1</span> <span class="n">tag</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span> <span class="n">name_index</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>常量5：<code>CONSTANT_Methodref</code>, 5个字节，位置为 0x01c - 0x020</li>
<li>常量6；<code>CONSTANT_String</code>，其格式如下代码，3个字节，位置为 0x021 - 0x023，这里的 string_index，也指向的是常量池中的内容，不过它将会指向的
是一个 <code>CONSTANT_Utf8</code> 的常量。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">CONSTANT_String_info</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">u1</span> <span class="n">tag</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span> <span class="n">string_index</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>常量7：<code>CONSTANT_Methodref</code>, 5个字节，位置为 0x024 - 0x028</li>
<li>常量8：<code>CONSTANT_Methodref</code>, 5个字节，位置为 0x029 - 0x02d</li>
<li>常量9：<code>CONSTANT_Class</code>，3个字节，位置为 0x02e - 0x030。</li>
</ul>


<p>到这里，可以看出第一个常量 <code>CONSTANT_Methodref</code> 中的 <code>class_index</code> 指向的是一个 <code>CONSTANT_Class</code>，另一个 <code>name_and_type_index</code> 将会指向一个 <code>CONSTANT_NameAndType</code> 的常量。发现这样阅读定位，实在是太费力了，好在 jdk 给我们提供了 <code>javap</code> 的命令工具。 用它来输出字节码的信息，来帮助我们阅读。在命令行下输入 <code>javap -verbose Test.class</code>，过滤其他输出，只关心我们的常量池输出，如下 ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Constant</span> <span class="nl">pool:</span>
</span><span class='line'>   <span class="err">#</span><span class="mi">1</span> <span class="o">=</span> <span class="n">Methodref</span>          <span class="err">#</span><span class="mi">9</span><span class="o">.</span><span class="err">#</span><span class="mi">22</span>         <span class="c1">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span>
</span><span class='line'>   <span class="err">#</span><span class="mi">2</span> <span class="o">=</span> <span class="n">Fieldref</span>           <span class="err">#</span><span class="mi">11</span><span class="o">.</span><span class="err">#</span><span class="mi">23</span>        <span class="c1">// com/lighters/demo/Test.name:Ljava/lang/String;</span>
</span><span class='line'>   <span class="err">#</span><span class="mi">3</span> <span class="o">=</span> <span class="n">Fieldref</span>           <span class="err">#</span><span class="mi">24</span><span class="o">.</span><span class="err">#</span><span class="mi">25</span>        <span class="c1">// java/lang/System.out:Ljava/io/PrintStream;</span>
</span><span class='line'>   <span class="err">#</span><span class="mi">4</span> <span class="o">=</span> <span class="n">Class</span>              <span class="err">#</span><span class="mi">26</span>            <span class="c1">// java/lang/StringBuilder</span>
</span><span class='line'>   <span class="err">#</span><span class="mi">5</span> <span class="o">=</span> <span class="n">Methodref</span>          <span class="err">#</span><span class="mi">4</span><span class="o">.</span><span class="err">#</span><span class="mi">22</span>         <span class="c1">// java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span>
</span><span class='line'>   <span class="err">#</span><span class="mi">6</span> <span class="o">=</span> <span class="n">String</span>             <span class="err">#</span><span class="mi">27</span>            <span class="c1">// Hello</span>
</span><span class='line'>   <span class="err">#</span><span class="mi">7</span> <span class="o">=</span> <span class="n">Methodref</span>          <span class="err">#</span><span class="mi">4</span><span class="o">.</span><span class="err">#</span><span class="mi">28</span>         <span class="c1">// java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span>
</span><span class='line'>   <span class="err">#</span><span class="mi">8</span> <span class="o">=</span> <span class="n">Methodref</span>          <span class="err">#</span><span class="mi">4</span><span class="o">.</span><span class="err">#</span><span class="mi">29</span>         <span class="c1">// java/lang/StringBuilder.toString:()Ljava/lang/String;</span>
</span><span class='line'>   <span class="err">#</span><span class="mi">9</span> <span class="o">=</span> <span class="n">Class</span>              <span class="err">#</span><span class="mi">30</span>            <span class="c1">// java/lang/Object</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">10</span> <span class="o">=</span> <span class="n">Methodref</span>          <span class="err">#</span><span class="mi">31</span><span class="o">.</span><span class="err">#</span><span class="mi">32</span>        <span class="c1">// java/io/PrintStream.printf:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintStream;</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">11</span> <span class="o">=</span> <span class="n">Class</span>              <span class="err">#</span><span class="mi">33</span>            <span class="c1">// com/lighters/demo/Test</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">12</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="n">name</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">13</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">String</span><span class="o">;</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">14</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="o">&lt;</span><span class="n">init</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">15</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="o">(</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">String</span><span class="o">;)</span><span class="n">V</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">16</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="n">Code</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">17</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="n">LineNumberTable</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">18</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="n">sayHello</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">19</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="o">()</span><span class="n">V</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">20</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="n">SourceFile</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">21</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="n">Test</span><span class="o">.</span><span class="na">java</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">22</span> <span class="o">=</span> <span class="n">NameAndType</span>        <span class="err">#</span><span class="mi">14</span><span class="o">:</span><span class="err">#</span><span class="mi">19</span>        <span class="c1">// &quot;&lt;init&gt;&quot;:()V</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">23</span> <span class="o">=</span> <span class="n">NameAndType</span>        <span class="err">#</span><span class="mi">12</span><span class="o">:</span><span class="err">#</span><span class="mi">13</span>        <span class="c1">// name:Ljava/lang/String;</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">24</span> <span class="o">=</span> <span class="n">Class</span>              <span class="err">#</span><span class="mi">34</span>            <span class="c1">// java/lang/System</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">25</span> <span class="o">=</span> <span class="n">NameAndType</span>        <span class="err">#</span><span class="mi">35</span><span class="o">:</span><span class="err">#</span><span class="mi">36</span>        <span class="c1">// out:Ljava/io/PrintStream;</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">26</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="n">java</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">StringBuilder</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">27</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="n">Hello</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">28</span> <span class="o">=</span> <span class="n">NameAndType</span>        <span class="err">#</span><span class="mi">37</span><span class="o">:</span><span class="err">#</span><span class="mi">38</span>        <span class="c1">// append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">29</span> <span class="o">=</span> <span class="n">NameAndType</span>        <span class="err">#</span><span class="mi">39</span><span class="o">:</span><span class="err">#</span><span class="mi">40</span>        <span class="c1">// toString:()Ljava/lang/String;</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">30</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="n">java</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">Object</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">31</span> <span class="o">=</span> <span class="n">Class</span>              <span class="err">#</span><span class="mi">41</span>            <span class="c1">// java/io/PrintStream</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">32</span> <span class="o">=</span> <span class="n">NameAndType</span>        <span class="err">#</span><span class="mi">42</span><span class="o">:</span><span class="err">#</span><span class="mi">43</span>        <span class="c1">// printf:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintStream;</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">33</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="n">com</span><span class="o">/</span><span class="n">lighters</span><span class="o">/</span><span class="n">demo</span><span class="o">/</span><span class="n">Test</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">34</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="n">java</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">System</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">35</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="n">out</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">36</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="n">Ljava</span><span class="o">/</span><span class="n">io</span><span class="o">/</span><span class="n">PrintStream</span><span class="o">;</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">37</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="n">append</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">38</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="o">(</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">String</span><span class="o">;)</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">StringBuilder</span><span class="o">;</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">39</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="n">toString</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">40</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="o">()</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">String</span><span class="o">;</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">41</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="n">java</span><span class="o">/</span><span class="n">io</span><span class="o">/</span><span class="n">PrintStream</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">42</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="n">printf</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">43</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="o">(</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">String</span><span class="o">;[</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">Object</span><span class="o">;)</span><span class="n">Ljava</span><span class="o">/</span><span class="n">io</span><span class="o">/</span><span class="n">PrintStream</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>结合这个输出，再回过头来，查看之前的第一个常量，其类型为 <code>Methodref</code>，另包含指向 #9 和 #22 的索引；#9 类型为 <code>Class</code>，其包含一个 #30 的 utf8 的字符串描述 ：<code>java/lang/Object</code>；# 22 指向的是 <code>NameAndType</code> 的索引，其指向的内容的 #14 的方法描述，及 #19 的方法参数及其返回值的描述。可知这个 <code>Methodref</code> 的最终指向的内容为 <code>Object</code> 的 <code>init</code> 方法，<code>()V</code> 表达的意思是参数为空，返回值为 Void。</p>

<p>另外还有其他的方法，字段，类以及 utf8 的描述，而 uft8 描述的则是一组 ascii 码字符。</p>

<h2>访问标记 - access_flags</h2>

<p>在经过了 43 个大小的常量池，接下来便是两个字节的访问标记，其主要用来表示当前类的访问符。这里具体的取值如下表：</p>

<p><img src="http://upload-images.jianshu.io/upload_images/656559-46948b414f858066.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="access_flags" />
从表中得到这里的取值都是数字 1 进行移位得到的结果，这样就可以通过或运算得到我们类有哪些访问标记。</p>

<p>访问标记对应在字节码中的位置为 0x216 - 0x217，内容为 0x0021，可知这结果是由访问标记中的 ACC_PUBLIC | ACC_SUPER 所得。ACC_SUPER 在 JDK 1.2 添加，默认类都会带上这个访问标记。</p>

<h2>当前类 - this_class</h2>

<p>两个字节的当前类标识，其地址为 0x218 - 0x219，内容为 0x000b。其内容表示的是在常量池中第 11 个，指向的内容为 class。通过查看之前的常量池表，可知其 class 的内容为 com/lighters/demo/Test。</p>

<h2>父类 - super_class</h2>

<p>其格式同上，可知其对应字节码的内容为 0x0009，在常量池表中针对的 class 内容为 java/lang/Object 。</p>

<h2>接口数量 - interfaces_count</h2>

<p>两个字节的表示，其地址为 0x21c - 0x21d，内容为 0x0000。表示当前类没有实现任何接口。</p>

<h2>接口 - interfaces[interfaces_count]</h2>

<p>这里描述的是 interfaces_count 的两个自己的接口描述。因为 interfaces_count 为零，所以这里不会有任何地址的指向。</p>

<h2>字段数量 - fields_count</h2>

<p>两字节的字段数量，字节码中对应地址为 0x21e - 0x21f，内容为 0x001。表示有个 1 字段。</p>

<h2>字段 - fields[fields_count]</h2>

<p>同样是有 fields_count 的 field_info，这里 fields_count 为 1， 我们只用分析一个即可，而 field_info 的格式如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">field_info</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">access_flags</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">name_index</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">descriptor_index</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">attributes_count</span><span class="o">;</span>
</span><span class='line'>    <span class="n">attribute_info</span> <span class="n">attributes</span><span class="o">[</span><span class="n">attributes_count</span><span class="o">];</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>第一项为两个字节的 access_flags ，字节码中对应的地址为 0x220 - 0x221，内容为 0x0002，而 acess_flags 对应的表结构定义如下；</p>

<p><img src="http://upload-images.jianshu.io/upload_images/656559-998d30425ca542be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Field access and property flags" /></p>

<p>所以，可知我们的字段为 private。接下来是两字节的 name_index，内容为 0x000c，对应常量表中的索引为 12，内容为 name。两字节的 descriptor_index，内容为 0x000d，对应常量表中的索引为13，内容为 Ljava/lang/String。</p>

<p>接下来则是 attributes_count，这里对应结果为 0，就不看了。</p>

<p>最终，我们可知道 Test 类中，有一个 private ，名称为 name，类型为 String的字段。而 attributes_count 为空，表示这里没有直接对其进行赋值。</p>

<h2>方法数量 - methods_count</h2>

<p>两个字节描述方法数量，字节码中地址为 0x228 - 0x229，其内容为 0x0002，表示两个方法。</p>

<h2>方法 - methods[methods_count]</h2>

<p>这里的方法则对应着 method_info 的的结构，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">method_info</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">access_flags</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">name_index</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">descriptor_index</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">attributes_count</span><span class="o">;</span>
</span><span class='line'>    <span class="n">attribute_info</span> <span class="n">attributes</span><span class="o">[</span><span class="n">attributes_count</span><span class="o">];</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的 method_info 跟 field_info 的结构相同。先看 <code>access_flags</code>，在字节码中其位置为 0x22a - 0x22b，相应内容为 0x0001。根据如下 method 的 access_flag 表，可知其相对应的为 public。</p>

<p><img src="http://upload-images.jianshu.io/upload_images/656559-881d90912e7d978c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Method access and property flags" /></p>

<p>接下来的 4 个字节是 0x000e 和 0x000f，分别指向常量池中 14 和 15，对应着 方法名称 <init> 和方法描述 (Ljava/lang/String;)V。</p>

<p>接下来的两个字节为 0x0001, 表示 attributes_count 为1。这就要分析一下 attribute_info 是什么内容？先看它的结构：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">attribute_info</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">u2</span> <span class="n">attribute_name_index</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u4</span> <span class="n">attribute_length</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u1</span> <span class="n">info</span><span class="o">[</span><span class="n">attribute_length</span><span class="o">];</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>两字节的 attribute_name_index 对应字节码表的位置为 0x232 - 0x233，表示的内容为 0x0010，其对应的是常量池的 utf8 的信息，索引内容为 16，表示相应的内容为 Code。其结构如下 ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Code_attribute</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">u2</span> <span class="n">attribute_name_index</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u4</span> <span class="n">attribute_length</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span> <span class="n">max_stack</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span> <span class="n">max_locals</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u4</span> <span class="n">code_length</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u1</span> <span class="n">code</span><span class="o">[</span><span class="n">code_length</span><span class="o">];</span>
</span><span class='line'>    <span class="n">u2</span> <span class="n">exception_table_length</span><span class="o">;</span>
</span><span class='line'>    <span class="o">{</span>   <span class="n">u2</span> <span class="n">start_pc</span><span class="o">;</span>
</span><span class='line'>        <span class="n">u2</span> <span class="n">end_pc</span><span class="o">;</span>
</span><span class='line'>        <span class="n">u2</span> <span class="n">handler_pc</span><span class="o">;</span>
</span><span class='line'>        <span class="n">u2</span> <span class="n">catch_type</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="n">exception_table</span><span class="o">[</span><span class="n">exception_table_length</span><span class="o">];</span>
</span><span class='line'>    <span class="n">u2</span> <span class="n">attributes_count</span><span class="o">;</span>
</span><span class='line'>    <span class="n">attribute_info</span> <span class="n">attributes</span><span class="o">[</span><span class="n">attributes_count</span><span class="o">];</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Code 主要用来描述方法的内部实现，其中会用指令来描述方法的运行状态，另外以及异常的信息等。但是 abstarct 与 native 的 method_info 并不会有 code_info。</p>

<p>这里的 method_info 信息我们通过之前的 javap 对 Test.class 文件输出的信息来进行查看，可以更加清晰明了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">com</span><span class="o">.</span><span class="na">lighters</span><span class="o">.</span><span class="na">demo</span><span class="o">.</span><span class="na">Test</span><span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span><span class="o">);</span>
</span><span class='line'>    <span class="nl">descriptor:</span> <span class="o">(</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">String</span><span class="o">;)</span><span class="n">V</span>
</span><span class='line'>    <span class="nl">flags:</span> <span class="n">ACC_PUBLIC</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>      <span class="n">stack</span><span class="o">=</span><span class="mi">2</span><span class="o">,</span> <span class="n">locals</span><span class="o">=</span><span class="mi">2</span><span class="o">,</span> <span class="n">args_size</span><span class="o">=</span><span class="mi">2</span>
</span><span class='line'>         <span class="mi">0</span><span class="o">:</span> <span class="n">aload_0</span>
</span><span class='line'>         <span class="mi">1</span><span class="o">:</span> <span class="n">invokespecial</span> <span class="err">#</span><span class="mi">1</span>                  <span class="c1">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span>
</span><span class='line'>         <span class="mi">4</span><span class="o">:</span> <span class="n">aload_0</span>
</span><span class='line'>         <span class="mi">5</span><span class="o">:</span> <span class="n">aload_1</span>
</span><span class='line'>         <span class="mi">6</span><span class="o">:</span> <span class="n">putfield</span>      <span class="err">#</span><span class="mi">2</span>                  <span class="c1">// Field name:Ljava/lang/String;</span>
</span><span class='line'>         <span class="mi">9</span><span class="o">:</span> <span class="k">return</span>
</span><span class='line'>      <span class="nl">LineNumberTable:</span>
</span><span class='line'>        <span class="n">line</span> <span class="mi">7</span><span class="o">:</span> <span class="mi">0</span>
</span><span class='line'>        <span class="n">line</span> <span class="mi">8</span><span class="o">:</span> <span class="mi">4</span>
</span><span class='line'>        <span class="n">line</span> <span class="mi">9</span><span class="o">:</span> <span class="mi">9</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sayHello</span><span class="o">();</span>
</span><span class='line'>    <span class="nl">descriptor:</span> <span class="o">()</span><span class="n">V</span>
</span><span class='line'>    <span class="nl">flags:</span> <span class="n">ACC_PUBLIC</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>      <span class="n">stack</span><span class="o">=</span><span class="mi">3</span><span class="o">,</span> <span class="n">locals</span><span class="o">=</span><span class="mi">1</span><span class="o">,</span> <span class="n">args_size</span><span class="o">=</span><span class="mi">1</span>
</span><span class='line'>         <span class="mi">0</span><span class="o">:</span> <span class="n">getstatic</span>     <span class="err">#</span><span class="mi">3</span>                  <span class="c1">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
</span><span class='line'>         <span class="mi">3</span><span class="o">:</span> <span class="k">new</span>           <span class="err">#</span><span class="mi">4</span>                  <span class="c1">// class java/lang/StringBuilder</span>
</span><span class='line'>         <span class="mi">6</span><span class="o">:</span> <span class="n">dup</span>
</span><span class='line'>         <span class="mi">7</span><span class="o">:</span> <span class="n">invokespecial</span> <span class="err">#</span><span class="mi">5</span>                  <span class="c1">// Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span>
</span><span class='line'>        <span class="mi">10</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">6</span>                  <span class="c1">// String Hello</span>
</span><span class='line'>        <span class="mi">12</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">7</span>                  <span class="c1">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span>
</span><span class='line'>        <span class="mi">15</span><span class="o">:</span> <span class="n">aload_0</span>
</span><span class='line'>        <span class="mi">16</span><span class="o">:</span> <span class="n">getfield</span>      <span class="err">#</span><span class="mi">2</span>                  <span class="c1">// Field name:Ljava/lang/String;</span>
</span><span class='line'>        <span class="mi">19</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">7</span>                  <span class="c1">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span>
</span><span class='line'>        <span class="mi">22</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">8</span>                  <span class="c1">// Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span>
</span><span class='line'>        <span class="mi">25</span><span class="o">:</span> <span class="n">iconst_0</span>
</span><span class='line'>        <span class="mi">26</span><span class="o">:</span> <span class="n">anewarray</span>     <span class="err">#</span><span class="mi">9</span>                  <span class="c1">// class java/lang/Object</span>
</span><span class='line'>        <span class="mi">29</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">10</span>                 <span class="c1">// Method java/io/PrintStream.printf:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintStream;</span>
</span><span class='line'>        <span class="mi">32</span><span class="o">:</span> <span class="n">pop</span>
</span><span class='line'>        <span class="mi">33</span><span class="o">:</span> <span class="k">return</span>
</span><span class='line'>      <span class="nl">LineNumberTable:</span>
</span><span class='line'>        <span class="n">line</span> <span class="mi">12</span><span class="o">:</span> <span class="mi">0</span>
</span><span class='line'>        <span class="n">line</span> <span class="mi">13</span><span class="o">:</span> <span class="mi">33</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出信息中的 Code 可以看出方法的操作栈最大深度为 2，内部变量为 2，之后便是以 1 个字节为单位的指令描述，这里就不对指定讲解了，可参照气候的注释进行理解。</p>

<p>在最后的 attributes 中，存放的是 LineNumberTable。它是做什么用的？当我们需要进行断点调试的时候，它便可以用来对应我们在源文件的方法代码位置，这样更方便我们定位代码错误位置。其格式如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">LineNumberTable_attribute</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">u2</span> <span class="n">attribute_name_index</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u4</span> <span class="n">attribute_length</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span> <span class="n">line_number_table_length</span><span class="o">;</span>
</span><span class='line'>    <span class="o">{</span>   <span class="n">u2</span> <span class="n">start_pc</span><span class="o">;</span>
</span><span class='line'>        <span class="n">u2</span> <span class="n">line_number</span><span class="o">;</span>  
</span><span class='line'>    <span class="o">}</span> <span class="n">line_number_table</span><span class="o">[</span><span class="n">line_number_table_length</span><span class="o">];</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中的 attribute_name_index，便是对应常量池索引为 17 的 LineNumberTable。主要研究 line_number_table 的数据结构：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">{</span>
</span><span class='line'>   <span class="n">u2</span> <span class="n">start_pc</span><span class="o">;</span>
</span><span class='line'>   <span class="n">u2</span> <span class="n">line_number</span><span class="o">;</span>   
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的 start_pc 表示针对在 Code 块的起始位置，而 line_number 则表示相对应的在源码中的行数。所以上面第一个方法，（类构造器 init ）输出 LineNumberTable ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nl">LineNumberTable:</span>
</span><span class='line'>  <span class="n">line</span> <span class="mi">7</span><span class="o">:</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">line</span> <span class="mi">8</span><span class="o">:</span> <span class="mi">4</span>
</span><span class='line'>  <span class="n">line</span> <span class="mi">9</span><span class="o">:</span> <span class="mi">9</span>
</span></code></pre></td></tr></table></div></figure>


<p>就相当好理解了，方法所在源码中的第 7 行对应在 Code info 块中的索引为 0；第 8 行对应 Code 中索引为 4；第 9 行对应 Code 中的索引为 9。</p>

<p>方法 <code>sayHello</code> 的格式同理，就不赘述了。有个小细节需要注意的是，在其 Code 中的索引 19 调用 invokevirtual 指令时，对应源文件中调用 <code>+</code> 操作符，可以在注释中，看到其相对应调用的是 <code>StringBuilder</code>对象的 <code>append</code> 方法。</p>

<p>说明了什么呢？当我们在调用 <code>+</code> 操作符时，编译器在进行编译的时候，会创建一个 <code>StringBuilder</code>对象，通过 <code>append</code> 方法进行相加操作。这样我们在多次使用 <code>+</code> 操作时，IDE 会给我们一个警告的提示，也就不足为怪了。</p>

<h2>附属属性数量 - attributes_count</h2>

<p>这里对应位置为 0x2ae- 0x2af，信息为 0x0001，表示为只存在 1 个 attribute。</p>

<h2>附属属性 - attributes[attributes_count]</h2>

<p>在 0x2b0 - 0x2b1 的信息为 0x0014，对应常量池的索引 20 的值，为 SourceFile。其结构如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">SourceFile_attribute</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">u2</span> <span class="n">attribute_name_index</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u4</span> <span class="n">attribute_length</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span> <span class="n">sourcefile_index</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可知接下来的 4 字节表示长度，为 2 ; 接下来的 2 字节表示源文件索引，值为 0x0015，对应常量池中的索引为 21 的值，为 Test.java。</p>

<h2>总结</h2>

<p>在根据主线 ClassFile 的结构表一一分析之后，字节码 <code>class</code> 文件终于被我们完整的看完了。当然其中一些细节如其他的 attribute 结构、Code 中相应的指令操作等，并没有去深入讲解，但是这并不妨碍我们对字节码（只闻其名，不知其人）产生一个更加深入而又完整的认识。我们只需编写出符合 JVM 规范的字节码文件，即可运行与 JVM 之上，像其他的语言如 JRuby、Scala、Kotlin等就是，不过它们使用的是特定的编译器。另外，需要提及的两个命令 javac 及 javap ，需要熟练使用。当然其中的指令操作还是需要去深入研究一番，这篇也有许多不足之处，也欢迎小伙伴一起深入探讨。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://book.douban.com/subject/24722612/">深入理解 Java 虚拟机 周志明著 第二版</a></li>
<li><a href="https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html">JVM Doc</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
