<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[alighters]]></title>
  <link href="http://alighters.github.io/blog/atom.xml" rel="self"/>
  <link href="http://alighters.github.io/blog/"/>
  <updated>2020-07-28T00:22:56+08:00</updated>
  <id>http://alighters.github.io/blog/</id>
  <author>
    <name><![CDATA[alighters]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Docker Config Ssr]]></title>
    <link href="http://alighters.github.io/blog/blog/2019/03/22/docker-config-ssr/"/>
    <updated>2019-03-22T14:24:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2019/03/22/docker-config-ssr</id>
    <content type="html"><![CDATA[<h2>安装 Docker</h2>

<p>具体针对自己的服务器，参照 <a href="https://docs.docker.com/install/overview/">Overview of Docker editions | Docker Documentation</a> 选择对应的版本进行安装</p>

<!-- more -->


<h2>创建用户组</h2>

<p>因为在 Docker 执行的用户，是非 root 的用户，所以这里需要创建一个 docker 的用户组。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo usermod -aG docker $user</span></code></pre></td></tr></table></div></figure>


<blockquote><p>需要退出登录，重新进入才会生效。</p></blockquote>

<h2>编写镜像</h2>

<p>创建一个目录，在目录下创建一个 <code>Dockerfile</code> 的文件</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Dockerfile for ShadowsocksR
</span><span class='line'># Copyright (C) 2018 - 2019 Teddysun &lt;i@teddysun.com&gt;
</span><span class='line'># Reference URL:
</span><span class='line'># https://github.com/shadowsocksrr/shadowsocksr
</span><span class='line'>
</span><span class='line'>FROM debian:stretch
</span><span class='line'>LABEL maintainer="david"
</span><span class='line'>
</span><span class='line'>RUN set -ex \
</span><span class='line'>        && apt-get update \
</span><span class='line'>        && apt-get install -y wget python libsodium-dev openssl \
</span><span class='line'>        && rm -rf /var/lib/apt/lists/* \
</span><span class='line'>        && wget -O /tmp/shadowsocksr-3.2.2.tar.gz https://github.com/shadowsocksrr/shadowsocksr/archive/3.2.2.tar.gz \
</span><span class='line'>        && tar zxf /tmp/shadowsocksr-3.2.2.tar.gz -C /tmp \
</span><span class='line'>        && mv /tmp/shadowsocksr-3.2.2/shadowsocks /usr/local/ \
</span><span class='line'>        && rm -fr /tmp/shadowsocksr-3.2.2 \
</span><span class='line'>        && rm -f /tmp/shadowsocksr-3.2.2.tar.gz
</span><span class='line'>
</span><span class='line'>COPY ./config_ssr.json /etc/shadowsocks-r/config.json
</span><span class='line'>VOLUME /etc/shadowsocks-r
</span><span class='line'>
</span><span class='line'>CMD ["/usr/local/shadowsocks/server.py", "-c", "/etc/shadowsocks-r/config.json" ]</span></code></pre></td></tr></table></div></figure>


<p>此目录下需要一个 config_ssr.json 的文件，用来配置 ssr 的参数：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    "server":"0.0.0.0",
</span><span class='line'>    "server_ipv6":"[::]",
</span><span class='line'>    "server_port":xxxxxx,
</span><span class='line'>    "local_address":"127.0.0.1",
</span><span class='line'>    "local_port":1080,
</span><span class='line'>    "password":"xxxxxx",
</span><span class='line'>    "timeout":120,
</span><span class='line'>    "method":"rc4-md5",
</span><span class='line'>    "protocol":"origin",
</span><span class='line'>    "protocol_param":"",
</span><span class='line'>    "obfs":"plain",
</span><span class='line'>    "obfs_param":"",
</span><span class='line'>    "redirect":"",
</span><span class='line'>    "dns_ipv6":false,
</span><span class='line'>    "fast_open":false,
</span><span class='line'>    "workers":1
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>这里的参数可参照，<a href="https://github.com/shadowsocksrr/shadowsocksr">https://github.com/shadowsocksrr/shadowsocksr</a> 进行设置。注意 server_port 与 password 的设置。</p>

<h2>创建镜像</h2>

<p>在当前目录下，执行如下命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker build -t shadowsocks:v1 .</span></code></pre></td></tr></table></div></figure>


<p>shadowsocks 为创建的服务名称，v1 表示的是版本，<code>.</code>指的是以当前的目录，为执行的上下文。</p>

<h2>创建容器</h2>

<p>可使用 <code>docker image ls</code> 来查看当前 docker 中的镜像。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker run -d -p 12345:12345 shadowsocks:v1</span></code></pre></td></tr></table></div></figure>


<p>-d 指定在后台创建, -p 指定的是端口的映射。这里是说将创建出来的 shadowsocks:v1 容器的端口 12345 映射至服务器的端口。</p>

<p>这样，便完成了 SSR 的服务创建，可自行测试服务是否正常工作了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RN 通信]]></title>
    <link href="http://alighters.github.io/blog/blog/2018/06/28/react-native-message-theory/"/>
    <updated>2018-06-28T16:28:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2018/06/28/react-native-message-theory</id>
    <content type="html"><![CDATA[<h2>JS 桥</h2>

<p>Android: Webkit 的 JavaScriptCore
ios: 自带的 javascriptcore</p>

<p>在 Android 的代码，其提供了一个 CatalystInstance 的接口，来做 JS 与 Native 的高度抽象的接口：</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">CatalystInstance</span>
</span><span class='line'>    <span class="kd">extends</span> <span class="n">MemoryPressureListener</span><span class="o">,</span> <span class="n">JSInstance</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">runJSBundle</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Returns the status of running the JS bundle; waits for an answer if runJSBundle is running</span>
</span><span class='line'>  <span class="kt">boolean</span> <span class="nf">hasRunJSBundle</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Return the source URL of the JS Bundle that was run, or {@code null} if no JS</span>
</span><span class='line'><span class="cm">   * bundle has been run yet.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="nd">@Nullable</span> <span class="n">String</span> <span class="nf">getSourceURL</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// This is called from java code, so it won&#39;t be stripped anyway, but proguard will rename it,</span>
</span><span class='line'>  <span class="c1">// which this prevents.</span>
</span><span class='line'>  <span class="nd">@Override</span> <span class="nd">@DoNotStrip</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">invokeCallback</span><span class="o">(</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">callbackID</span><span class="o">,</span>
</span><span class='line'>      <span class="n">NativeArray</span> <span class="n">arguments</span><span class="o">);</span>
</span><span class='line'>  <span class="nd">@DoNotStrip</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">callFunction</span><span class="o">(</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">module</span><span class="o">,</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">method</span><span class="o">,</span>
</span><span class='line'>      <span class="n">NativeArray</span> <span class="n">arguments</span><span class="o">);</span>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Destroys this catalyst instance, waiting for any other threads in ReactQueueConfiguration</span>
</span><span class='line'><span class="cm">   * (besides the UI thread) to finish running. Must be called from the UI thread so that we can</span>
</span><span class='line'><span class="cm">   * fully shut down other threads.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">destroy</span><span class="o">();</span>
</span><span class='line'>  <span class="kt">boolean</span> <span class="nf">isDestroyed</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Initialize all the native modules</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="nd">@VisibleForTesting</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">initialize</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ReactQueueConfiguration</span> <span class="nf">getReactQueueConfiguration</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">JavaScriptModule</span><span class="o">&gt;</span> <span class="n">T</span> <span class="nf">getJSModule</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">jsInterface</span><span class="o">);</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">NativeModule</span><span class="o">&gt;</span> <span class="kt">boolean</span> <span class="nf">hasNativeModule</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">nativeModuleInterface</span><span class="o">);</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">NativeModule</span><span class="o">&gt;</span> <span class="n">T</span> <span class="nf">getNativeModule</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">nativeModuleInterface</span><span class="o">);</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">JSIModule</span><span class="o">&gt;</span> <span class="n">T</span> <span class="nf">getJSIModule</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">jsiModuleInterface</span><span class="o">);</span>
</span><span class='line'>  <span class="n">Collection</span><span class="o">&lt;</span><span class="n">NativeModule</span><span class="o">&gt;</span> <span class="nf">getNativeModules</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * This method permits a CatalystInstance to extend the known</span>
</span><span class='line'><span class="cm">   * Native modules. This provided registry contains only the new modules to load.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">extendNativeModules</span><span class="o">(</span><span class="n">NativeModuleRegistry</span> <span class="n">modules</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Adds a idle listener for this Catalyst instance. The listener will receive notifications</span>
</span><span class='line'><span class="cm">   * whenever the bridge transitions from idle to busy and vice-versa, where the busy state is</span>
</span><span class='line'><span class="cm">   * defined as there being some non-zero number of calls to JS that haven&#39;t resolved via a</span>
</span><span class='line'><span class="cm">   * onBatchCompleted call. The listener should be purely passive and not affect application logic.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">addBridgeIdleDebugListener</span><span class="o">(</span><span class="n">NotThreadSafeBridgeIdleDebugListener</span> <span class="n">listener</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Removes a NotThreadSafeBridgeIdleDebugListener previously added with</span>
</span><span class='line'><span class="cm">   * {@link #addBridgeIdleDebugListener}</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">removeBridgeIdleDebugListener</span><span class="o">(</span><span class="n">NotThreadSafeBridgeIdleDebugListener</span> <span class="n">listener</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** This method registers the file path of an additional JS segment by its ID. */</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">registerSegment</span><span class="o">(</span><span class="kt">int</span> <span class="n">segmentId</span><span class="o">,</span> <span class="n">String</span> <span class="n">path</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@VisibleForTesting</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">setGlobalVariable</span><span class="o">(</span><span class="n">String</span> <span class="n">propName</span><span class="o">,</span> <span class="n">String</span> <span class="n">jsonValue</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Get the C pointer (as a long) to the JavaScriptCore context associated with this instance.</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * &lt;p&gt;Use the following pattern to ensure that the JS context is not cleared while you are using</span>
</span><span class='line'><span class="cm">   * it: JavaScriptContextHolder jsContext = reactContext.getJavaScriptContextHolder()</span>
</span><span class='line'><span class="cm">   * synchronized(jsContext) { nativeThingNeedingJsContext(jsContext.get()); }</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="n">JavaScriptContextHolder</span> <span class="nf">getJavaScriptContextHolder</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">addJSIModules</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">JSIModuleHolder</span><span class="o">&gt;</span> <span class="n">jsiModules</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中主要有 NativeModule 和 JSModule 获取的方法，并调用 JS 侧方法 invokeCallback 和 callFunction 方法。</p>

<h2>执行流程</h2>

<h4>1.构建 ReactNativeHost</h4>

<p>在 ReactNativeHost 中的 getPackages 方法中，我们需要传递实现的 ReactPackage 接口，接口中则定义了实现的 NativeModule 集合和 ViewManager 的集合。</p>

<h4>2.创建 ReactInstanceManger</h4>

<p>ReactNativeHost 是在 application 中提供获取的，而通过 ReactNativeHost 可以获取到 ReactInstanceManager 类，在创建 ReactInstanceManager 的过程中，会得到所有的 ReactPackage，将其保存在 ReactInstanceManager 类中。</p>

<blockquote><p>这里的 ReactPackage 的获取，会优先添加 CoreModulesPackage，其提供了 Android 基础的 Module功能，如 AndroidInfoModule、DeviceEventManageModule、UIManagerModule等。</p>

<p>这里的 UIManagerModule，则是来负责 UI 视图创建的 View 集合，并接受来自 View 的命令来操作更新 View。</p></blockquote>

<h4>3.ReactRootView 执行 startReactApplication</h4>

<p>在一个 RN 的 activity 中，其会在 onCreate 方法中，执行 ReactRootView 的创建工作，之后便是根据创建好的 ReactInstanceManager，来执行 ReactRootView 的 startReactApplication 的方法。</p>

<p>其中会调用 ReactInstanceManager 的 createReactContentInBackground 方法。这里会根据特定的 JS 来源，在一个新的线程执行 createReactContext 方法来创建一个ReactApplicationContext。</p>

<h4>4.createReactContext</h4>

<p>此方法中，首先会处理之前的 ReactPackages 来生成一个 NativeModuleRegistry，其是用来管理 NativeModule 并提供获取调用的功能。</p>

<p>紧接着，便是利用 CatalystInstanceImpl Builder 构造一个 CatalystInstance。在 CatalystInstanceImpl 的初始化方法中，其会利用传递过来的参数，调用 JNI 方法 initializeBridge，其会执行桥的初始化操作，如获取 NativeModule 至 JNI 中的 ModuleRegistry 中。</p>

<p>之后便是调用 CatalystInstance 的 runJSBundle 方法。其会执行 JSBundleLoader 的 loadScript 方法，这里又会调用回 CatalystInstanceImpl 中的几个提供的相关从 jni 中 load JS 内容的方法。这里主要来完成 JS 内容的加载。</p>

<h4>5.setupReactContext</h4>

<p>之后，在 NativeModulesQueueThread 上执行 setupReactContext 的方法，这里会执行 CatalyInstance 的 initalize，主要内容则是初始化所有的 NativeModule。</p>

<p>随之，便是调用 attachRootViewToInstance 方法，其参数为 ReactRootView 和 CatalystInstance。其中最主要的内容便是调用 ReactRootView 的 invokeJsEntryPoint :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="cm">/*package */</span> <span class="kt">void</span> <span class="nf">invokeJSEntryPoint</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mJSEntryPoint</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">defaultJSEntryPoint</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mJSEntryPoint</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中 defaultJsEntryPoint 方法，则是调用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Calls the default entry point into JS which is AppRegistry.runApplication()</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">defaultJSEntryPoint</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Systrace</span><span class="o">.</span><span class="na">beginSection</span><span class="o">(</span><span class="n">TRACE_TAG_REACT_JAVA_BRIDGE</span><span class="o">,</span> <span class="s">&quot;ReactRootView.runApplication&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">mReactInstanceManager</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="o">!</span><span class="n">mIsAttachedToInstance</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ReactContext</span> <span class="n">reactContext</span> <span class="o">=</span> <span class="n">mReactInstanceManager</span><span class="o">.</span><span class="na">getCurrentReactContext</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">reactContext</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">CatalystInstance</span> <span class="n">catalystInstance</span> <span class="o">=</span> <span class="n">reactContext</span><span class="o">.</span><span class="na">getCatalystInstance</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">WritableNativeMap</span> <span class="n">appParams</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">WritableNativeMap</span><span class="o">();</span>
</span><span class='line'>        <span class="n">appParams</span><span class="o">.</span><span class="na">putDouble</span><span class="o">(</span><span class="s">&quot;rootTag&quot;</span><span class="o">,</span> <span class="n">getRootViewTag</span><span class="o">());</span>
</span><span class='line'>        <span class="nd">@Nullable</span> <span class="n">Bundle</span> <span class="n">appProperties</span> <span class="o">=</span> <span class="n">getAppProperties</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">appProperties</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">appParams</span><span class="o">.</span><span class="na">putMap</span><span class="o">(</span><span class="s">&quot;initialProps&quot;</span><span class="o">,</span> <span class="n">Arguments</span><span class="o">.</span><span class="na">fromBundle</span><span class="o">(</span><span class="n">appProperties</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">getUIManagerType</span><span class="o">()</span> <span class="o">==</span> <span class="n">FABRIC</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">appParams</span><span class="o">.</span><span class="na">putBoolean</span><span class="o">(</span><span class="s">&quot;fabric&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">mShouldLogContentAppeared</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">String</span> <span class="n">jsAppModuleName</span> <span class="o">=</span> <span class="n">getJSModuleName</span><span class="o">();</span>
</span><span class='line'>        <span class="n">catalystInstance</span><span class="o">.</span><span class="na">getJSModule</span><span class="o">(</span><span class="n">AppRegistry</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">runApplication</span><span class="o">(</span><span class="n">jsAppModuleName</span><span class="o">,</span> <span class="n">appParams</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Systrace</span><span class="o">.</span><span class="na">endSection</span><span class="o">(</span><span class="n">TRACE_TAG_REACT_JAVA_BRIDGE</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看出，这里的关键内容便是将 rootTag、initialProps 参数内容，放置在 appParams 中，调用 JS 侧的对象 AppRegistry，并调用其 runApplication 方法，来完成 JS 端内容的调用。</p>

<h2>JS 调用 Native</h2>

<p>将 Native 的方法提供给 JS 来调用，</p>

<h3>1.步骤</h3>

<ul>
<li>1）Native 端定义实现 NativeModule 接口</li>
<li>2）将此 NativeModule 接口添加至 ReactPackage 中</li>
<li>3）JS 端在 NativeModule.js 中获取到指定的 Module 对象，根据提供的方法进行调用。</li>
</ul>


<h3>2.实现</h3>

<h4>1.获取 Native 对象</h4>

<p>在获取一个 Native 端提供的类、对象，通常系统的，我们都是通过 &lsquo;react-native&rsquo; 中获取，而我们自定义的模块则需要从 NativeModule 中获取，以 ToastAndroid 为例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">ToastAndroid</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react-native&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中，ToastAndroid 对应着 ToastAndroid.android.js，其文件中的 ToastAndroid 内容则是 RCTToastAndroid，其获取方式如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="p">{</span> <span class="nx">ToastAndroid</span><span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;NativeModule&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">RCTToastAndroid</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;NativeModules&#39;</span><span class="p">).</span><span class="nx">ToastAndroid</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>2.NativeModule 属性对象的赋值</h4>

<p>在 NativeModule.js 中，NativeModule 对象的生成过程中，其已经调用了 NativeModule 的 genModule 方法，生成了相应的 Module，并赋值了 NativeModule 对象。</p>

<p>其中 genModule 的参数为 ModuleConfig 和 moduleID 的数字类型值。ModuleConfig 的定义如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">type</span> <span class="nx">ModuleConfig</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>  <span class="nx">string</span><span class="p">,</span> <span class="cm">/* name */</span>
</span><span class='line'>  <span class="o">?</span><span class="nb">Object</span><span class="p">,</span> <span class="cm">/* constants */</span>
</span><span class='line'>  <span class="nb">Array</span><span class="o">&lt;</span><span class="nx">string</span><span class="o">&gt;</span><span class="p">,</span> <span class="cm">/* functions */</span>
</span><span class='line'>  <span class="nb">Array</span><span class="o">&lt;</span><span class="nx">number</span><span class="o">&gt;</span><span class="p">,</span> <span class="cm">/* promise method IDs */</span>
</span><span class='line'>  <span class="nb">Array</span><span class="o">&lt;</span><span class="nx">number</span><span class="o">&gt;</span><span class="p">,</span> <span class="cm">/* sync method IDs */</span>
</span><span class='line'><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>它包含了一个模块的名称、常量值、方法。其中 promise 及 sync 的方法采用方法数组索引来表示。
另外，moduleID 为 module 数组中的索引值。</p>

<p>而调用 genModule 方法，则是根据此 config 信息，生成一个对应的 module 对象：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="kr">const</span> <span class="p">[</span><span class="nx">moduleName</span><span class="p">,</span> <span class="nx">constants</span><span class="p">,</span> <span class="nx">methods</span><span class="p">,</span> <span class="nx">promiseMethods</span><span class="p">,</span> <span class="nx">syncMethods</span><span class="p">]</span> <span class="o">=</span> <span class="nx">config</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">constants</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">methods</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Module contents will be filled in lazily later</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="nx">moduleName</span> <span class="p">};</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">module</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>  <span class="nx">methods</span> <span class="o">&amp;&amp;</span> <span class="nx">methods</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">methodName</span><span class="p">,</span> <span class="nx">methodID</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">isPromise</span> <span class="o">=</span> <span class="nx">promiseMethods</span> <span class="o">&amp;&amp;</span> <span class="nx">arrayContains</span><span class="p">(</span><span class="nx">promiseMethods</span><span class="p">,</span> <span class="nx">methodID</span><span class="p">);</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">isSync</span> <span class="o">=</span> <span class="nx">syncMethods</span> <span class="o">&amp;&amp;</span> <span class="nx">arrayContains</span><span class="p">(</span><span class="nx">syncMethods</span><span class="p">,</span> <span class="nx">methodID</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">invariant</span><span class="p">(</span><span class="o">!</span><span class="nx">isPromise</span> <span class="o">||</span> <span class="o">!</span><span class="nx">isSync</span><span class="p">,</span> <span class="s1">&#39;Cannot have a method that is both async and a sync hook&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">methodType</span> <span class="o">=</span> <span class="nx">isPromise</span> <span class="o">?</span> <span class="s1">&#39;promise&#39;</span> <span class="o">:</span> <span class="nx">isSync</span> <span class="o">?</span> <span class="s1">&#39;sync&#39;</span> <span class="o">:</span> <span class="s1">&#39;async&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">module</span><span class="p">[</span><span class="nx">methodName</span><span class="p">]</span> <span class="o">=</span> <span class="nx">genMethod</span><span class="p">(</span><span class="nx">moduleID</span><span class="p">,</span> <span class="nx">methodID</span><span class="p">,</span> <span class="nx">methodType</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span><span class="nx">module</span><span class="p">,</span> <span class="nx">constants</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">__DEV__</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">BatchedBridge</span><span class="p">.</span><span class="nx">createDebugLookup</span><span class="p">(</span><span class="nx">moduleID</span><span class="p">,</span> <span class="nx">moduleName</span><span class="p">,</span> <span class="nx">methods</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="nx">moduleName</span><span class="p">,</span> <span class="nx">module</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>若是存在方法值，则会遍历方法，调用 genMethod 来生成方法对应的信息：</p>

<p>之后便是将其赋值给 NativeModule:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">info</span> <span class="o">=</span> <span class="nx">genModule</span><span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">moduleID</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">info</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">info</span><span class="p">.</span><span class="nx">module</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">NativeModules</span><span class="p">[</span><span class="nx">info</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="nx">info</span><span class="p">.</span><span class="nx">module</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>3.__fbBatchedBridgeConfig 的生成及赋值</h4>

<p>在上述2的步骤中，其中 config 数组信息对应着 bridgeConfig 的属性 remoteModuleConfig。而 bridgeConfig 则是 global.__fbBatchedBridgeConfig 的值。</p>

<p>这个值则是在 JS 引擎的 ProxyExecutor 执行 loadApplicationScript 中进行赋值的:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">void</span> <span class="nx">ProxyExecutor</span><span class="o">::</span><span class="nx">loadApplicationScript</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">std</span><span class="o">::</span><span class="nx">unique_ptr</span><span class="o">&lt;</span><span class="kr">const</span> <span class="nx">JSBigString</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">std</span><span class="o">::</span><span class="nx">string</span> <span class="nx">sourceURL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">folly</span><span class="o">::</span><span class="nx">dynamic</span> <span class="nx">nativeModuleConfig</span> <span class="o">=</span> <span class="nx">folly</span><span class="o">::</span><span class="nx">dynamic</span><span class="o">::</span><span class="nx">array</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nx">SystraceSection</span> <span class="nx">s</span><span class="p">(</span><span class="s2">&quot;collectNativeModuleDescriptions&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">auto</span> <span class="nx">moduleRegistry</span> <span class="o">=</span> <span class="nx">m_delegate</span><span class="o">-&gt;</span><span class="nx">getModuleRegistry</span><span class="p">();</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kr">const</span> <span class="nx">auto</span><span class="o">&amp;</span> <span class="nx">name</span> <span class="o">:</span> <span class="nx">moduleRegistry</span><span class="o">-&gt;</span><span class="nx">moduleNames</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">auto</span> <span class="nx">config</span> <span class="o">=</span> <span class="nx">moduleRegistry</span><span class="o">-&gt;</span><span class="nx">getConfig</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">nativeModuleConfig</span><span class="p">.</span><span class="nx">push_back</span><span class="p">(</span><span class="nx">config</span> <span class="o">?</span> <span class="nx">config</span><span class="o">-&gt;</span><span class="nx">config</span> <span class="o">:</span> <span class="nx">nullptr</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">folly</span><span class="o">::</span><span class="nx">dynamic</span> <span class="nx">config</span> <span class="o">=</span>
</span><span class='line'>    <span class="nx">folly</span><span class="o">::</span><span class="nx">dynamic</span><span class="o">::</span><span class="nx">object</span>
</span><span class='line'>    <span class="p">(</span><span class="s2">&quot;remoteModuleConfig&quot;</span><span class="p">,</span> <span class="nx">std</span><span class="o">::</span><span class="nx">move</span><span class="p">(</span><span class="nx">nativeModuleConfig</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nx">SystraceSection</span> <span class="nx">t</span><span class="p">(</span><span class="s2">&quot;setGlobalVariable&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">setGlobalVariable</span><span class="p">(</span>
</span><span class='line'>      <span class="s2">&quot;__fbBatchedBridgeConfig&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">folly</span><span class="o">::</span><span class="nx">make_unique</span><span class="o">&lt;</span><span class="nx">JSBigStdString</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">folly</span><span class="o">::</span><span class="nx">toJson</span><span class="p">(</span><span class="nx">config</span><span class="p">)));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">static</span> <span class="nx">auto</span> <span class="nx">loadApplicationScript</span> <span class="o">=</span>
</span><span class='line'>    <span class="nx">jni</span><span class="o">::</span><span class="nx">findClassStatic</span><span class="p">(</span><span class="nx">EXECUTOR_BASECLASS</span><span class="p">)</span><span class="o">-&gt;</span><span class="nx">getMethod</span><span class="o">&lt;</span><span class="k">void</span><span class="p">(</span><span class="nx">jstring</span><span class="p">)</span><span class="o">&gt;</span><span class="p">(</span><span class="s2">&quot;loadApplicationScript&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// The proxy ignores the script data passed in.</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">loadApplicationScript</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">m_executor</span><span class="p">.</span><span class="nx">get</span><span class="p">(),</span>
</span><span class='line'>    <span class="nx">jni</span><span class="o">::</span><span class="nx">make_jstring</span><span class="p">(</span><span class="nx">sourceURL</span><span class="p">).</span><span class="nx">get</span><span class="p">());</span>
</span><span class='line'>  <span class="c1">// We can get pending calls here to native but the queue will be drained when</span>
</span><span class='line'>  <span class="c1">// we launch the application.</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里利用 ExecutorDelegate 得到 ModuleRegistry，通过其获取到 moduleNames，进行遍历获取到每个 module 对应的 config 信息，将这些 config 信息放置在 nativeModuleConfig 数组中，并将其封装为 remoteModuleConfig 对象，调用 setGlobalVariable 方法，将此对象存放至名为 __fbBatchedBridgeConfig 的变量中。</p>

<h4>4.JNI NativeModule 的注册</h4>

<p>在上述过程中，就有个问题，NativeModule 是如何存在于 ModuleRegistry 中的?</p>

<p>首先暴露 JNI 相关的方法是在 OnLoad.cpp 的 JNI_OnLoad 方法中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>    <span class="nx">extern</span> <span class="s2">&quot;C&quot;</span> <span class="nx">JNIEXPORT</span> <span class="nx">jint</span> <span class="nx">JNI_OnLoad</span><span class="p">(</span><span class="nx">JavaVM</span> <span class="o">*</span><span class="nx">vm</span><span class="p">,</span> <span class="k">void</span> <span class="o">*</span><span class="nx">reserved</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">initialize</span><span class="p">(</span><span class="nx">vm</span><span class="p">,</span> <span class="p">[]</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">gloginit</span><span class="o">::</span><span class="nx">initialize</span><span class="p">();</span>
</span><span class='line'>          <span class="nx">JSCJavaScriptExecutorHolder</span><span class="o">::</span><span class="nx">registerNatives</span><span class="p">();</span>
</span><span class='line'>          <span class="nx">ProxyJavaScriptExecutorHolder</span><span class="o">::</span><span class="nx">registerNatives</span><span class="p">();</span>
</span><span class='line'>          <span class="nx">CatalystInstanceImpl</span><span class="o">::</span><span class="nx">registerNatives</span><span class="p">();</span>
</span><span class='line'>          <span class="nx">CxxModuleWrapperBase</span><span class="o">::</span><span class="nx">registerNatives</span><span class="p">();</span>
</span><span class='line'>          <span class="nx">CxxModuleWrapper</span><span class="o">::</span><span class="nx">registerNatives</span><span class="p">();</span>
</span><span class='line'>          <span class="nx">JCxxCallbackImpl</span><span class="o">::</span><span class="nx">registerNatives</span><span class="p">();</span>
</span><span class='line'>          <span class="nx">NativeArray</span><span class="o">::</span><span class="nx">registerNatives</span><span class="p">();</span>
</span><span class='line'>          <span class="nx">ReadableNativeArray</span><span class="o">::</span><span class="nx">registerNatives</span><span class="p">();</span>
</span><span class='line'>          <span class="nx">WritableNativeArray</span><span class="o">::</span><span class="nx">registerNatives</span><span class="p">();</span>
</span><span class='line'>          <span class="nx">NativeMap</span><span class="o">::</span><span class="nx">registerNatives</span><span class="p">();</span>
</span><span class='line'>          <span class="nx">ReadableNativeMap</span><span class="o">::</span><span class="nx">registerNatives</span><span class="p">();</span>
</span><span class='line'>          <span class="nx">WritableNativeMap</span><span class="o">::</span><span class="nx">registerNatives</span><span class="p">();</span>
</span><span class='line'>          <span class="nx">ReadableNativeMapKeySetIterator</span><span class="o">::</span><span class="nx">registerNatives</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span><span class="nx">ifdef</span> <span class="nx">WITH_INSPECTOR</span>
</span><span class='line'>          <span class="nx">JInspector</span><span class="o">::</span><span class="nx">registerNatives</span><span class="p">();</span>
</span><span class='line'><span class="err">#</span><span class="nx">endif</span>
</span><span class='line'>      <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>其调用了 CatalystInstanceImpl::registerNatives() 方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">void</span> <span class="nx">CatalystInstanceImpl</span><span class="o">::</span><span class="nx">registerNatives</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">registerHybrid</span><span class="p">({</span>
</span><span class='line'>                   <span class="nx">makeNativeMethod</span><span class="p">(</span><span class="s2">&quot;initHybrid&quot;</span><span class="p">,</span> <span class="nx">CatalystInstanceImpl</span><span class="o">::</span><span class="nx">initHybrid</span><span class="p">),</span>
</span><span class='line'>                   <span class="nx">makeNativeMethod</span><span class="p">(</span><span class="s2">&quot;initializeBridge&quot;</span><span class="p">,</span>
</span><span class='line'>                                    <span class="nx">CatalystInstanceImpl</span><span class="o">::</span><span class="nx">initializeBridge</span><span class="p">),</span>
</span><span class='line'>                   <span class="nx">makeNativeMethod</span><span class="p">(</span><span class="s2">&quot;jniExtendNativeModules&quot;</span><span class="p">,</span>
</span><span class='line'>                                    <span class="nx">CatalystInstanceImpl</span><span class="o">::</span><span class="nx">extendNativeModules</span><span class="p">),</span>
</span><span class='line'>                   <span class="nx">makeNativeMethod</span><span class="p">(</span><span class="s2">&quot;jniSetSourceURL&quot;</span><span class="p">,</span>
</span><span class='line'>                                    <span class="nx">CatalystInstanceImpl</span><span class="o">::</span><span class="nx">jniSetSourceURL</span><span class="p">),</span>
</span><span class='line'>                   <span class="nx">makeNativeMethod</span><span class="p">(</span><span class="s2">&quot;jniRegisterSegment&quot;</span><span class="p">,</span>
</span><span class='line'>                                    <span class="nx">CatalystInstanceImpl</span><span class="o">::</span><span class="nx">jniRegisterSegment</span><span class="p">),</span>
</span><span class='line'>                   <span class="nx">makeNativeMethod</span><span class="p">(</span><span class="s2">&quot;jniLoadScriptFromAssets&quot;</span><span class="p">,</span>
</span><span class='line'>                                    <span class="nx">CatalystInstanceImpl</span><span class="o">::</span><span class="nx">jniLoadScriptFromAssets</span><span class="p">),</span>
</span><span class='line'>                   <span class="nx">makeNativeMethod</span><span class="p">(</span><span class="s2">&quot;jniLoadScriptFromFile&quot;</span><span class="p">,</span>
</span><span class='line'>                                    <span class="nx">CatalystInstanceImpl</span><span class="o">::</span><span class="nx">jniLoadScriptFromFile</span><span class="p">),</span>
</span><span class='line'>                   <span class="nx">makeNativeMethod</span><span class="p">(</span><span class="s2">&quot;jniCallJSFunction&quot;</span><span class="p">,</span>
</span><span class='line'>                                    <span class="nx">CatalystInstanceImpl</span><span class="o">::</span><span class="nx">jniCallJSFunction</span><span class="p">),</span>
</span><span class='line'>                   <span class="nx">makeNativeMethod</span><span class="p">(</span><span class="s2">&quot;jniCallJSCallback&quot;</span><span class="p">,</span>
</span><span class='line'>                                    <span class="nx">CatalystInstanceImpl</span><span class="o">::</span><span class="nx">jniCallJSCallback</span><span class="p">),</span>
</span><span class='line'>                   <span class="nx">makeNativeMethod</span><span class="p">(</span><span class="s2">&quot;setGlobalVaeeriable&quot;</span><span class="p">,</span>
</span><span class='line'>                                    <span class="nx">CatalystInstanceImpl</span><span class="o">::</span><span class="nx">setGlobalVariable</span><span class="p">),</span>
</span><span class='line'>                   <span class="nx">makeNativeMethod</span><span class="p">(</span><span class="s2">&quot;getJavaScriptContext&quot;</span><span class="p">,</span>
</span><span class='line'>                                    <span class="nx">CatalystInstanceImpl</span><span class="o">::</span><span class="nx">getJavaScriptContext</span><span class="p">),</span>
</span><span class='line'>                   <span class="nx">makeNativeMethod</span><span class="p">(</span><span class="s2">&quot;jniHandleMemoryPressure&quot;</span><span class="p">,</span>
</span><span class='line'>                                    <span class="nx">CatalystInstanceImpl</span><span class="o">::</span><span class="nx">handleMemoryPressure</span><span class="p">),</span>
</span><span class='line'>                 <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">JNativeRunnable</span><span class="o">::</span><span class="nx">registerNatives</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到 CatalystInstanceImpl::initializeBridge 方法绑定为 initializeBridge JNI 方法，而此 JNI 方法的调用则是在初始化 CatalystInstanceImpl 的构造函数中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">private</span> <span class="nf">CatalystInstanceImpl</span><span class="o">(</span>
</span><span class='line'>      <span class="kd">final</span> <span class="n">ReactQueueConfigurationSpec</span> <span class="n">reactQueueConfigurationSpec</span><span class="o">,</span>
</span><span class='line'>      <span class="kd">final</span> <span class="n">JavaScriptExecutor</span> <span class="n">jsExecutor</span><span class="o">,</span>
</span><span class='line'>      <span class="kd">final</span> <span class="n">NativeModuleRegistry</span> <span class="n">nativeModuleRegistry</span><span class="o">,</span>
</span><span class='line'>      <span class="kd">final</span> <span class="n">JSBundleLoader</span> <span class="n">jsBundleLoader</span><span class="o">,</span>
</span><span class='line'>      <span class="n">NativeModuleCallExceptionHandler</span> <span class="n">nativeModuleCallExceptionHandler</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">ReactConstants</span><span class="o">.</span><span class="na">TAG</span><span class="o">,</span> <span class="s">&quot;Initializing React Xplat Bridge.&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mHybridData</span> <span class="o">=</span> <span class="n">initHybrid</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">mReactQueueConfiguration</span> <span class="o">=</span> <span class="n">ReactQueueConfigurationImpl</span><span class="o">.</span><span class="na">create</span><span class="o">(</span>
</span><span class='line'>        <span class="n">reactQueueConfigurationSpec</span><span class="o">,</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">NativeExceptionHandler</span><span class="o">());</span>
</span><span class='line'>    <span class="n">mBridgeIdleListeners</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CopyOnWriteArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>    <span class="n">mNativeModuleRegistry</span> <span class="o">=</span> <span class="n">nativeModuleRegistry</span><span class="o">;</span>
</span><span class='line'>    <span class="n">mJSModuleRegistry</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">JavaScriptModuleRegistry</span><span class="o">();</span>
</span><span class='line'>    <span class="n">mJSBundleLoader</span> <span class="o">=</span> <span class="n">jsBundleLoader</span><span class="o">;</span>
</span><span class='line'>    <span class="n">mNativeModuleCallExceptionHandler</span> <span class="o">=</span> <span class="n">nativeModuleCallExceptionHandler</span><span class="o">;</span>
</span><span class='line'>    <span class="n">mNativeModulesQueueThread</span> <span class="o">=</span> <span class="n">mReactQueueConfiguration</span><span class="o">.</span><span class="na">getNativeModulesQueueThread</span><span class="o">();</span>
</span><span class='line'>    <span class="n">mTraceListener</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">JSProfilerTraceListener</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">ReactConstants</span><span class="o">.</span><span class="na">TAG</span><span class="o">,</span> <span class="s">&quot;Initializing React Xplat Bridge before initializeBridge&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">initializeBridge</span><span class="o">(</span>
</span><span class='line'>      <span class="k">new</span> <span class="nf">BridgeCallback</span><span class="o">(</span><span class="k">this</span><span class="o">),</span>
</span><span class='line'>      <span class="n">jsExecutor</span><span class="o">,</span>
</span><span class='line'>      <span class="n">mReactQueueConfiguration</span><span class="o">.</span><span class="na">getJSQueueThread</span><span class="o">(),</span>
</span><span class='line'>      <span class="n">mNativeModulesQueueThread</span><span class="o">,</span>
</span><span class='line'>      <span class="n">mNativeModuleRegistry</span><span class="o">.</span><span class="na">getJavaModules</span><span class="o">(</span><span class="k">this</span><span class="o">),</span>
</span><span class='line'>      <span class="n">mNativeModuleRegistry</span><span class="o">.</span><span class="na">getCxxModules</span><span class="o">());</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">ReactConstants</span><span class="o">.</span><span class="na">TAG</span><span class="o">,</span> <span class="s">&quot;Initializing React Xplat Bridge after initializeBridge&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">mJavaScriptContextHolder</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">JavaScriptContextHolder</span><span class="o">(</span><span class="n">getJavaScriptContext</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中调用的 initializeBridge 调用的 Native 方法如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nl">CatalystInstanceImpl:</span><span class="o">:</span><span class="n">initializeBridge</span><span class="o">(</span>
</span><span class='line'>  <span class="nl">jni:</span><span class="o">:</span><span class="n">alias_ref</span> <span class="o">&lt;</span><span class="nl">ReactCallback:</span><span class="o">:</span><span class="n">javaobject</span><span class="o">&gt;</span> <span class="n">callback</span><span class="o">,</span>
</span><span class='line'>  <span class="c1">// This executor is actually a factory holder.</span>
</span><span class='line'>  <span class="n">JavaScriptExecutorHolder</span> <span class="o">*</span><span class="n">jseh</span><span class="o">,</span>
</span><span class='line'>  <span class="nl">jni:</span><span class="o">:</span><span class="n">alias_ref</span> <span class="o">&lt;</span><span class="nl">JavaMessageQueueThread:</span><span class="o">:</span><span class="n">javaobject</span><span class="o">&gt;</span> <span class="n">jsQueue</span><span class="o">,</span>
</span><span class='line'>  <span class="nl">jni:</span><span class="o">:</span><span class="n">alias_ref</span> <span class="o">&lt;</span><span class="nl">JavaMessageQueueThread:</span><span class="o">:</span><span class="n">javaobject</span><span class="o">&gt;</span> <span class="n">nativeModulesQueue</span><span class="o">,</span>
</span><span class='line'>  <span class="nl">jni:</span><span class="o">:</span><span class="n">alias_ref</span> <span class="o">&lt;</span><span class="nl">jni:</span><span class="o">:</span><span class="n">JCollection</span><span class="o">&lt;</span><span class="nl">JavaModuleWrapper:</span><span class="o">:</span><span class="n">javaobject</span><span class="o">&gt;::</span><span class="n">javaobject</span><span class="o">&gt;</span> <span class="n">javaModules</span><span class="o">,</span>
</span><span class='line'>  <span class="nl">jni:</span><span class="o">:</span><span class="n">alias_ref</span> <span class="o">&lt;</span><span class="nl">jni:</span><span class="o">:</span><span class="n">JCollection</span><span class="o">&lt;</span><span class="nl">ModuleHolder:</span><span class="o">:</span><span class="n">javaobject</span><span class="o">&gt;::</span><span class="n">javaobject</span><span class="o">&gt;</span> <span class="n">cxxModules</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">moduleMessageQueue_</span> <span class="o">=</span> <span class="nl">std:</span><span class="o">:</span><span class="n">make_shared</span><span class="o">&lt;</span><span class="n">JMessageQueueThread</span><span class="o">&gt;(</span><span class="n">nativeModulesQueue</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="n">moduleRegistry_</span> <span class="o">=</span> <span class="nl">std:</span><span class="o">:</span><span class="n">make_shared</span><span class="o">&lt;</span><span class="n">ModuleRegistry</span><span class="o">&gt;(</span>
</span><span class='line'>    <span class="n">buildNativeModuleList</span><span class="o">(</span>
</span><span class='line'>      <span class="nl">std:</span><span class="o">:</span><span class="n">weak_ptr</span><span class="o">&lt;</span><span class="n">Instance</span><span class="o">&gt;(</span><span class="n">instance_</span><span class="o">),</span>
</span><span class='line'>      <span class="n">javaModules</span><span class="o">,</span>
</span><span class='line'>      <span class="n">cxxModules</span><span class="o">,</span>
</span><span class='line'>      <span class="n">moduleMessageQueue_</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">instance_</span><span class="o">-&gt;</span><span class="n">initializeBridge</span><span class="o">(</span>
</span><span class='line'>    <span class="nl">folly:</span><span class="o">:</span><span class="n">make_unique</span><span class="o">&lt;</span><span class="n">JInstanceCallback</span><span class="o">&gt;(</span>
</span><span class='line'>      <span class="n">callback</span><span class="o">,</span>
</span><span class='line'>      <span class="n">moduleMessageQueue_</span><span class="o">),</span>
</span><span class='line'>    <span class="n">jseh</span><span class="o">-&gt;</span><span class="n">getExecutorFactory</span><span class="o">(),</span>
</span><span class='line'>    <span class="nl">folly:</span><span class="o">:</span><span class="n">make_unique</span><span class="o">&lt;</span><span class="n">JMessageQueueThread</span><span class="o">&gt;(</span><span class="n">jsQueue</span><span class="o">),</span>
</span><span class='line'>    <span class="n">moduleRegistry_</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中实现初始化了 moduleRegistry，这里调用了 buildNativeModuleList 方法，其对应这 ModuleRegistryBuilder 类：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nl">std:</span><span class="o">:</span><span class="n">vector</span> <span class="o">&lt;</span><span class="nl">std:</span><span class="o">:</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">NativeModule</span><span class="o">&gt;&gt;</span> <span class="nf">buildNativeModuleList</span><span class="o">(</span>
</span><span class='line'>  <span class="nl">std:</span><span class="o">:</span><span class="n">weak_ptr</span> <span class="o">&lt;</span><span class="n">Instance</span><span class="o">&gt;</span> <span class="n">winstance</span><span class="o">,</span>
</span><span class='line'>  <span class="nl">jni:</span><span class="o">:</span><span class="n">alias_ref</span> <span class="o">&lt;</span><span class="nl">jni:</span><span class="o">:</span><span class="n">JCollection</span><span class="o">&lt;</span><span class="nl">JavaModuleWrapper:</span><span class="o">:</span><span class="n">javaobject</span><span class="o">&gt;::</span><span class="n">javaobject</span><span class="o">&gt;</span> <span class="n">javaModules</span><span class="o">,</span>
</span><span class='line'>  <span class="nl">jni:</span><span class="o">:</span><span class="n">alias_ref</span> <span class="o">&lt;</span><span class="nl">jni:</span><span class="o">:</span><span class="n">JCollection</span><span class="o">&lt;</span><span class="nl">ModuleHolder:</span><span class="o">:</span><span class="n">javaobject</span><span class="o">&gt;::</span><span class="n">javaobject</span><span class="o">&gt;</span> <span class="n">cxxModules</span><span class="o">,</span>
</span><span class='line'>  <span class="nl">std:</span><span class="o">:</span><span class="n">shared_ptr</span> <span class="o">&lt;</span><span class="n">MessageQueueThread</span><span class="o">&gt;</span> <span class="n">moduleMessageQueue</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="nl">std:</span><span class="o">:</span><span class="n">vector</span> <span class="o">&lt;</span><span class="nl">std:</span><span class="o">:</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">NativeModule</span><span class="o">&gt;&gt;</span> <span class="n">modules</span><span class="o">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">javaModules</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kd">const</span> <span class="n">auto</span> <span class="o">&amp;</span><span class="n">jm</span> <span class="o">:</span> <span class="o">*</span><span class="n">javaModules</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">modules</span><span class="o">.</span><span class="na">emplace_back</span><span class="o">(</span><span class="nl">folly:</span><span class="o">:</span><span class="n">make_unique</span><span class="o">&lt;</span><span class="n">JavaNativeModule</span><span class="o">&gt;(</span>
</span><span class='line'>        <span class="n">winstance</span><span class="o">,</span> <span class="n">jm</span><span class="o">,</span> <span class="n">moduleMessageQueue</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">cxxModules</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kd">const</span> <span class="n">auto</span> <span class="o">&amp;</span><span class="n">cm</span> <span class="o">:</span> <span class="o">*</span><span class="n">cxxModules</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">modules</span><span class="o">.</span><span class="na">emplace_back</span><span class="o">(</span><span class="nl">folly:</span><span class="o">:</span><span class="n">make_unique</span><span class="o">&lt;</span><span class="n">CxxNativeModule</span><span class="o">&gt;(</span>
</span><span class='line'>        <span class="n">winstance</span><span class="o">,</span> <span class="n">cm</span><span class="o">-&gt;</span><span class="n">getName</span><span class="o">(),</span> <span class="n">cm</span><span class="o">-&gt;</span><span class="n">getProvider</span><span class="o">(),</span> <span class="n">moduleMessageQueue</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">modules</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里则会遍历 javaModules 和延迟加载的 cxxModules，全部存放于类型为 NativeModule 的数组中，由此得到 ModuleRegistry 中，这样便可生成 config 信息：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nl">folly:</span><span class="o">:</span><span class="n">Optional</span> <span class="o">&lt;</span><span class="n">ModuleConfig</span><span class="o">&gt;</span> <span class="nl">ModuleRegistry:</span><span class="o">:</span><span class="n">getConfig</span><span class="o">(</span><span class="kd">const</span> <span class="nl">std:</span><span class="o">:</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">SystraceSection</span> <span class="nf">s</span><span class="o">(</span><span class="s">&quot;ModuleRegistry::getConfig&quot;</span><span class="o">,</span> <span class="s">&quot;module&quot;</span><span class="o">,</span> <span class="n">name</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Initialize modulesByName_</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">modulesByName_</span><span class="o">.</span><span class="na">empty</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">modules_</span><span class="o">.</span><span class="na">empty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">moduleNames</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">modulesByName_</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">it</span> <span class="o">==</span> <span class="n">modulesByName_</span><span class="o">.</span><span class="na">end</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">unknownModules_</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="n">name</span><span class="o">)</span> <span class="o">!=</span> <span class="n">unknownModules_</span><span class="o">.</span><span class="na">end</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">nullptr</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">moduleNotFoundCallback_</span> <span class="o">||</span>
</span><span class='line'>        <span class="o">!</span><span class="n">moduleNotFoundCallback_</span><span class="o">(</span><span class="n">name</span><span class="o">)</span> <span class="o">||</span>
</span><span class='line'>        <span class="o">(</span><span class="n">it</span> <span class="o">=</span> <span class="n">modulesByName_</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="n">name</span><span class="o">))</span> <span class="o">==</span> <span class="n">modulesByName_</span><span class="o">.</span><span class="na">end</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">unknownModules_</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">nullptr</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">size_t</span> <span class="n">index</span> <span class="o">=</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">second</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">CHECK</span><span class="o">(</span><span class="n">index</span> <span class="o">&lt;</span> <span class="n">modules_</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
</span><span class='line'>  <span class="n">NativeModule</span> <span class="o">*</span><span class="n">module</span> <span class="o">=</span> <span class="n">modules_</span><span class="o">[</span><span class="n">index</span><span class="o">].</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// string name, object constants, array methodNames (methodId is index), [array promiseMethodIds], [array syncMethodIds]</span>
</span><span class='line'>  <span class="nl">folly:</span><span class="o">:</span><span class="n">dynamic</span> <span class="n">config</span> <span class="o">=</span> <span class="nl">folly:</span><span class="o">:</span><span class="nl">dynamic:</span><span class="o">:</span><span class="n">array</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="n">SystraceSection</span> <span class="nf">s_</span><span class="o">(</span><span class="s">&quot;getConstants&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="na">push_back</span><span class="o">(</span><span class="n">module</span><span class="o">-&gt;</span><span class="n">getConstants</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="n">SystraceSection</span> <span class="nf">s_</span><span class="o">(</span><span class="s">&quot;getMethods&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="nl">std:</span><span class="o">:</span><span class="n">vector</span> <span class="o">&lt;</span><span class="n">MethodDescriptor</span><span class="o">&gt;</span> <span class="n">methods</span> <span class="o">=</span> <span class="n">module</span><span class="o">-&gt;</span><span class="n">getMethods</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nl">folly:</span><span class="o">:</span><span class="n">dynamic</span> <span class="n">methodNames</span> <span class="o">=</span> <span class="nl">folly:</span><span class="o">:</span><span class="nl">dynamic:</span><span class="o">:</span><span class="n">array</span><span class="o">;</span>
</span><span class='line'>    <span class="nl">folly:</span><span class="o">:</span><span class="n">dynamic</span> <span class="n">promiseMethodIds</span> <span class="o">=</span> <span class="nl">folly:</span><span class="o">:</span><span class="nl">dynamic:</span><span class="o">:</span><span class="n">array</span><span class="o">;</span>
</span><span class='line'>    <span class="nl">folly:</span><span class="o">:</span><span class="n">dynamic</span> <span class="n">syncMethodIds</span> <span class="o">=</span> <span class="nl">folly:</span><span class="o">:</span><span class="nl">dynamic:</span><span class="o">:</span><span class="n">array</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">auto</span> <span class="o">&amp;</span><span class="n">descriptor</span> <span class="o">:</span> <span class="n">methods</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// TODO: #10487027 compare tags instead of doing string comparison?</span>
</span><span class='line'>      <span class="n">methodNames</span><span class="o">.</span><span class="na">push_back</span><span class="o">(</span><span class="nl">std:</span><span class="o">:</span><span class="n">move</span><span class="o">(</span><span class="n">descriptor</span><span class="o">.</span><span class="na">name</span><span class="o">));</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">descriptor</span><span class="o">.</span><span class="na">type</span> <span class="o">==</span> <span class="s">&quot;promise&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">promiseMethodIds</span><span class="o">.</span><span class="na">push_back</span><span class="o">(</span><span class="n">methodNames</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">descriptor</span><span class="o">.</span><span class="na">type</span> <span class="o">==</span> <span class="s">&quot;sync&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">syncMethodIds</span><span class="o">.</span><span class="na">push_back</span><span class="o">(</span><span class="n">methodNames</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">methodNames</span><span class="o">.</span><span class="na">empty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">config</span><span class="o">.</span><span class="na">push_back</span><span class="o">(</span><span class="nl">std:</span><span class="o">:</span><span class="n">move</span><span class="o">(</span><span class="n">methodNames</span><span class="o">));</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(!</span><span class="n">promiseMethodIds</span><span class="o">.</span><span class="na">empty</span><span class="o">()</span> <span class="o">||</span> <span class="o">!</span><span class="n">syncMethodIds</span><span class="o">.</span><span class="na">empty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">config</span><span class="o">.</span><span class="na">push_back</span><span class="o">(</span><span class="nl">std:</span><span class="o">:</span><span class="n">move</span><span class="o">(</span><span class="n">promiseMethodIds</span><span class="o">));</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">syncMethodIds</span><span class="o">.</span><span class="na">empty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">config</span><span class="o">.</span><span class="na">push_back</span><span class="o">(</span><span class="nl">std:</span><span class="o">:</span><span class="n">move</span><span class="o">(</span><span class="n">syncMethodIds</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="n">config</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="na">empty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// no constants or methods</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">nullptr</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">ModuleConfig</span><span class="o">{</span><span class="n">index</span><span class="o">,</span> <span class="n">config</span><span class="o">};</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其根据一个 name 值，从 modules 中获取到指定的 module，进行读取里面的值，得到 ModuleConfig 信息。</p>

<h4>5.调用方法的暴露</h4>

<p>这里提供了两个方法，来提供调用 Native 方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nl">ModuleRegistry:</span><span class="o">:</span><span class="n">callNativeMethod</span><span class="o">(</span><span class="n">unsigned</span> <span class="kt">int</span> <span class="n">moduleId</span><span class="o">,</span> <span class="n">unsigned</span> <span class="kt">int</span> <span class="n">methodId</span><span class="o">,</span>
</span><span class='line'>                                      <span class="nl">folly:</span><span class="o">:</span><span class="n">dynamic</span> <span class="o">&amp;&amp;</span><span class="n">params</span><span class="o">,</span> <span class="kt">int</span> <span class="n">callId</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">moduleId</span> <span class="o">&gt;=</span> <span class="n">modules_</span><span class="o">.</span><span class="na">size</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="nl">std:</span><span class="o">:</span><span class="n">runtime_error</span><span class="o">(</span>
</span><span class='line'>      <span class="nl">folly:</span><span class="o">:</span><span class="n">to</span><span class="o">&lt;</span><span class="nl">std:</span><span class="o">:</span><span class="n">string</span><span class="o">&gt;(</span><span class="s">&quot;moduleId &quot;</span><span class="o">,</span> <span class="n">moduleId</span><span class="o">,</span> <span class="s">&quot; out of range [0..&quot;</span><span class="o">,</span> <span class="n">modules_</span><span class="o">.</span><span class="na">size</span><span class="o">(),</span>
</span><span class='line'>                             <span class="s">&quot;)&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">modules_</span><span class="o">[</span><span class="n">moduleId</span><span class="o">]-&gt;</span><span class="n">invoke</span><span class="o">(</span><span class="n">methodId</span><span class="o">,</span> <span class="nl">std:</span><span class="o">:</span><span class="n">move</span><span class="o">(</span><span class="n">params</span><span class="o">),</span> <span class="n">callId</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">MethodCallResult</span>
</span><span class='line'><span class="nl">ModuleRegistry:</span><span class="o">:</span><span class="n">callSerializableNativeHook</span><span class="o">(</span><span class="n">unsigned</span> <span class="kt">int</span> <span class="n">moduleId</span><span class="o">,</span> <span class="n">unsigned</span> <span class="kt">int</span> <span class="n">methodId</span><span class="o">,</span>
</span><span class='line'>                                           <span class="nl">folly:</span><span class="o">:</span><span class="n">dynamic</span> <span class="o">&amp;&amp;</span><span class="n">params</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">moduleId</span> <span class="o">&gt;=</span> <span class="n">modules_</span><span class="o">.</span><span class="na">size</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="nl">std:</span><span class="o">:</span><span class="n">runtime_error</span><span class="o">(</span>
</span><span class='line'>      <span class="nl">folly:</span><span class="o">:</span><span class="n">to</span><span class="o">&lt;</span><span class="nl">std:</span><span class="o">:</span><span class="n">string</span><span class="o">&gt;(</span><span class="s">&quot;moduleId &quot;</span><span class="o">,</span> <span class="n">moduleId</span><span class="o">,</span> <span class="s">&quot;out of range [0..&quot;</span><span class="o">,</span> <span class="n">modules_</span><span class="o">.</span><span class="na">size</span><span class="o">(),</span>
</span><span class='line'>                             <span class="s">&quot;)&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">modules_</span><span class="o">[</span><span class="n">moduleId</span><span class="o">]-&gt;</span><span class="n">callSerializableNativeHook</span><span class="o">(</span><span class="n">methodId</span><span class="o">,</span> <span class="nl">std:</span><span class="o">:</span><span class="n">move</span><span class="o">(</span><span class="n">params</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这两个方法执行的是 module 对应的方法，对应类为 CxxNativeModule:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span>
</span><span class='line'><span class="nl">CxxNativeModule:</span><span class="o">:</span><span class="n">invoke</span><span class="o">(</span><span class="n">unsigned</span> <span class="kt">int</span> <span class="n">reactMethodId</span><span class="o">,</span> <span class="nl">folly:</span><span class="o">:</span><span class="n">dynamic</span> <span class="o">&amp;&amp;</span><span class="n">params</span><span class="o">,</span> <span class="kt">int</span> <span class="n">callId</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">reactMethodId</span> <span class="o">&gt;=</span> <span class="n">methods_</span><span class="o">.</span><span class="na">size</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="nl">std:</span><span class="o">:</span><span class="n">invalid_argument</span><span class="o">(</span><span class="nl">folly:</span><span class="o">:</span><span class="n">to</span><span class="o">&lt;</span><span class="nl">std:</span><span class="o">:</span><span class="n">string</span><span class="o">&gt;(</span><span class="s">&quot;methodId &quot;</span><span class="o">,</span> <span class="n">reactMethodId</span><span class="o">,</span>
</span><span class='line'>                                                       <span class="s">&quot; out of range [0..&quot;</span><span class="o">,</span>
</span><span class='line'>                                                       <span class="n">methods_</span><span class="o">.</span><span class="na">size</span><span class="o">(),</span> <span class="s">&quot;]&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(!</span><span class="n">params</span><span class="o">.</span><span class="na">isArray</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="nl">std:</span><span class="o">:</span><span class="n">invalid_argument</span><span class="o">(</span>
</span><span class='line'>      <span class="nl">folly:</span><span class="o">:</span><span class="n">to</span><span class="o">&lt;</span><span class="nl">std:</span><span class="o">:</span><span class="n">string</span><span class="o">&gt;(</span><span class="s">&quot;method parameters should be array, but are &quot;</span><span class="o">,</span>
</span><span class='line'>                             <span class="n">params</span><span class="o">.</span><span class="na">typeName</span><span class="o">()));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nl">CxxModule:</span><span class="o">:</span><span class="n">Callback</span> <span class="n">first</span><span class="o">;</span>
</span><span class='line'>  <span class="nl">CxxModule:</span><span class="o">:</span><span class="n">Callback</span> <span class="n">second</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">const</span> <span class="n">auto</span> <span class="o">&amp;</span><span class="n">method</span> <span class="o">=</span> <span class="n">methods_</span><span class="o">[</span><span class="n">reactMethodId</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(!</span><span class="n">method</span><span class="o">.</span><span class="na">func</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="nl">std:</span><span class="o">:</span><span class="n">runtime_error</span><span class="o">(</span><span class="nl">folly:</span><span class="o">:</span><span class="n">to</span><span class="o">&lt;</span><span class="nl">std:</span><span class="o">:</span><span class="n">string</span><span class="o">&gt;(</span><span class="s">&quot;Method &quot;</span><span class="o">,</span> <span class="n">method</span><span class="o">.</span><span class="na">name</span><span class="o">,</span>
</span><span class='line'>                                                    <span class="s">&quot; is synchronous but invoked asynchronously&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">params</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">method</span><span class="o">.</span><span class="na">callbacks</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="nl">std:</span><span class="o">:</span><span class="n">invalid_argument</span><span class="o">(</span><span class="nl">folly:</span><span class="o">:</span><span class="n">to</span><span class="o">&lt;</span><span class="nl">std:</span><span class="o">:</span><span class="n">string</span><span class="o">&gt;(</span><span class="s">&quot;Expected &quot;</span><span class="o">,</span> <span class="n">method</span><span class="o">.</span><span class="na">callbacks</span><span class="o">,</span>
</span><span class='line'>                                                       <span class="s">&quot; callbacks, but only &quot;</span><span class="o">,</span>
</span><span class='line'>                                                       <span class="n">params</span><span class="o">.</span><span class="na">size</span><span class="o">(),</span>
</span><span class='line'>                                                       <span class="s">&quot; parameters provided&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">callbacks</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">first</span> <span class="o">=</span> <span class="n">convertCallback</span><span class="o">(</span><span class="n">makeCallback</span><span class="o">(</span><span class="n">instance_</span><span class="o">,</span> <span class="n">params</span><span class="o">[</span><span class="n">params</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]));</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">callbacks</span> <span class="o">==</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">first</span> <span class="o">=</span> <span class="n">convertCallback</span><span class="o">(</span><span class="n">makeCallback</span><span class="o">(</span><span class="n">instance_</span><span class="o">,</span> <span class="n">params</span><span class="o">[</span><span class="n">params</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">2</span><span class="o">]));</span>
</span><span class='line'>    <span class="n">second</span> <span class="o">=</span> <span class="n">convertCallback</span><span class="o">(</span><span class="n">makeCallback</span><span class="o">(</span><span class="n">instance_</span><span class="o">,</span> <span class="n">params</span><span class="o">[</span><span class="n">params</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">params</span><span class="o">.</span><span class="na">resize</span><span class="o">(</span><span class="n">params</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="n">method</span><span class="o">.</span><span class="na">callbacks</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="n">messageQueueThread_</span><span class="o">-&gt;</span><span class="n">runOnQueue</span><span class="o">(</span>
</span><span class='line'>    <span class="o">[</span><span class="n">method</span><span class="o">,</span> <span class="n">params</span> <span class="o">=</span> <span class="nl">std:</span><span class="o">:</span><span class="n">move</span><span class="o">(</span><span class="n">params</span><span class="o">),</span> <span class="n">first</span><span class="o">,</span> <span class="n">second</span><span class="o">,</span> <span class="n">callId</span><span class="o">]()</span> <span class="o">{</span>
</span><span class='line'><span class="err">#</span><span class="n">ifdef</span> <span class="n">WITH_FBSYSTRACE</span>
</span><span class='line'>        <span class="nf">if</span> <span class="o">(</span><span class="n">callId</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">fbsystrace_end_async_flow</span><span class="o">(</span><span class="n">TRACE_TAG_REACT_APPS</span><span class="o">,</span> <span class="s">&quot;native&quot;</span><span class="o">,</span> <span class="n">callId</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'><span class="err">#</span><span class="n">endif</span>
</span><span class='line'>        <span class="n">SystraceSection</span> <span class="nf">s</span><span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">name</span><span class="o">.</span><span class="na">c_str</span><span class="o">());</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">method</span><span class="o">.</span><span class="na">func</span><span class="o">(</span><span class="nl">std:</span><span class="o">:</span><span class="n">move</span><span class="o">(</span><span class="n">params</span><span class="o">),</span> <span class="n">first</span><span class="o">,</span> <span class="n">second</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="kd">const</span> <span class="nl">facebook:</span><span class="o">:</span><span class="nl">xplat:</span><span class="o">:</span><span class="n">JsArgumentException</span> <span class="o">&amp;</span><span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">throw</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nl">std:</span><span class="o">:</span><span class="n">exception</span> <span class="o">&amp;</span><span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">LOG</span><span class="o">(</span><span class="n">ERROR</span><span class="o">)</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;std::exception. Method call &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">method</span><span class="o">.</span><span class="na">name</span><span class="o">.</span><span class="na">c_str</span><span class="o">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; failed: &quot;</span>
</span><span class='line'>                     <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="o">.</span><span class="na">what</span><span class="o">();</span>
</span><span class='line'>          <span class="nl">std:</span><span class="o">:</span><span class="n">terminate</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nl">std:</span><span class="o">:</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">error</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">LOG</span><span class="o">(</span><span class="n">ERROR</span><span class="o">)</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;std::string. Method call &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">method</span><span class="o">.</span><span class="na">name</span><span class="o">.</span><span class="na">c_str</span><span class="o">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; failed: &quot;</span>
</span><span class='line'>                     <span class="o">&lt;&lt;</span> <span class="n">error</span><span class="o">.</span><span class="na">c_str</span><span class="o">();</span>
</span><span class='line'>          <span class="nl">std:</span><span class="o">:</span><span class="n">terminate</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(...)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">LOG</span><span class="o">(</span><span class="n">ERROR</span><span class="o">)</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Method call &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">method</span><span class="o">.</span><span class="na">name</span><span class="o">.</span><span class="na">c_str</span><span class="o">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; failed. unknown error&quot;</span><span class="o">;</span>
</span><span class='line'>          <span class="nl">std:</span><span class="o">:</span><span class="n">terminate</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在 invoke 方法中，会解析参数，确定 callback 的数量，之后便是在指定的 MessageQueue 中执行方法的调用。同理：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">MethodCallResult</span>
</span><span class='line'><span class="nl">CxxNativeModule:</span><span class="o">:</span><span class="n">callSerializableNativeHook</span><span class="o">(</span><span class="n">unsigned</span> <span class="kt">int</span> <span class="n">hookId</span><span class="o">,</span> <span class="nl">folly:</span><span class="o">:</span><span class="n">dynamic</span> <span class="o">&amp;&amp;</span><span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">hookId</span> <span class="o">&gt;=</span> <span class="n">methods_</span><span class="o">.</span><span class="na">size</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="nl">std:</span><span class="o">:</span><span class="n">invalid_argument</span><span class="o">(</span>
</span><span class='line'>      <span class="nl">folly:</span><span class="o">:</span><span class="n">to</span><span class="o">&lt;</span><span class="nl">std:</span><span class="o">:</span><span class="n">string</span><span class="o">&gt;(</span><span class="s">&quot;methodId &quot;</span><span class="o">,</span> <span class="n">hookId</span><span class="o">,</span> <span class="s">&quot; out of range [0..&quot;</span><span class="o">,</span> <span class="n">methods_</span><span class="o">.</span><span class="na">size</span><span class="o">(),</span>
</span><span class='line'>                             <span class="s">&quot;]&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">const</span> <span class="n">auto</span> <span class="o">&amp;</span><span class="n">method</span> <span class="o">=</span> <span class="n">methods_</span><span class="o">[</span><span class="n">hookId</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(!</span><span class="n">method</span><span class="o">.</span><span class="na">syncFunc</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="nl">std:</span><span class="o">:</span><span class="n">runtime_error</span><span class="o">(</span>
</span><span class='line'>      <span class="nl">folly:</span><span class="o">:</span><span class="n">to</span><span class="o">&lt;</span><span class="nl">std:</span><span class="o">:</span><span class="n">string</span><span class="o">&gt;(</span><span class="s">&quot;Method &quot;</span><span class="o">,</span> <span class="n">method</span><span class="o">.</span><span class="na">name</span><span class="o">,</span>
</span><span class='line'>                             <span class="s">&quot; is asynchronous but invoked synchronously&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">method</span><span class="o">.</span><span class="na">syncFunc</span><span class="o">(</span><span class="nl">std:</span><span class="o">:</span><span class="n">move</span><span class="o">(</span><span class="n">args</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>callSerialiableNativeHook 则是进行方法同步的调用。</p>

<h2>Native 调用 JS</h2>

<p>将 JS 端定义的对象方法来提供给 Native 端调用。</p>

<h3>1.步骤</h3>

<ul>
<li>1）Native端声明定义一个实现 JavaScriptModule 接口的类</li>
<li>2) 在 JS 端，实现定义此 Module，并将此对象添加注册至 MessageQueue 中.</li>
</ul>


<p>在 MessageQueue.js 中，提供了两个用来注册 Module 的方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">registerCallableModule</span><span class="p">(</span><span class="nx">name</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">module</span><span class="o">:</span> <span class="nb">Object</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>以及懒加载方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">registerLazyCallableModule</span><span class="p">(</span><span class="nx">name</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">factory</span><span class="o">:</span> <span class="k">void</span> <span class="o">=&gt;</span> <span class="nb">Object</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2.实现</h3>

<h4>1.定义 JavaScriptModule</h4>

<p>在 Native 中定义了 <code>JavaScriptModule</code>，代表了在 JS 端定义的 JS 方法。</p>

<p>若需要调用 JS 端的方法时，使用 <code>CatalystInstance</code> 接口的 <code>getJSModule</code> 方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">JavaScriptModule</span><span class="o">&gt;</span> <span class="n">T</span> <span class="nf">getJSModule</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">jsInterface</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>如调用 <code>AppRegistry</code> 的 <code>runApplication</code> 方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">catalystInstance</span><span class="o">.</span><span class="na">getJSModule</span><span class="o">(</span><span class="n">AppRegistry</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">runApplication</span><span class="o">(</span><span class="n">jsAppModuleName</span><span class="o">,</span> <span class="n">appParams</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>2.调用过程</h4>

<p>获取 JavaScriptModule 的方法，则是在 JavaScriptModuleRegistry 了中，其对 JavaScriptModule 类的获取，做了缓存策略，这里使用了代理调用，来改变其方法的调用。具体便是通过 JavaScriptModuleInvocationHandler 的 invoke 方法，来通过 CatalystInstance 来完成真正 JS 方法的调用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="nd">@Nullable</span> <span class="n">Object</span> <span class="nf">invoke</span><span class="o">(</span><span class="n">Object</span> <span class="n">proxy</span><span class="o">,</span> <span class="n">Method</span> <span class="n">method</span><span class="o">,</span> <span class="nd">@Nullable</span> <span class="n">Object</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'><span class="n">NativeArray</span> <span class="n">jsArgs</span> <span class="o">=</span> <span class="n">args</span> <span class="o">!=</span> <span class="kc">null</span>
</span><span class='line'>  <span class="o">?</span> <span class="n">Arguments</span><span class="o">.</span><span class="na">fromJavaArgs</span><span class="o">(</span><span class="n">args</span><span class="o">)</span>
</span><span class='line'>  <span class="o">:</span> <span class="k">new</span> <span class="nf">WritableNativeArray</span><span class="o">();</span>
</span><span class='line'>  <span class="n">mCatalystInstance</span><span class="o">.</span><span class="na">callFunction</span><span class="o">(</span><span class="n">getJSModuleName</span><span class="o">(),</span> <span class="n">method</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span> <span class="n">jsArgs</span><span class="o">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于 CatalystInstance 在 C 层的实现，对应着 CatalystInstanceImpl.cpp 的类：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nl">CatalystInstanceImpl:</span><span class="o">:</span><span class="n">jniCallJSFunction</span><span class="o">(</span><span class="nl">std:</span><span class="o">:</span><span class="n">string</span> <span class="n">module</span><span class="o">,</span> <span class="nl">std:</span><span class="o">:</span><span class="n">string</span> <span class="n">method</span><span class="o">,</span> <span class="n">NativeArray</span><span class="o">*</span> <span class="n">arguments</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">instance_</span><span class="o">-&gt;</span><span class="n">callJSFunction</span><span class="o">(</span><span class="nl">std:</span><span class="o">:</span><span class="n">move</span><span class="o">(</span><span class="n">module</span><span class="o">),</span>
</span><span class='line'>                            <span class="nl">std:</span><span class="o">:</span><span class="n">move</span><span class="o">(</span><span class="n">method</span><span class="o">),</span>
</span><span class='line'>                            <span class="n">arguments</span><span class="o">-&gt;</span><span class="n">consume</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>instance_ 是指 Instance.cpp 类的实例，会调用到：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nl">Instance:</span><span class="o">:</span><span class="n">callJSFunction</span><span class="o">(</span><span class="nl">std:</span><span class="o">:</span><span class="n">string</span> <span class="o">&amp;&amp;</span><span class="n">module</span><span class="o">,</span> <span class="nl">std:</span><span class="o">:</span><span class="n">string</span> <span class="o">&amp;&amp;</span><span class="n">method</span><span class="o">,</span>
</span><span class='line'>                              <span class="nl">folly:</span><span class="o">:</span><span class="n">dynamic</span> <span class="o">&amp;&amp;</span><span class="n">params</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">callback_</span><span class="o">-&gt;</span><span class="n">incrementPendingJSCalls</span><span class="o">();</span>
</span><span class='line'>  <span class="n">nativeToJsBridge_</span><span class="o">-&gt;</span><span class="n">callFunction</span><span class="o">(</span><span class="nl">std:</span><span class="o">:</span><span class="n">move</span><span class="o">(</span><span class="n">module</span><span class="o">),</span> <span class="nl">std:</span><span class="o">:</span><span class="n">move</span><span class="o">(</span><span class="n">method</span><span class="o">),</span>
</span><span class='line'>                                  <span class="nl">std:</span><span class="o">:</span><span class="n">move</span><span class="o">(</span><span class="n">params</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其调用的便是 NativeToJsBridge.cpp 的 callFunction 方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nl">NativeToJsBridge:</span><span class="o">:</span><span class="n">callFunction</span><span class="o">(</span>
</span><span class='line'>    <span class="nl">std:</span><span class="o">:</span><span class="n">string</span><span class="o">&amp;&amp;</span> <span class="n">module</span><span class="o">,</span>
</span><span class='line'>    <span class="nl">std:</span><span class="o">:</span><span class="n">string</span><span class="o">&amp;&amp;</span> <span class="n">method</span><span class="o">,</span>
</span><span class='line'>    <span class="nl">folly:</span><span class="o">:</span><span class="n">dynamic</span><span class="o">&amp;&amp;</span> <span class="n">arguments</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">systraceCookie</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">runOnExecutorQueue</span><span class="o">([</span><span class="n">module</span> <span class="o">=</span> <span class="nl">std:</span><span class="o">:</span><span class="n">move</span><span class="o">(</span><span class="n">module</span><span class="o">),</span> <span class="n">method</span> <span class="o">=</span> <span class="nl">std:</span><span class="o">:</span><span class="n">move</span><span class="o">(</span><span class="n">method</span><span class="o">),</span> <span class="n">arguments</span> <span class="o">=</span> <span class="nl">std:</span><span class="o">:</span><span class="n">move</span><span class="o">(</span><span class="n">arguments</span><span class="o">),</span> <span class="n">systraceCookie</span><span class="o">]</span>
</span><span class='line'>    <span class="o">(</span><span class="n">JSExecutor</span><span class="o">*</span> <span class="n">executor</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="o">...</span>
</span><span class='line'>       <span class="c1">// This is safe because we are running on the executor&#39;s thread: it won&#39;t</span>
</span><span class='line'>      <span class="c1">// destruct until after it&#39;s been unregistered (which we check above) and</span>
</span><span class='line'>      <span class="c1">// that will happen on this thread</span>
</span><span class='line'>      <span class="n">executor</span><span class="o">-&gt;</span><span class="n">callFunction</span><span class="o">(</span><span class="n">module</span><span class="o">,</span> <span class="n">method</span><span class="o">,</span> <span class="n">arguments</span><span class="o">);</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>而 executor 便指的是 JSCExecutor.cpp 类：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kt">void</span> <span class="nl">JSCExecutor:</span><span class="o">:</span><span class="n">callFunction</span><span class="o">(</span><span class="kd">const</span> <span class="nl">std:</span><span class="o">:</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">moduleId</span><span class="o">,</span> <span class="kd">const</span> <span class="nl">std:</span><span class="o">:</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">methodId</span><span class="o">,</span> <span class="kd">const</span> <span class="nl">folly:</span><span class="o">:</span><span class="n">dynamic</span><span class="o">&amp;</span> <span class="n">arguments</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">SystraceSection</span> <span class="nf">s</span><span class="o">(</span><span class="s">&quot;JSCExecutor::callFunction&quot;</span><span class="o">);</span>
</span><span class='line'>   <span class="c1">// This weird pattern is because Value is not default constructible.</span>
</span><span class='line'>   <span class="c1">// The lambda is inlined, so there&#39;s no overhead.</span>
</span><span class='line'>   <span class="n">auto</span> <span class="n">result</span> <span class="o">=</span> <span class="o">[&amp;]</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">JSContextLock</span> <span class="nf">lock</span><span class="o">(</span><span class="n">m_context</span><span class="o">);</span>
</span><span class='line'>     <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">if</span> <span class="o">(!</span><span class="n">m_callFunctionReturnResultAndFlushedQueueJS</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">bindBridge</span><span class="o">();</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>       <span class="k">return</span> <span class="n">m_callFunctionReturnFlushedQueueJS</span><span class="o">-&gt;</span><span class="n">callAsFunction</span><span class="o">({</span>
</span><span class='line'>         <span class="n">Value</span><span class="o">(</span><span class="n">m_context</span><span class="o">,</span> <span class="nl">String:</span><span class="o">:</span><span class="n">createExpectingAscii</span><span class="o">(</span><span class="n">m_context</span><span class="o">,</span> <span class="n">moduleId</span><span class="o">)),</span>
</span><span class='line'>         <span class="n">Value</span><span class="o">(</span><span class="n">m_context</span><span class="o">,</span> <span class="nl">String:</span><span class="o">:</span><span class="n">createExpectingAscii</span><span class="o">(</span><span class="n">m_context</span><span class="o">,</span> <span class="n">methodId</span><span class="o">)),</span>
</span><span class='line'>         <span class="nl">Value:</span><span class="o">:</span><span class="n">fromDynamic</span><span class="o">(</span><span class="n">m_context</span><span class="o">,</span> <span class="nl">std:</span><span class="o">:</span><span class="n">move</span><span class="o">(</span><span class="n">arguments</span><span class="o">))</span>
</span><span class='line'>       <span class="o">});</span>
</span><span class='line'>     <span class="o">}</span> <span class="k">catch</span> <span class="o">(...)</span> <span class="o">{</span>
</span><span class='line'>       <span class="nl">std:</span><span class="o">:</span><span class="n">throw_with_nested</span><span class="o">(</span>
</span><span class='line'>                              <span class="nl">std:</span><span class="o">:</span><span class="n">runtime_error</span><span class="o">(</span><span class="s">&quot;Error calling &quot;</span> <span class="o">+</span> <span class="n">moduleId</span> <span class="o">+</span> <span class="s">&quot;.&quot;</span> <span class="o">+</span> <span class="n">methodId</span><span class="o">));</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'>   <span class="o">}();</span>
</span><span class='line'>   <span class="n">callNativeModules</span><span class="o">(</span><span class="nl">std:</span><span class="o">:</span><span class="n">move</span><span class="o">(</span><span class="n">result</span><span class="o">));</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中的 m_callFunctionReturnResultAndFlushedQueueJS 是在 bindBridge 过程中，从 JS 全局对象 <code>__fbBatchedBridge</code> 中进行获取读到的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kt">void</span> <span class="nl">JSCExecutor:</span><span class="o">:</span><span class="n">bindBridge</span><span class="o">()</span> <span class="k">throw</span><span class="o">(</span><span class="n">JSException</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">SystraceSection</span> <span class="nf">s</span><span class="o">(</span><span class="s">&quot;JSCExecutor::bindBridge&quot;</span><span class="o">);</span>
</span><span class='line'>   <span class="nl">std:</span><span class="o">:</span><span class="n">call_once</span><span class="o">(</span><span class="n">m_bindFlag</span><span class="o">,</span> <span class="o">[</span><span class="k">this</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">auto</span> <span class="n">global</span> <span class="o">=</span> <span class="nl">Object:</span><span class="o">:</span><span class="n">getGlobalObject</span><span class="o">(</span><span class="n">m_context</span><span class="o">);</span>
</span><span class='line'>     <span class="n">auto</span> <span class="n">batchedBridgeValue</span> <span class="o">=</span> <span class="n">global</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;__fbBatchedBridge&quot;</span><span class="o">);</span>
</span><span class='line'>     <span class="k">if</span> <span class="o">(</span><span class="n">batchedBridgeValue</span><span class="o">.</span><span class="na">isUndefined</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">auto</span> <span class="n">requireBatchedBridge</span> <span class="o">=</span> <span class="n">global</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;__fbRequireBatchedBridge&quot;</span><span class="o">);</span>
</span><span class='line'>       <span class="k">if</span> <span class="o">(!</span><span class="n">requireBatchedBridge</span><span class="o">.</span><span class="na">isUndefined</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">batchedBridgeValue</span> <span class="o">=</span> <span class="n">requireBatchedBridge</span><span class="o">.</span><span class="na">asObject</span><span class="o">().</span><span class="na">callAsFunction</span><span class="o">({});</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>       <span class="k">if</span> <span class="o">(</span><span class="n">batchedBridgeValue</span><span class="o">.</span><span class="na">isUndefined</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>         <span class="k">throw</span> <span class="nf">JSException</span><span class="o">(</span><span class="s">&quot;Could not get BatchedBridge, make sure your bundle is packaged correctly&quot;</span><span class="o">);</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>     <span class="n">auto</span> <span class="n">batchedBridge</span> <span class="o">=</span> <span class="n">batchedBridgeValue</span><span class="o">.</span><span class="na">asObject</span><span class="o">();</span>
</span><span class='line'>     <span class="n">m_callFunctionReturnFlushedQueueJS</span> <span class="o">=</span> <span class="n">batchedBridge</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;callFunctionReturnFlushedQueue&quot;</span><span class="o">).</span><span class="na">asObject</span><span class="o">();</span>
</span><span class='line'>     <span class="n">m_invokeCallbackAndReturnFlushedQueueJS</span> <span class="o">=</span> <span class="n">batchedBridge</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;invokeCallbackAndReturnFlushedQueue&quot;</span><span class="o">).</span><span class="na">asObject</span><span class="o">();</span>
</span><span class='line'>     <span class="n">m_flushedQueueJS</span> <span class="o">=</span> <span class="n">batchedBridge</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;flushedQueue&quot;</span><span class="o">).</span><span class="na">asObject</span><span class="o">();</span>
</span><span class='line'>     <span class="n">m_callFunctionReturnResultAndFlushedQueueJS</span> <span class="o">=</span> <span class="n">batchedBridge</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;callFunctionReturnResultAndFlushedQueue&quot;</span><span class="o">).</span><span class="na">asObject</span><span class="o">();</span>
</span><span class='line'>   <span class="o">});</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>而此 __fbBatchedBridge 的定义则是在 JS 端的 BatchedBridge.js 文件中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">MessageQueue</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;MessageQueue&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">BatchedBridge</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MessageQueue</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Wire up the batched bridge on the global object so that we can call into it.</span>
</span><span class='line'><span class="c1">// Ideally, this would be the inverse relationship. I.e. the native environment</span>
</span><span class='line'><span class="c1">// provides this global directly with its script embedded. Then this module</span>
</span><span class='line'><span class="c1">// would export it. A possible fix would be to trim the dependencies in</span>
</span><span class='line'><span class="c1">// MessageQueue to its minimal features and embed that in the native runtime.</span>
</span><span class='line'>
</span><span class='line'><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">global</span><span class="p">,</span> <span class="s1">&#39;__fbBatchedBridge&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">configurable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">value</span><span class="o">:</span> <span class="nx">BatchedBridge</span><span class="p">,</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">BatchedBridge</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里其值则是对应着 MessageQueue，其管理着 JS 端的 function 的注册调用逻辑，其中<code>callFunctionReturnResultAndFlushedQueue</code> ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="nx">callFunctionReturnFlushedQueue</span><span class="p">(</span><span class="nx">module</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">method</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">args</span><span class="o">:</span> <span class="nx">any</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">__guard</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">__callFunction</span><span class="p">(</span><span class="nx">module</span><span class="p">,</span> <span class="nx">method</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">flushedQueue</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>__callFunction</code> 方法的调用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">__callFunction</span><span class="p">(</span><span class="nx">module</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">method</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">args</span><span class="o">:</span> <span class="nx">any</span><span class="p">[])</span><span class="o">:</span> <span class="nx">any</span> <span class="p">{</span>
</span><span class='line'> <span class="k">this</span><span class="p">.</span><span class="nx">_lastFlush</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getTime</span><span class="p">();</span>
</span><span class='line'> <span class="k">this</span><span class="p">.</span><span class="nx">_eventLoopStartTime</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_lastFlush</span><span class="p">;</span>
</span><span class='line'> <span class="nx">Systrace</span><span class="p">.</span><span class="nx">beginEvent</span><span class="p">(</span><span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="nx">module</span><span class="p">}.</span><span class="nx">$</span><span class="p">{</span><span class="nx">method</span><span class="p">}()</span><span class="err">`</span><span class="p">);</span>
</span><span class='line'> <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">__spy</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">this</span><span class="p">.</span><span class="nx">__spy</span><span class="p">({</span><span class="nx">type</span><span class="o">:</span> <span class="nx">TO_JS</span><span class="p">,</span> <span class="nx">module</span><span class="p">,</span> <span class="nx">method</span><span class="p">,</span> <span class="nx">args</span><span class="p">});</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'> <span class="kr">const</span> <span class="nx">moduleMethods</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getCallableModule</span><span class="p">(</span><span class="nx">module</span><span class="p">);</span>
</span><span class='line'> <span class="nx">invariant</span><span class="p">(</span>
</span><span class='line'>   <span class="o">!!</span><span class="nx">moduleMethods</span><span class="p">,</span>
</span><span class='line'>   <span class="s1">&#39;Module %s is not a registered callable module (calling %s)&#39;</span><span class="p">,</span>
</span><span class='line'>   <span class="nx">module</span><span class="p">,</span>
</span><span class='line'>   <span class="nx">method</span><span class="p">,</span>
</span><span class='line'> <span class="p">);</span>
</span><span class='line'> <span class="nx">invariant</span><span class="p">(</span>
</span><span class='line'>   <span class="o">!!</span><span class="nx">moduleMethods</span><span class="p">[</span><span class="nx">method</span><span class="p">],</span>
</span><span class='line'>   <span class="s1">&#39;Method %s does not exist on module %s&#39;</span><span class="p">,</span>
</span><span class='line'>   <span class="nx">method</span><span class="p">,</span>
</span><span class='line'>   <span class="nx">module</span><span class="p">,</span>
</span><span class='line'> <span class="p">);</span>
</span><span class='line'> <span class="kr">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">moduleMethods</span><span class="p">[</span><span class="nx">method</span><span class="p">].</span><span class="nx">apply</span><span class="p">(</span><span class="nx">moduleMethods</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span>
</span><span class='line'> <span class="nx">Systrace</span><span class="p">.</span><span class="nx">endEvent</span><span class="p">();</span>
</span><span class='line'> <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中的 getCallableModule 则是从 _lazyCallableModules 中进行获取，其注册则是通过 <code>registerCallableModule</code> 方法。以 <code>AppRegistry.js</code> 为例，在其文件的末尾则是调用了 BatchedBridge 进行注册：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">BatchedBridge</span><span class="p">.</span><span class="nx">registerCallableModule</span><span class="p">(</span><span class="s1">&#39;AppRegistry&#39;</span><span class="p">,</span> <span class="nx">AppRegistry</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LeakCanary 浅析]]></title>
    <link href="http://alighters.github.io/blog/blog/2018/03/16/leakcanary-learn/"/>
    <updated>2018-03-16T16:46:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2018/03/16/leakcanary-learn</id>
    <content type="html"><![CDATA[<h2>内存分析工具</h2>

<p>关于内存分析，在 LeakCanary 之前，可以用到的工具主要以 MAT 为主，在新版的 AS 3.0 中，又提供了 Memory Profiler，可进一步帮助我们定位内存出现的问题。</p>

<!-- more -->


<blockquote><p><a href="https://developer.android.com/studio/profile/memory-profiler.html#HeapDump">Memory Profiler</a>
<a href="https://developer.android.com/studio/preview/features/android-profiler.html">Android Profiler in Android Studio 3.0</a></p>

<p><a href="https://joyrun.github.io/2016/08/08/AndroidMemoryLeak/">利用Android Studio、MAT对Android进行内存泄漏检测 - 悦跑圈技术团队的博客 | Joyrun&rsquo;s Blog</a></p>

<p><a href="https://developer.android.com/studio/profile/memory-profiler.html">View the Java Heap and Memory Allocations with Memory Profiler | Android Studio</a></p></blockquote>

<h2>原理描述</h2>

<p>其监听了 Application 中的 activityLifeCallback，在此会对得到的 activity 添加弱引用的方式，根据其特点来判断是否发生泄露。当泄露时，则 dump 出一份内存快照，得到 hprof 数据，再利用 square 的 haha 库，在另外的进程中，进行解析并显示。</p>

<h2>主要流程</h2>

<h3>1.类的定位</h3>

<p>在 Android 的 application onCreate 时，我们一般会调用 LeakCanary 的 install 方法，其所作的工作：</p>

<ul>
<li>1.通过 application 生成一个 AndroidRefWatcherBuilder</li>
<li>2.注册监听的 service 为 DisplayLeakService</li>
<li>3.设置排除的引用 AndroidExcludedRefs</li>
<li>4.调用 AndroidRefWatcherBuilder 的 buildAndInstall 方法，其会调用到 ActivityRefWatcher 的 install 方法：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">install</span><span class="o">(</span><span class="n">Application</span> <span class="n">application</span><span class="o">,</span> <span class="n">RefWatcher</span> <span class="n">refWatcher</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">ActivityRefWatcher</span><span class="o">(</span><span class="n">application</span><span class="o">,</span> <span class="n">refWatcher</span><span class="o">).</span><span class="na">watchActivities</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其会构造出 ActivityRefWatcher，然后调用其 watchActivities 方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">watchActivities</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Make sure you don&#39;t get installed twice.</span>
</span><span class='line'>    <span class="n">stopWatchingActivities</span><span class="o">();</span>
</span><span class='line'>    <span class="n">application</span><span class="o">.</span><span class="na">registerActivityLifecycleCallbacks</span><span class="o">(</span><span class="n">lifecycleCallbacks</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里主要的工作便是给 application 注册 ActivityLifecycleCallbacks，此类主要重写了 Application.ActivityLifecycleCallbacks 的 onActivityDestoryed 方法:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onActivityDestroyed</span><span class="o">(</span><span class="n">Activity</span> <span class="n">activity</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'> <span class="n">ActivityRefWatcher</span><span class="o">.</span><span class="na">this</span><span class="o">.</span><span class="na">onActivityDestroyed</span><span class="o">(</span><span class="n">activity</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在它的 onActivityDestoryed 方法中，其主要调用 RefWatcher 类的 watch 方法，其对象便是传递进来的 activity。</p>

<h3>2.类的监测</h3>

<p>接下来便是关键的 RefWatcher 类了，在其 watch 方法中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">watch</span><span class="o">(</span><span class="n">Object</span> <span class="n">watchedReference</span><span class="o">,</span> <span class="n">String</span> <span class="n">referenceName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'> <span class="k">if</span> <span class="o">(</span><span class="k">this</span> <span class="o">==</span> <span class="n">DISABLED</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">return</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'> <span class="n">checkNotNull</span><span class="o">(</span><span class="n">watchedReference</span><span class="o">,</span> <span class="s">&quot;watchedReference&quot;</span><span class="o">);</span>
</span><span class='line'> <span class="n">checkNotNull</span><span class="o">(</span><span class="n">referenceName</span><span class="o">,</span> <span class="s">&quot;referenceName&quot;</span><span class="o">);</span>
</span><span class='line'> <span class="kd">final</span> <span class="kt">long</span> <span class="n">watchStartNanoTime</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">nanoTime</span><span class="o">();</span>
</span><span class='line'> <span class="n">String</span> <span class="n">key</span> <span class="o">=</span> <span class="n">UUID</span><span class="o">.</span><span class="na">randomUUID</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'> <span class="n">retainedKeys</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'> <span class="kd">final</span> <span class="n">KeyedWeakReference</span> <span class="n">reference</span> <span class="o">=</span>
</span><span class='line'>     <span class="k">new</span> <span class="nf">KeyedWeakReference</span><span class="o">(</span><span class="n">watchedReference</span><span class="o">,</span> <span class="n">key</span><span class="o">,</span> <span class="n">referenceName</span><span class="o">,</span> <span class="n">queue</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'> <span class="n">ensureGoneAsync</span><span class="o">(</span><span class="n">watchStartNanoTime</span><span class="o">,</span> <span class="n">reference</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里会将 watchedReference、referenceName、queue 包装成一个 KeyedWeakReference 对象。
其中 queue 是一个成员变量 ReferenceQueue<Object> 的对象。而 KeyedWeakReference 是一个继承自 WeakReference 的类。</p>

<p>关于 WeakReference 的官方描述：</p>

<blockquote><p>Weak reference objects, which do not prevent their referents from being made finalizable, finalized, and then reclaimed. Weak references are most often used to implement canonicalizing mappings.</p>

<p>Suppose that the garbage collector determines at a certain point in time that an object is weakly reachable. At that time it will atomically clear all weak references to that object and all weak references to any other weakly-reachable objects from which that object is reachable through a chain of strong and soft references. At the same time it will declare all of the formerly weakly-reachable objects to be finalizable. At the same time or at some later time it will enqueue those newly-cleared weak references that are registered with reference queues.</p></blockquote>

<p>简单来说就是弱引用并不会影响对象的回收。当一个对象被回收之时，之前对此对象的持有弱引用的对象会被标记为 finalizable，与此同时或之后会将其添加至之前注册的 reference queue 中。</p>

<p>这样的话，通过弱引用持有 activity，在 application 注册的 activitylifecallback 中，当 activity 退出时，在 referencequeue 里查询不在其中的 activity，此时，便确定了泄露的类。接下来便是 dump 出内存，来分析出泄露的路径了。</p>

<h3>3.类的泄露定位</h3>

<p>在 ensureGoneAsync 方法中，会执行如下方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Retryable</span><span class="o">.</span><span class="na">Result</span> <span class="nf">ensureGone</span><span class="o">(</span><span class="kd">final</span> <span class="n">KeyedWeakReference</span> <span class="n">reference</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">watchStartNanoTime</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'> <span class="kt">long</span> <span class="n">gcStartNanoTime</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">nanoTime</span><span class="o">();</span>
</span><span class='line'> <span class="kt">long</span> <span class="n">watchDurationMs</span> <span class="o">=</span> <span class="n">NANOSECONDS</span><span class="o">.</span><span class="na">toMillis</span><span class="o">(</span><span class="n">gcStartNanoTime</span> <span class="o">-</span> <span class="n">watchStartNanoTime</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'> <span class="n">removeWeaklyReachableReferences</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'> <span class="k">if</span> <span class="o">(</span><span class="n">debuggerControl</span><span class="o">.</span><span class="na">isDebuggerAttached</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>   <span class="c1">// The debugger can create false leaks.</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">RETRY</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'> <span class="k">if</span> <span class="o">(</span><span class="n">gone</span><span class="o">(</span><span class="n">reference</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">DONE</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'> <span class="n">gcTrigger</span><span class="o">.</span><span class="na">runGc</span><span class="o">();</span>
</span><span class='line'> <span class="n">removeWeaklyReachableReferences</span><span class="o">();</span>
</span><span class='line'> <span class="k">if</span> <span class="o">(!</span><span class="n">gone</span><span class="o">(</span><span class="n">reference</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>   <span class="kt">long</span> <span class="n">startDumpHeap</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">nanoTime</span><span class="o">();</span>
</span><span class='line'>   <span class="kt">long</span> <span class="n">gcDurationMs</span> <span class="o">=</span> <span class="n">NANOSECONDS</span><span class="o">.</span><span class="na">toMillis</span><span class="o">(</span><span class="n">startDumpHeap</span> <span class="o">-</span> <span class="n">gcStartNanoTime</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">File</span> <span class="n">heapDumpFile</span> <span class="o">=</span> <span class="n">heapDumper</span><span class="o">.</span><span class="na">dumpHeap</span><span class="o">();</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(</span><span class="n">heapDumpFile</span> <span class="o">==</span> <span class="n">RETRY_LATER</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="c1">// Could not dump the heap.</span>
</span><span class='line'>     <span class="k">return</span> <span class="n">RETRY</span><span class="o">;</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="kt">long</span> <span class="n">heapDumpDurationMs</span> <span class="o">=</span> <span class="n">NANOSECONDS</span><span class="o">.</span><span class="na">toMillis</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">nanoTime</span><span class="o">()</span> <span class="o">-</span> <span class="n">startDumpHeap</span><span class="o">);</span>
</span><span class='line'>   <span class="n">heapdumpListener</span><span class="o">.</span><span class="na">analyze</span><span class="o">(</span>
</span><span class='line'>       <span class="k">new</span> <span class="nf">HeapDump</span><span class="o">(</span><span class="n">heapDumpFile</span><span class="o">,</span> <span class="n">reference</span><span class="o">.</span><span class="na">key</span><span class="o">,</span> <span class="n">reference</span><span class="o">.</span><span class="na">name</span><span class="o">,</span> <span class="n">excludedRefs</span><span class="o">,</span> <span class="n">watchDurationMs</span><span class="o">,</span>
</span><span class='line'>           <span class="n">gcDurationMs</span><span class="o">,</span> <span class="n">heapDumpDurationMs</span><span class="o">));</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'> <span class="k">return</span> <span class="n">DONE</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中调用的 removeWeaklyReachableReferences 方法，则是对 refernceQueue 的排查：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">removeWeaklyReachableReferences</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'> <span class="c1">// WeakReferences are enqueued as soon as the object to which they point to becomes weakly</span>
</span><span class='line'> <span class="c1">// reachable. This is before finalization or garbage collection has actually happened.</span>
</span><span class='line'> <span class="n">KeyedWeakReference</span> <span class="n">ref</span><span class="o">;</span>
</span><span class='line'> <span class="k">while</span> <span class="o">((</span><span class="n">ref</span> <span class="o">=</span> <span class="o">(</span><span class="n">KeyedWeakReference</span><span class="o">)</span> <span class="n">queue</span><span class="o">.</span><span class="na">poll</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">retainedKeys</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">ref</span><span class="o">.</span><span class="na">key</span><span class="o">);</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里从 queue 中，取出 KeyedWeakReference，并从 retainedKeys 集合中移除此 reference 对应的 key 值。</p>

<p>而判断此 reference 是否移除则是通过 gone 方法判断：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">gone</span><span class="o">(</span><span class="n">KeyedWeakReference</span> <span class="n">reference</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'> <span class="k">return</span> <span class="o">!</span><span class="n">retainedKeys</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">reference</span><span class="o">.</span><span class="na">key</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当集合中不包含此 WeakReference 对应的 key，则表示此弱引用持有的对象已被回收；否则表示有可能内存泄露。</p>

<p>这里进行了再一步的判断，触发调用一下 gc 方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">gcTrigger</span><span class="o">.</span><span class="na">runGc</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>而 gcTrigger 则是用的默认的 Default 实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">GcTrigger</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">GcTrigger</span> <span class="n">DEFAULT</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">GcTrigger</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">runGc</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// Code taken from AOSP FinalizationTest:</span>
</span><span class='line'>      <span class="c1">// https://android.googlesource.com/platform/libcore/+/master/support/src/test/java/libcore/</span>
</span><span class='line'>      <span class="c1">// java/lang/ref/FinalizationTester.java</span>
</span><span class='line'>      <span class="c1">// System.gc() does not garbage collect every time. Runtime.gc() is</span>
</span><span class='line'>      <span class="c1">// more likely to perfom a gc.</span>
</span><span class='line'>      <span class="n">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">gc</span><span class="o">();</span>
</span><span class='line'>      <span class="n">enqueueReferences</span><span class="o">();</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">runFinalization</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">enqueueReferences</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// Hack. We don&#39;t have a programmatic way to wait for the reference queue daemon to move</span>
</span><span class='line'>      <span class="c1">// references to the appropriate queues.</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">AssertionError</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">runGc</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码中通过 <code>Runtime.getRuntime().gc()</code> 来触发 gc，再将当前线程 sleep 100 毫秒，来保证弱引用被添加至引用队列中，则执行 <code>System.runFinalization()</code> 方法，则触发调用对象的 finalize 方法。</p>

<p>再触发 <code>gcTrigger.runGc()</code> 后，再调用一次 <code>removeWeaklyReachableReferences</code>，若是对象还未消失，那表示对象已经是真的泄露了。则需要导出内存快照进行分析了。</p>

<h3>4.Dump内存快照</h3>

<p>生成 heapDumpFile, 则是由 heapDumper 接口来负责：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">File</span> <span class="n">heapDumpFile</span> <span class="o">=</span> <span class="n">heapDumper</span><span class="o">.</span><span class="na">dumpHeap</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>此 heapDumper 在 Android 中相关的实现，是由 AndroidHeapDumper 类实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span> <span class="kd">public</span> <span class="n">File</span> <span class="nf">dumpHeap</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'> <span class="n">File</span> <span class="n">heapDumpFile</span> <span class="o">=</span> <span class="n">leakDirectoryProvider</span><span class="o">.</span><span class="na">newHeapDumpFile</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'> <span class="k">if</span> <span class="o">(</span><span class="n">heapDumpFile</span> <span class="o">==</span> <span class="n">RETRY_LATER</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">RETRY_LATER</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'> <span class="n">FutureResult</span><span class="o">&lt;</span><span class="n">Toast</span><span class="o">&gt;</span> <span class="n">waitingForToast</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FutureResult</span><span class="o">&lt;&gt;();</span>
</span><span class='line'> <span class="n">showToast</span><span class="o">(</span><span class="n">waitingForToast</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'> <span class="k">if</span> <span class="o">(!</span><span class="n">waitingForToast</span><span class="o">.</span><span class="na">wait</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span> <span class="n">SECONDS</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">CanaryLog</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;Did not dump heap, too much time waiting for Toast.&quot;</span><span class="o">);</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">RETRY_LATER</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'> <span class="n">Toast</span> <span class="n">toast</span> <span class="o">=</span> <span class="n">waitingForToast</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'> <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">Debug</span><span class="o">.</span><span class="na">dumpHprofData</span><span class="o">(</span><span class="n">heapDumpFile</span><span class="o">.</span><span class="na">getAbsolutePath</span><span class="o">());</span>
</span><span class='line'>   <span class="n">cancelToast</span><span class="o">(</span><span class="n">toast</span><span class="o">);</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">heapDumpFile</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">CanaryLog</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">e</span><span class="o">,</span> <span class="s">&quot;Could not dump heap&quot;</span><span class="o">);</span>
</span><span class='line'>   <span class="c1">// Abort heap dump</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">RETRY_LATER</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为这里是在主线程所做的 dump 工作，所以这里给了个 waiting 的 toast，之后便是利用 Debug 类中的 dumpHprofData 方法，来生成内存快照 hprof 的数据。</p>

<p>然后利用注册的 heapdumpListener 的 analyze 方法进行分析生成的此  HeapDump 对象：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">analyze</span><span class="o">(</span><span class="n">HeapDump</span> <span class="n">heapDump</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'> <span class="n">checkNotNull</span><span class="o">(</span><span class="n">heapDump</span><span class="o">,</span> <span class="s">&quot;heapDump&quot;</span><span class="o">);</span>
</span><span class='line'> <span class="n">HeapAnalyzerService</span><span class="o">.</span><span class="na">runAnalysis</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">heapDump</span><span class="o">,</span> <span class="n">listenerServiceClass</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里会通过启动一个监听的 service（HeapAnalyzerService），而在 Android 中的 service 便是另一个进程的 serice。</p>

<h3>5.引用分析</h3>

<p>HeapAnalyzerService 是一个跨进程的 IntentSerice，在其 onHandleIntent 方法中:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span> <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onHandleIntent</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'> <span class="k">if</span> <span class="o">(</span><span class="n">intent</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">CanaryLog</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;HeapAnalyzerService received a null intent, ignoring.&quot;</span><span class="o">);</span>
</span><span class='line'>   <span class="k">return</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'> <span class="n">String</span> <span class="n">listenerClassName</span> <span class="o">=</span> <span class="n">intent</span><span class="o">.</span><span class="na">getStringExtra</span><span class="o">(</span><span class="n">LISTENER_CLASS_EXTRA</span><span class="o">);</span>
</span><span class='line'> <span class="n">HeapDump</span> <span class="n">heapDump</span> <span class="o">=</span> <span class="o">(</span><span class="n">HeapDump</span><span class="o">)</span> <span class="n">intent</span><span class="o">.</span><span class="na">getSerializableExtra</span><span class="o">(</span><span class="n">HEAPDUMP_EXTRA</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'> <span class="n">HeapAnalyzer</span> <span class="n">heapAnalyzer</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">HeapAnalyzer</span><span class="o">(</span><span class="n">heapDump</span><span class="o">.</span><span class="na">excludedRefs</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'> <span class="n">AnalysisResult</span> <span class="n">result</span> <span class="o">=</span> <span class="n">heapAnalyzer</span><span class="o">.</span><span class="na">checkForLeak</span><span class="o">(</span><span class="n">heapDump</span><span class="o">.</span><span class="na">heapDumpFile</span><span class="o">,</span> <span class="n">heapDump</span><span class="o">.</span><span class="na">referenceKey</span><span class="o">);</span>
</span><span class='line'> <span class="n">AbstractAnalysisResultService</span><span class="o">.</span><span class="na">sendResultToListener</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">listenerClassName</span><span class="o">,</span> <span class="n">heapDump</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>获取到 HeapDump 后，生成一个 HeapAnalyzer 后，利用其 checkForLeak 方法，检查 heapDumpFile 中关于 referenceKey 的引用，生成一个分析的结果 AnalysisResult。</p>

<p>关于 checkForLeak 方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">* Searches the heap dump for a {@link KeyedWeakReference} instance with the corresponding key,</span>
</span><span class='line'><span class="cm">* and then computes the shortest strong reference path from that instance to the GC roots.</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="kd">public</span> <span class="n">AnalysisResult</span> <span class="nf">checkForLeak</span><span class="o">(</span><span class="n">File</span> <span class="n">heapDumpFile</span><span class="o">,</span> <span class="n">String</span> <span class="n">referenceKey</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'> <span class="kt">long</span> <span class="n">analysisStartNanoTime</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">nanoTime</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'> <span class="k">if</span> <span class="o">(!</span><span class="n">heapDumpFile</span><span class="o">.</span><span class="na">exists</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">Exception</span> <span class="n">exception</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;File does not exist: &quot;</span> <span class="o">+</span> <span class="n">heapDumpFile</span><span class="o">);</span>
</span><span class='line'>   <span class="k">return</span> <span class="nf">failure</span><span class="o">(</span><span class="n">exception</span><span class="o">,</span> <span class="n">since</span><span class="o">(</span><span class="n">analysisStartNanoTime</span><span class="o">));</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'> <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">HprofBuffer</span> <span class="n">buffer</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">MemoryMappedFileBuffer</span><span class="o">(</span><span class="n">heapDumpFile</span><span class="o">);</span>
</span><span class='line'>   <span class="n">HprofParser</span> <span class="n">parser</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">HprofParser</span><span class="o">(</span><span class="n">buffer</span><span class="o">);</span>
</span><span class='line'>   <span class="n">Snapshot</span> <span class="n">snapshot</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="na">parse</span><span class="o">();</span>
</span><span class='line'>   <span class="n">deduplicateGcRoots</span><span class="o">(</span><span class="n">snapshot</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">Instance</span> <span class="n">leakingRef</span> <span class="o">=</span> <span class="n">findLeakingReference</span><span class="o">(</span><span class="n">referenceKey</span><span class="o">,</span> <span class="n">snapshot</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// False alarm, weak reference was cleared in between key check and heap dump.</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(</span><span class="n">leakingRef</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="k">return</span> <span class="nf">noLeak</span><span class="o">(</span><span class="n">since</span><span class="o">(</span><span class="n">analysisStartNanoTime</span><span class="o">));</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">return</span> <span class="nf">findLeakTrace</span><span class="o">(</span><span class="n">analysisStartNanoTime</span><span class="o">,</span> <span class="n">snapshot</span><span class="o">,</span> <span class="n">leakingRef</span><span class="o">);</span>
</span><span class='line'> <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="nf">failure</span><span class="o">(</span><span class="n">e</span><span class="o">,</span> <span class="n">since</span><span class="o">(</span><span class="n">analysisStartNanoTime</span><span class="o">));</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里开始利用 square 的 haha 库来开始解析 dump 出来的文件数据了。首先将 heapDumpFile 包装为 HprofBuffer，再利用 HprofParse 转换得到 Snapshot 数据。</p>

<p>先利用 findLeakingReference 方法中，从 snapshot 中查看是否有 referenceKey。没有，则不存在泄露。</p>

<p>若有的话，在 findLeakTrace 方法，来找到关于此类引用泄露的路径关系。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">AnalysisResult</span> <span class="nf">findLeakTrace</span><span class="o">(</span><span class="kt">long</span> <span class="n">analysisStartNanoTime</span><span class="o">,</span> <span class="n">Snapshot</span> <span class="n">snapshot</span><span class="o">,</span>
</span><span class='line'>   <span class="n">Instance</span> <span class="n">leakingRef</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'> <span class="n">ShortestPathFinder</span> <span class="n">pathFinder</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ShortestPathFinder</span><span class="o">(</span><span class="n">excludedRefs</span><span class="o">);</span>
</span><span class='line'> <span class="n">ShortestPathFinder</span><span class="o">.</span><span class="na">Result</span> <span class="n">result</span> <span class="o">=</span> <span class="n">pathFinder</span><span class="o">.</span><span class="na">findPath</span><span class="o">(</span><span class="n">snapshot</span><span class="o">,</span> <span class="n">leakingRef</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'> <span class="c1">// False alarm, no strong reference path to GC Roots.</span>
</span><span class='line'> <span class="k">if</span> <span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">leakingNode</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="nf">noLeak</span><span class="o">(</span><span class="n">since</span><span class="o">(</span><span class="n">analysisStartNanoTime</span><span class="o">));</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'> <span class="n">LeakTrace</span> <span class="n">leakTrace</span> <span class="o">=</span> <span class="n">buildLeakTrace</span><span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">leakingNode</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'> <span class="n">String</span> <span class="n">className</span> <span class="o">=</span> <span class="n">leakingRef</span><span class="o">.</span><span class="na">getClassObj</span><span class="o">().</span><span class="na">getClassName</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'> <span class="c1">// Side effect: computes retained size.</span>
</span><span class='line'> <span class="n">snapshot</span><span class="o">.</span><span class="na">computeDominators</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'> <span class="n">Instance</span> <span class="n">leakingInstance</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">leakingNode</span><span class="o">.</span><span class="na">instance</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'> <span class="kt">long</span> <span class="n">retainedSize</span> <span class="o">=</span> <span class="n">leakingInstance</span><span class="o">.</span><span class="na">getTotalRetainedSize</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'> <span class="c1">// TODO: check O sources and see what happened to android.graphics.Bitmap.mBuffer</span>
</span><span class='line'> <span class="k">if</span> <span class="o">(</span><span class="n">SDK_INT</span> <span class="o">&lt;=</span> <span class="n">N_MR1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">retainedSize</span> <span class="o">+=</span> <span class="n">computeIgnoredBitmapRetainedSize</span><span class="o">(</span><span class="n">snapshot</span><span class="o">,</span> <span class="n">leakingInstance</span><span class="o">);</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'> <span class="k">return</span> <span class="nf">leakDetected</span><span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">excludingKnownLeaks</span><span class="o">,</span> <span class="n">className</span><span class="o">,</span> <span class="n">leakTrace</span><span class="o">,</span> <span class="n">retainedSize</span><span class="o">,</span>
</span><span class='line'>     <span class="n">since</span><span class="o">(</span><span class="n">analysisStartNanoTime</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>此方法中，</p>

<h3>6.结果显示</h3>

<p>之后将此结果 AnalysisResult 发送至 AbastractAnalysisResultService 的实现类中，此类的处理 Intent 方法如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span> <span class="kd">protected</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">onHandleIntent</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'> <span class="n">HeapDump</span> <span class="n">heapDump</span> <span class="o">=</span> <span class="o">(</span><span class="n">HeapDump</span><span class="o">)</span> <span class="n">intent</span><span class="o">.</span><span class="na">getSerializableExtra</span><span class="o">(</span><span class="n">HEAP_DUMP_EXTRA</span><span class="o">);</span>
</span><span class='line'> <span class="n">AnalysisResult</span> <span class="n">result</span> <span class="o">=</span> <span class="o">(</span><span class="n">AnalysisResult</span><span class="o">)</span> <span class="n">intent</span><span class="o">.</span><span class="na">getSerializableExtra</span><span class="o">(</span><span class="n">RESULT_EXTRA</span><span class="o">);</span>
</span><span class='line'> <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">onHeapAnalyzed</span><span class="o">(</span><span class="n">heapDump</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span><span class='line'> <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>   <span class="c1">//noinspection ResultOfMethodCallIgnored</span>
</span><span class='line'>   <span class="n">heapDump</span><span class="o">.</span><span class="na">heapDumpFile</span><span class="o">.</span><span class="na">delete</span><span class="o">();</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其 onHeapAnalyzed 抽象方法由 DisplayLeakService 来实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span> <span class="kd">protected</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">onHeapAnalyzed</span><span class="o">(</span><span class="n">HeapDump</span> <span class="n">heapDump</span><span class="o">,</span> <span class="n">AnalysisResult</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'> <span class="n">String</span> <span class="n">leakInfo</span> <span class="o">=</span> <span class="n">leakInfo</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">heapDump</span><span class="o">,</span> <span class="n">result</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'> <span class="n">CanaryLog</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;%s&quot;</span><span class="o">,</span> <span class="n">leakInfo</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'> <span class="kt">boolean</span> <span class="n">resultSaved</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'> <span class="kt">boolean</span> <span class="n">shouldSaveResult</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">leakFound</span> <span class="o">||</span> <span class="n">result</span><span class="o">.</span><span class="na">failure</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'> <span class="k">if</span> <span class="o">(</span><span class="n">shouldSaveResult</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">heapDump</span> <span class="o">=</span> <span class="n">renameHeapdump</span><span class="o">(</span><span class="n">heapDump</span><span class="o">);</span>
</span><span class='line'>   <span class="n">resultSaved</span> <span class="o">=</span> <span class="n">saveResult</span><span class="o">(</span><span class="n">heapDump</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'> <span class="n">PendingIntent</span> <span class="n">pendingIntent</span><span class="o">;</span>
</span><span class='line'> <span class="n">String</span> <span class="n">contentTitle</span><span class="o">;</span>
</span><span class='line'> <span class="n">String</span> <span class="n">contentText</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'> <span class="k">if</span> <span class="o">(!</span><span class="n">shouldSaveResult</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">contentTitle</span> <span class="o">=</span> <span class="n">getString</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">leak_canary_no_leak_title</span><span class="o">);</span>
</span><span class='line'>   <span class="n">contentText</span> <span class="o">=</span> <span class="n">getString</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">leak_canary_no_leak_text</span><span class="o">);</span>
</span><span class='line'>   <span class="n">pendingIntent</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">resultSaved</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">pendingIntent</span> <span class="o">=</span> <span class="n">DisplayLeakActivity</span><span class="o">.</span><span class="na">createPendingIntent</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">heapDump</span><span class="o">.</span><span class="na">referenceKey</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">if</span> <span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">failure</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">String</span> <span class="n">size</span> <span class="o">=</span> <span class="n">formatShortFileSize</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">result</span><span class="o">.</span><span class="na">retainedHeapSize</span><span class="o">);</span>
</span><span class='line'>     <span class="n">String</span> <span class="n">className</span> <span class="o">=</span> <span class="n">classSimpleName</span><span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">className</span><span class="o">);</span>
</span><span class='line'>     <span class="k">if</span> <span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">excludedLeak</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">contentTitle</span> <span class="o">=</span> <span class="n">getString</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">leak_canary_leak_excluded</span><span class="o">,</span> <span class="n">className</span><span class="o">,</span> <span class="n">size</span><span class="o">);</span>
</span><span class='line'>     <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">contentTitle</span> <span class="o">=</span> <span class="n">getString</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">leak_canary_class_has_leaked</span><span class="o">,</span> <span class="n">className</span><span class="o">,</span> <span class="n">size</span><span class="o">);</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'>   <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">contentTitle</span> <span class="o">=</span> <span class="n">getString</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">leak_canary_analysis_failed</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="n">contentText</span> <span class="o">=</span> <span class="n">getString</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">leak_canary_notification_message</span><span class="o">);</span>
</span><span class='line'> <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">contentTitle</span> <span class="o">=</span> <span class="n">getString</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">leak_canary_could_not_save_title</span><span class="o">);</span>
</span><span class='line'>   <span class="n">contentText</span> <span class="o">=</span> <span class="n">getString</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">leak_canary_could_not_save_text</span><span class="o">);</span>
</span><span class='line'>   <span class="n">pendingIntent</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'> <span class="c1">// New notification id every second.</span>
</span><span class='line'> <span class="kt">int</span> <span class="n">notificationId</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">SystemClock</span><span class="o">.</span><span class="na">uptimeMillis</span><span class="o">()</span> <span class="o">/</span> <span class="mi">1000</span><span class="o">);</span>
</span><span class='line'> <span class="n">showNotification</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">contentTitle</span><span class="o">,</span> <span class="n">contentText</span><span class="o">,</span> <span class="n">pendingIntent</span><span class="o">,</span> <span class="n">notificationId</span><span class="o">);</span>
</span><span class='line'> <span class="n">afterDefaultHandling</span><span class="o">(</span><span class="n">heapDump</span><span class="o">,</span> <span class="n">result</span><span class="o">,</span> <span class="n">leakInfo</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里检查获取的 AnalysisResult，根据其 leakFound 和 failure 来查看其是否泄漏。若存在，则创建一个跳转至 DisplayLeakActivity 的 Notification 的 intent。</p>

<p>在 DisplayLeakActivity 的界面中，用于显示关于 Leaks 的列表，而其 List 数据，则是通过运行一个后台线程来读取保存的泄露文件列表，之后更新 UI 显示。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Leak</span><span class="o">&gt;</span> <span class="n">leaks</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">File</span><span class="o">&gt;</span> <span class="n">files</span> <span class="o">=</span> <span class="n">leakDirectoryProvider</span><span class="o">.</span><span class="na">listFiles</span><span class="o">(</span><span class="k">new</span> <span class="nf">FilenameFilter</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">accept</span><span class="o">(</span><span class="n">File</span> <span class="n">dir</span><span class="o">,</span> <span class="n">String</span> <span class="n">filename</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">filename</span><span class="o">.</span><span class="na">endsWith</span><span class="o">(</span><span class="s">&quot;.result&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="n">File</span> <span class="n">resultFile</span> <span class="o">:</span> <span class="n">files</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">FileInputStream</span> <span class="n">fis</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">fis</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">FileInputStream</span><span class="o">(</span><span class="n">resultFile</span><span class="o">);</span>
</span><span class='line'>    <span class="n">ObjectInputStream</span> <span class="n">ois</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ObjectInputStream</span><span class="o">(</span><span class="n">fis</span><span class="o">);</span>
</span><span class='line'>    <span class="n">HeapDump</span> <span class="n">heapDump</span> <span class="o">=</span> <span class="o">(</span><span class="n">HeapDump</span><span class="o">)</span> <span class="n">ois</span><span class="o">.</span><span class="na">readObject</span><span class="o">();</span>
</span><span class='line'>    <span class="n">AnalysisResult</span> <span class="n">result</span> <span class="o">=</span> <span class="o">(</span><span class="n">AnalysisResult</span><span class="o">)</span> <span class="n">ois</span><span class="o">.</span><span class="na">readObject</span><span class="o">();</span>
</span><span class='line'>    <span class="n">leaks</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nf">Leak</span><span class="o">(</span><span class="n">heapDump</span><span class="o">,</span> <span class="n">result</span><span class="o">,</span> <span class="n">resultFile</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="o">|</span> <span class="n">ClassNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Likely a change in the serializable result class.</span>
</span><span class='line'>    <span class="c1">// Let&#39;s remove the files, we can&#39;t read them anymore.</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="n">deleted</span> <span class="o">=</span> <span class="n">resultFile</span><span class="o">.</span><span class="na">delete</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">deleted</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">CanaryLog</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">e</span><span class="o">,</span> <span class="s">&quot;Could not read result file %s, deleted it.&quot;</span><span class="o">,</span> <span class="n">resultFile</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">CanaryLog</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">e</span><span class="o">,</span> <span class="s">&quot;Could not read result file %s, could not delete it either.&quot;</span><span class="o">,</span>
</span><span class='line'>          <span class="n">resultFile</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">fis</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">fis</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">ignored</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">leaks</span><span class="o">,</span> <span class="k">new</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Leak</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Leak</span> <span class="n">lhs</span><span class="o">,</span> <span class="n">Leak</span> <span class="n">rhs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Long</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">rhs</span><span class="o">.</span><span class="na">resultFile</span><span class="o">.</span><span class="na">lastModified</span><span class="o">())</span>
</span><span class='line'>        <span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">lhs</span><span class="o">.</span><span class="na">resultFile</span><span class="o">.</span><span class="na">lastModified</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span><span class='line'><span class="n">mainHandler</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="k">new</span> <span class="nf">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">inFlight</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">LoadLeaks</span><span class="o">.</span><span class="na">this</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">activityOrNull</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">activityOrNull</span><span class="o">.</span><span class="na">leaks</span> <span class="o">=</span> <span class="n">leaks</span><span class="o">;</span>
</span><span class='line'>      <span class="n">activityOrNull</span><span class="o">.</span><span class="na">updateUi</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>学习资料</h2>

<ul>
<li><a href="https://academy.realm.io/cn/posts/droidcon-ricau-memory-leaks-leakcanary/">用 LeakCanary 检测内存泄漏</a></li>
<li><a href="http://blog.csdn.net/fearGod/article/details/46364599">Android System.gc()注意点 - CSDN博客</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kotlin DSL 学习]]></title>
    <link href="http://alighters.github.io/blog/blog/2018/03/02/kotlin-dsl-learn/"/>
    <updated>2018-03-02T16:46:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2018/03/02/kotlin-dsl-learn</id>
    <content type="html"><![CDATA[<p>DSL（domain-specific language），特定领域语言。wiki 关于 DSL 的定义如下：</p>

<!-- more -->


<blockquote><p>A domain-specific language (DSL) is a computer language specialized to a particular application domain. This is in contrast to a general-purpose language (GPL), which is broadly applicable across domains.</p></blockquote>

<p>通俗来讲，其是指特定领域的语言，如 SQL, Gradle 等。另外其语言是可表达的且易读的。</p>

<p>而 Kotlin 的语言特征，能够让我们更加方便地来实现 DSL。</p>

<h2>语言特性</h2>

<h3>1.Lambda Out of Parentheses</h3>

<p>lambda 通常定义的格式为 （list of param types） -> returned type。最简单的格式则为 () -> Unit , 其中 Unit 等同于 Void。</p>

<p>将一个  lambda 赋值给一个变量，最基本的格式如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>val helloPrint: (String) -&gt; Unit = { println(it) }</span></code></pre></td></tr></table></div></figure>


<p>调用此 lambda 的话：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>helloPrint("Hello")</span></code></pre></td></tr></table></div></figure>


<p>而多参数时，可如下使用：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>val helloPrint: (String, Int) -&gt; Unit = { _, _ -&gt; println("Do nothing") } 
</span><span class='line'>helloPrint("Does not matter", 42) //output: Do nothing</span></code></pre></td></tr></table></div></figure>


<p>其中参数不使用时，可用下划线来代替。</p>

<p>关于 Lambda 的使用，这里假设有个函数 x()，当一个 lambda 是这个函数的最后一个参数时，其可以放置在函数括号的外面。另外，如果这个 lambda 是这个函数的唯一参数时，这个括号是可以省略的。这样，形如 x({…}) 的使用可以转换为 x(){}，再省略括号的话，我们得到 x{}。</p>

<p>lambda 的使用则有如下的形式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>fun x( lambda: () -&gt; Unit ) { lambda() }</span></code></pre></td></tr></table></div></figure>


<p>也可以写成单行如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>fun x( lambda: () -&gt; Unit ) = lambda()</span></code></pre></td></tr></table></div></figure>


<p>这样若是实现一个形如</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">val</span> <span class="n">person</span> <span class="o">=</span> <span class="n">person</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">it</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="s">&quot;John&quot;</span>
</span><span class='line'>    <span class="n">it</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="mi">25</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>的 DSL 用法，其中 person 的声明如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">data</span> <span class="kd">class</span> <span class="nf">Person</span><span class="o">(</span><span class="n">var</span> <span class="nl">name:</span> <span class="n">String</span><span class="o">?</span> <span class="o">=</span> <span class="kc">null</span><span class="o">,</span>
</span><span class='line'>                  <span class="n">var</span> <span class="nl">age:</span> <span class="n">Int</span><span class="o">?</span> <span class="o">=</span> <span class="kc">null</span><span class="o">,</span>
</span><span class='line'>                  <span class="n">var</span> <span class="nl">address:</span> <span class="n">Address</span><span class="o">?</span> <span class="o">=</span> <span class="kc">null</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这时，则可以定义一个 person 的 lambda 定义：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fun</span> <span class="nf">person</span><span class="o">(</span><span class="nl">block:</span> <span class="o">(</span><span class="n">Person</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">Unit</span><span class="o">):</span> <span class="n">Person</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">val</span> <span class="n">p</span> <span class="o">=</span> <span class="n">Person</span><span class="o">()</span>
</span><span class='line'>    <span class="n">block</span><span class="o">(</span><span class="n">p</span><span class="o">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">p</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2.Lambdas with receivers</h3>

<p>在上述的 person dsl 用法中，it 的使用来说每次都是累赘的。这时可以通过 Lambda with receivers ，来避免每次写它。</p>

<p>它的意思是可以为 lambda 的声明指定一个接受者 receiver ，这样我们在 lambda 中只能访问这个 receiver 的所有非静态的公开函数。由于其限定了 receiver 的域，所以在 lambda 中，可以不必在提供前缀的 it 参数。</p>

<p>所以，这里的格式为  () -> Unit 转变为了 X.()-> Unit。</p>

<blockquote><p>注意，这里的写法只是用于方便书写，将这两种形式的代码转变为字节码时，可以发现其并没有区别的。仅仅在于其一个赋值给了变量 it，一个赋值给了变量 receiver。</p></blockquote>

<p>将 person 的 fun 修改为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fun</span> <span class="nf">person</span><span class="o">(</span><span class="nl">block:</span> <span class="n">Person</span><span class="o">.()</span> <span class="o">-&gt;</span> <span class="n">Unit</span><span class="o">):</span> <span class="n">Person</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">val</span> <span class="n">p</span> <span class="o">=</span> <span class="n">Person</span><span class="o">()</span>
</span><span class='line'>    <span class="n">p</span><span class="o">.</span><span class="na">block</span><span class="o">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">p</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>简写成一行的话如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fun</span> <span class="nf">person</span><span class="o">(</span><span class="nl">block:</span> <span class="n">Person</span><span class="o">.()</span> <span class="o">-&gt;</span> <span class="n">Unit</span><span class="o">):</span> <span class="n">Person</span> <span class="o">=</span> <span class="n">Person</span><span class="o">().</span><span class="na">apply</span><span class="o">(</span><span class="n">block</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这时，person 的调用便可以简化：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">val</span> <span class="n">person</span> <span class="o">=</span> <span class="n">person</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;John&quot;</span>
</span><span class='line'>    <span class="n">age</span> <span class="o">=</span> <span class="mi">25</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3.Extension functions</h3>

<p>此功能即为扩展函数，其表现就是给一些类提供额外的方法，来方便开发调用。其在 Java 中的实现则是通过静态函数来实现，参数便是 Kotlin 中对应的类。</p>

<p>所以，要实现如下的 DSL :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">val</span> <span class="n">person</span> <span class="o">=</span> <span class="n">person</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;John&quot;</span>
</span><span class='line'>    <span class="n">age</span> <span class="o">=</span> <span class="mi">25</span>
</span><span class='line'>    <span class="n">address</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">street</span> <span class="o">=</span> <span class="s">&quot;Main Street&quot;</span>
</span><span class='line'>        <span class="n">number</span> <span class="o">=</span> <span class="mi">42</span>
</span><span class='line'>        <span class="n">city</span> <span class="o">=</span> <span class="s">&quot;London&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在声明一个 Address：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">data</span> <span class="kd">class</span> <span class="nf">Address</span><span class="o">(</span><span class="n">var</span> <span class="nl">street:</span> <span class="n">String</span><span class="o">?</span> <span class="o">=</span> <span class="kc">null</span><span class="o">,</span>
</span><span class='line'>                   <span class="n">var</span> <span class="nl">number:</span> <span class="n">Int</span><span class="o">?</span> <span class="o">=</span> <span class="kc">null</span><span class="o">,</span>
</span><span class='line'>                   <span class="n">var</span> <span class="nl">city:</span> <span class="n">String</span><span class="o">?</span> <span class="o">=</span> <span class="kc">null</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>便要对 person 类作拓展：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fun</span> <span class="n">Person</span><span class="o">.</span><span class="na">address</span><span class="o">(</span><span class="nl">block:</span> <span class="n">Address</span><span class="o">.()</span> <span class="o">-&gt;</span> <span class="n">Unit</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">address</span> <span class="o">=</span> <span class="n">Address</span><span class="o">().</span><span class="na">apply</span><span class="o">(</span><span class="n">block</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4.Builder Pattern</h3>

<p>在上面的例子中，其参数都是为 var 定义，若需要为 val 定义，这里可以采用 builder 模式来实现。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fun</span> <span class="nf">person</span><span class="o">(</span><span class="nl">block:</span> <span class="n">PersonBuilder</span><span class="o">.()</span> <span class="o">-&gt;</span> <span class="n">Unit</span><span class="o">):</span> <span class="n">Person</span> <span class="o">=</span> <span class="n">PersonBuilder</span><span class="o">().</span><span class="na">apply</span><span class="o">(</span><span class="n">block</span><span class="o">).</span><span class="na">build</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">PersonBuilder</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">var</span> <span class="nl">name:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">var</span> <span class="nl">dob:</span> <span class="n">Date</span> <span class="o">=</span> <span class="n">Date</span><span class="o">()</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">dateOfBirth:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>        <span class="n">set</span><span class="o">(</span><span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">dob</span> <span class="o">=</span> <span class="n">SimpleDateFormat</span><span class="o">(</span><span class="s">&quot;yyyy-MM-dd&quot;</span><span class="o">).</span><span class="na">parse</span><span class="o">(</span><span class="n">value</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">var</span> <span class="nl">address:</span> <span class="n">Address</span><span class="o">?</span> <span class="o">=</span> <span class="kc">null</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fun</span> <span class="nf">address</span><span class="o">(</span><span class="nl">block:</span> <span class="n">AddressBuilder</span><span class="o">.()</span> <span class="o">-&gt;</span> <span class="n">Unit</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">address</span> <span class="o">=</span> <span class="n">AddressBuilder</span><span class="o">().</span><span class="na">apply</span><span class="o">(</span><span class="n">block</span><span class="o">).</span><span class="na">build</span><span class="o">()</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fun</span> <span class="nf">build</span><span class="o">():</span> <span class="n">Person</span> <span class="o">=</span> <span class="n">Person</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">dob</span><span class="o">,</span> <span class="n">address</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">AddressBuilder</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">var</span> <span class="nl">street:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">number:</span> <span class="n">Int</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">city:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fun</span> <span class="nf">build</span><span class="o">()</span> <span class="o">:</span> <span class="n">Address</span> <span class="o">=</span> <span class="n">Address</span><span class="o">(</span><span class="n">street</span><span class="o">,</span> <span class="n">number</span><span class="o">,</span> <span class="n">city</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如此，Person 的构造函数便可以使用 val 了，同时 builder 模式保证了类型安全的目的 （type-safe）。</p>

<h3>5. Scope control: @DslMarker (Since 1.1)</h3>

<p>因为 lambda 的实现都是匿名函数，其可以访问外部作用域。所以这里使用 @DslMarker ，可以达到收窄作用域的目的。如下，使用其声明一个 annotation class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@DslMarker</span>
</span><span class='line'><span class="n">annotation</span> <span class="kd">class</span> <span class="nc">PersonDsl</span>
</span></code></pre></td></tr></table></div></figure>


<p>之后，将 @PersonDsl 添加在指定的类上，然后以此类定义的闭包，则不能访问外层作用域的内容。其会在编译器中得到错误的提示。</p>

<h2>Anko</h2>

<p>在 Android 中关于 Kotlin 的使用，集大成者便属于  <a href="https://github.com/Kotlin/anko">Kotlin/anko: Pleasant Android application development</a> 了，其主要包含的内容：</p>

<ul>
<li>Anko Commons:  关于 intents、dialogs、 logging 等轻量级的工具库</li>
<li>Anko Layouts: 提供一个快速且类型安全的快速 Android 布局方法。</li>
<li>Anko SQLite:  对 Android SQLite 支持的查询和集合转换的 DSL 功能。</li>
<li>Anko Coroutines: 对 kotlinx.coroutines library 提供的工具类。</li>
</ul>


<p>其中，以最常用的 Anko Layouts 为例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">verticalLayout</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">val</span> <span class="n">name</span> <span class="o">=</span> <span class="n">editText</span><span class="o">()</span>
</span><span class='line'>    <span class="n">button</span><span class="o">(</span><span class="s">&quot;Say Hello&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">onClick</span> <span class="o">{</span> <span class="n">toast</span><span class="o">(</span><span class="s">&quot;Hello, ${name.text}!&quot;</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里指定了一个竖直的 layout，在其中声明了一个名称为 name 的 editText，另有一个文本为 “Say hello” 的按钮，并为按钮添加一个点击的事件，事件可以弹出一个 toast，提示内容为 Hello 加 name 控件的文本。</p>

<p>这里，相比以前的 xml 写法，这种写法简洁了许多。但要使用预览功能，这里需要另外安装 Anko Support Plugin 的插件，并采用 AnkoComponet 的方式书写 Anko Layout。</p>

<p>其中关于 verticalLayout 的定义是在 CustomViews 类中。且此方法针对 ViewManager、Context 及 Activity 做了扩展，以 Actiivty 为例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">inline</span> <span class="n">fun</span> <span class="n">Activity</span><span class="o">.</span><span class="na">verticalLayout</span><span class="o">(</span><span class="nl">theme:</span> <span class="n">Int</span> <span class="o">=</span> <span class="mi">0</span><span class="o">):</span> <span class="n">LinearLayout</span> <span class="o">=</span> <span class="n">verticalLayout</span><span class="o">(</span><span class="n">theme</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'><span class="n">inline</span> <span class="n">fun</span> <span class="n">Activity</span><span class="o">.</span><span class="na">verticalLayout</span><span class="o">(</span><span class="nl">theme:</span> <span class="n">Int</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="nl">init:</span> <span class="o">(</span><span class="nd">@AnkoViewDslMarker</span> <span class="n">_LinearLayout</span><span class="o">).()</span> <span class="o">-&gt;</span> <span class="n">Unit</span><span class="o">):</span> <span class="n">LinearLayout</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">ankoView</span><span class="o">(</span><span class="err">`</span><span class="n">$$Anko$Factories$CustomViews</span><span class="err">`</span><span class="o">.</span><span class="na">VERTICAL_LAYOUT_FACTORY</span><span class="o">,</span> <span class="n">theme</span><span class="o">,</span> <span class="n">init</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中的 Lambda 为 _LinearLayout 类，关于 VERTICAL_LAYOUT_FACTORY 的定义如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@PublishedApi</span>
</span><span class='line'><span class="n">internal</span> <span class="n">object</span> <span class="err">`</span><span class="n">$$Anko$Factories$CustomViews</span><span class="err">`</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">val</span> <span class="n">VERTICAL_LAYOUT_FACTORY</span> <span class="o">=</span> <span class="o">{</span> <span class="nl">ctx:</span> <span class="n">Context</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="n">val</span> <span class="n">view</span> <span class="o">=</span> <span class="n">_LinearLayout</span><span class="o">(</span><span class="n">ctx</span><span class="o">)</span>
</span><span class='line'>        <span class="n">view</span><span class="o">.</span><span class="na">orientation</span> <span class="o">=</span> <span class="n">LinearLayout</span><span class="o">.</span><span class="na">VERTICAL</span>
</span><span class='line'>        <span class="n">view</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过 lambda 的内容，来实例化一个 _LinearLayout，并指定其 orientation 为 LinearLayout.VERTICAL。另外， ankoView 方法，这里所做的工作：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">inline</span> <span class="n">fun</span> <span class="o">&lt;</span><span class="n">T</span> <span class="o">:</span> <span class="n">View</span><span class="o">&gt;</span> <span class="n">Activity</span><span class="o">.</span><span class="na">ankoView</span><span class="o">(</span><span class="nl">factory:</span> <span class="o">(</span><span class="nl">ctx:</span> <span class="n">Context</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">T</span><span class="o">,</span> <span class="nl">theme:</span> <span class="n">Int</span><span class="o">,</span> <span class="nl">init:</span> <span class="n">T</span><span class="o">.()</span> <span class="o">-&gt;</span> <span class="n">Unit</span><span class="o">):</span> <span class="n">T</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">val</span> <span class="n">ctx</span> <span class="o">=</span> <span class="n">AnkoInternals</span><span class="o">.</span><span class="na">wrapContextIfNeeded</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">theme</span><span class="o">)</span>
</span><span class='line'>    <span class="n">val</span> <span class="n">view</span> <span class="o">=</span> <span class="n">factory</span><span class="o">(</span><span class="n">ctx</span><span class="o">)</span>
</span><span class='line'>    <span class="n">view</span><span class="o">.</span><span class="na">init</span><span class="o">()</span>
</span><span class='line'>    <span class="n">AnkoInternals</span><span class="o">.</span><span class="na">addView</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">view</span><span class="o">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">view</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>对 context 做以包装，通过 factory 方法得到 View , 再调用 view 的 lambda init 方法。之后通过 AnkoInternals 的 addView 方法对 view 进行添加操作，将其添加至视图中。</p>

<p>回到上面的视图书写中。因为 Android 中的 view 都实现了接口 ViewManager，而这里的扩展方法，针对类便是以 Context、ViewManager、Activity 这三个为主。包含下面的 editText 方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">inline</span> <span class="n">fun</span> <span class="n">ViewManager</span><span class="o">.</span><span class="na">editText</span><span class="o">():</span> <span class="n">android</span><span class="o">.</span><span class="na">widget</span><span class="o">.</span><span class="na">EditText</span> <span class="o">=</span> <span class="n">editText</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'><span class="n">inline</span> <span class="n">fun</span> <span class="n">ViewManager</span><span class="o">.</span><span class="na">editText</span><span class="o">(</span><span class="nl">init:</span> <span class="o">(</span><span class="nd">@AnkoViewDslMarker</span> <span class="n">android</span><span class="o">.</span><span class="na">widget</span><span class="o">.</span><span class="na">EditText</span><span class="o">).()</span> <span class="o">-&gt;</span> <span class="n">Unit</span><span class="o">):</span> <span class="n">android</span><span class="o">.</span><span class="na">widget</span><span class="o">.</span><span class="na">EditText</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">ankoView</span><span class="o">(</span><span class="err">`</span><span class="n">$$Anko$Factories$Sdk25View</span><span class="err">`</span><span class="o">.</span><span class="na">EDIT_TEXT</span><span class="o">,</span> <span class="n">theme</span> <span class="o">=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span> <span class="n">init</span><span class="o">()</span> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中 editText 方法会调用到 ViewManager 的扩展，紧接着调用到下面的 editText，也就意味着 ankoView 方法的调用，所以在调用 editText 及 button 后，都会执行它们的 addView 方法。
以上，便是简单的通过扩展来实现 view 布局的 DSL 了。另，还有其他更加复杂的扩展可再自行研究了。</p>

<h2>Android KTX</h2>

<p><a href="https://github.com/android/android-ktx">android/android-ktx</a>  其定义了一系列关于 Android App 开发中 Kotlin 的扩展，其目的是将我们用 Kotlin 开发 Android 代码更加简化，而并不是对已有的 Android API 添加新的功能。</p>

<p>如：</p>

<p><em>Kotlin:</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">val</span> <span class="n">uri</span> <span class="o">=</span> <span class="n">Uri</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">myUriString</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Kotlin with Android KTX:</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">val</span> <span class="n">uri</span> <span class="o">=</span> <span class="n">myUriString</span><span class="o">.</span><span class="na">toUri</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是一个 Extension functions 的应用，另外还有其他关于 Lambda 等的应用。不过其目前处于一个 preview 的开发应用，可对其未支持的 API 提 pr，进行贡献开发。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://dzone.com/articles/kotlin-dsl-from-theory-to-practice">Kotlin DSL: From Theory to Practice - DZone Java</a></li>
<li><a href="https://proandroiddev.com/writing-dsls-in-kotlin-part-1-7f5d2193f277">Writing DSLs in Kotlin (part 1) – ProAndroidDev</a></li>
<li><a href="https://proandroiddev.com/writing-dsls-in-kotlin-part-2-cd9dcd0c4715">Writing DSLs in Kotlin (part 2) – ProAndroidDev</a></li>
<li><a href="https://kotlinlang.org/docs/reference/lambdas.html#higher-order-functions">Higher-Order Functions and Lambdas - Kotlin Programming Language</a></li>
<li><a href="https://kotlinlang.org/docs/reference/extensions.html">Extensions - Kotlin Programming Language</a></li>
<li><a href="https://kotlinlang.org/docs/reference/type-safe-builders.html">Type-Safe Groovy-Style Builders - Kotlin Programming Language</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[图片加载理解之 UIL]]></title>
    <link href="http://alighters.github.io/blog/blog/2017/01/25/understand-imageloader/"/>
    <updated>2017-01-25T16:46:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2017/01/25/understand-imageloader</id>
    <content type="html"><![CDATA[<p>针对Android 的图片加载，有着太多的细节问题，需要注意，本文针对 <a href="https://github.com/nostra13/Android-Universal-Image-Loader">Universal Image Loader</a> 的一些技术点，进行细致的剖析一番。由于涉及的内容，所以打算分成三个系列，分别从视图（View），数据（Cache）,网络等三个大的方面讲起：</p>

<!-- more -->


<h2>视图</h2>

<h3>1. ImageLoader是如何实现对ImageView的包装的？</h3>

<p>  1）ImageAware:针对 ImageView 行为的抽象&ndash;接口，获取 ImageView 的宽度、高度、scaleType、id；以及包装的ImageView，设定图片；
  2）ViewAware: 抽象类，实现ImageAware。提供了ViewRef的属性，来持有ImageView的弱引用；实现方式：this.viewRef = new WeakReference<View>(view)。</p>

<p>使用弱引用的目的，避免了异步耗时任务对 ImageView 的强引用，能够使 ImageView 能够被及时回收，防止内存泄露的发生（虽然很短暂的一瞬间）。</p>

<h3>2. 在 ListView 加载显示图片的时候，当一个正在加载图片的 View 被滑出屏幕，ImageLoader 是否会取消此次下载图片任务，是如何取消的？</h3>

<p>首先在加载获取图片时，是通过 ImageLoaderEngine 来进行提交进行的。在 ImageLoaderEngine 是启动线程池来异步加载图片，分别从内存、磁盘、网络中进行获取。而在这几步之前，会首先进行 View 是否被回收的判断，若是被回收，则抛出异常，并调用相应 listener 的 cancel 方法。</p>

<h3>3. 在 ListView 的滑动过程中，如何暂停所有的图片加载任务？</h3>

<p>在 ImageLoader 中，其提供了一个 <code>PauseOnScrollListener</code> 的类，在使用 <code>ListView</code> 的时，只需进行设置即可。</p>

<p>其实现原理则是在通过调用  ImageLoader 的 <code>pause</code> 和 <code>resume</code> 方法，在调用图片加载的第一步会进行判断，是否设置了<strong>暂停</strong>状态，如果设置了，则会通过对象锁 <code>pauseLock</code> 的 wait 方法，来使当前图片加载线程处于阻塞状态；当调用了 <code>resume</code> 方法，则会调用了 <code>pauseLock</code> 的 notifyAll 方法，来恢复线程的执行。</p>

<p>这样做的作用是达到 CPU 资源的充分利用，通过暂停异步图片加载的线程，来不使 UI 线程卡顿，提高 ListView 在滑动过程的流畅程度。</p>

<h3>4. 怎样针对 View 的特定大小，处理获取到图片的大小？</h3>

<p>在 ImageLoader 调用 <code>displayImage</code> 方法时，在指定相应的 ImageView 时，也可以传递一个 <code>ImageSize</code> 的参数，用来指定所需显示的图片的大小；若是不传的话，则会获取 ImageView 的 width 及 height，若获取到的值为 0，那么这个相应 <code>ImageSize</code> 的宽与高则会取屏幕的宽与高。</p>

<p>另外，在对图片进行缓存时，生成相应的缓存 Key 的值是根据图片的 <code>uri</code> 和 <code>targetSize</code>  （指定的图片大小）来生成的，所以，不同大小的 ImageView 获取到的 bitmap 则是不同的，即从缓存中拿到的是不同的。</p>

<p>这里，可以看出相应大小的 ImageView 与内存的缓存中的不同的 bitmap 是相对应的。而 diskCache 中则是以 uri 为键值的磁盘文件。另外，由磁盘文件转换为相应的 bitmap 则是对应下面问题的答案。</p>

<h3>5. 图片是如何进行压缩的？</h3>

<p>我们知道图片加载到内存之中，是以 Bitmap 的形式存在的。而在 Android App 中，内存是非常稀缺的资源。所以当加载大图片时，需要根据当前显示图片的控件，采用相应手段，只在内存中加载出来相应大小的 Bitmap ，来避免 <code>Out Of Memory</code> 的发生。</p>

<p>这里采用 BitmapFactory 来进行图片文件转换至 Bitmap 对象，通过其 <code>decodeStream</code> 方法，若是我们传递的参数 Options，其指定了  <code>inJustDecodeBounds</code> 为 true， 则只会获取图片的大小（并不会生成 Bitmap 对象），其输出值为 Options 对象的 <code>outWidth</code> 和 <code>outHeight</code>。</p>

<p>根据获取到的图片大小，以及我们要显示图片的 View 的大小，便可计算出我们需要对图片进行缩放的比例，即指定 Options 参数的 <code>inSampleSize</code> 的值。（此时 inJustDecodeBounds 的值为 false）这样获取到的 Bitmap 对象就是进行缩放调整过的图像。</p>

<p>这一步便是 Android 中调整 Bitmap 大小，减少内存消耗关键性的一步。</p>

<h2>数据</h2>

<p>数据主要体现在对图片的缓存处理。UIL 对图片的缓存为三级缓存，一是内存，二是磁盘，三是网络（远程的服务器）。</p>

<p>在内存中保存的为 Bitmap 对象，其是根据相应的 View 和 View 大小为 Key 值的。即加载的是同一张图片的两个不同大小的 View，会在内存缓存中存在针对这张图片的两个 Bitmap 对象。而磁盘中缓存的则只有这一张图片文件，即从远程服务器中下载到本地的图片文件。</p>

<p>若是本地磁盘中没有响应的图片文件的话，则会通过网络从远程服务器中下载图片至本地。</p>

<h2>网络</h2>

<p>从网络中获取图片，UIL 使用的是 <code>HttpURLConnection</code>，来执行图片的获取下载。对应逻辑代码是在 <code>ImageLoader</code> 接口中，其定义了由图片 imageUri，来得到 InputStream 。另外以指定 Scheme 的方式（如 HTTP，FILE，ASSETS，DRAWABLE） 来得到图片的输入流。</p>

<h2>总结</h2>

<p>UIL 作为图片加载的入门库，其逻辑代码也是写的非常漂亮。结构化清晰，简单明了，对各个模块都由一个接口来定义，极大地丰富细节的实现，像不同的内存、磁盘缓存策略及图片下载获取方式，另外这些策略都可以在 ImageLoader 的配置策略进行修改。总之，这个库是一个不错的学习 Android 图片加载的资料。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://github.com/nostra13/Android-Universal-Image-Loader/wiki/Useful-Info">ImageLoader Useful Info</a></li>
<li><a href="https://github.com/nostra13/Android-Universal-Image-Loader">ImageLoader</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React Native 之 JS 分离]]></title>
    <link href="http://alighters.github.io/blog/blog/2017/01/23/reactnative-seprate-js/"/>
    <updated>2017-01-23T13:34:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2017/01/23/reactnative-seprate-js</id>
    <content type="html"><![CDATA[<p>项目中遇到了要使 JS 与客户端分离的问题，即由前端开发人员开发相应的 JS 部分，客户端人员（Android 和 Ios）开发对应的 Native 部分。</p>

<p>不过幸运的是，React Native 对这部分内容已经做了支持。主要的思想是，当进入手机端的 RN 界面时，通过加载 JS 部分生成的 bundle，来达到 JS 测试开发的目的。</p>

<p>在前端开发时，需要通过启动 npm server，连接手机端的 server，来进行开发。 下面对其中的过程做一笔记：</p>

<!-- more -->


<h3>1.分离 JS 部分</h3>

<p>前端开发所需要的东西只是 npm 的配置文件 <code>package.json</code> 及相应的 index 文件（index.android.js 和 index.ios.js）。</p>

<p>当然种类还是需要配置环境，根据 <code>package.json</code> 文件，执行 <code>npm install</code> 即可，完成之后会生成相应的  <code>node_modules</code> 目录。另外，需要安装的是 react-native-cli 的工具。执行如下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g react-native-cli</span></code></pre></td></tr></table></div></figure>


<p>当需要升级的时候，执行如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm update react-native-cli -g</span></code></pre></td></tr></table></div></figure>


<p>之后，当我们需要启动一个 Server 的时候，在包含 index 文件和 node_modules 目录下，执行如下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm start</span></code></pre></td></tr></table></div></figure>


<p>或者如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>react-native start</span></code></pre></td></tr></table></div></figure>


<p>这样，便可启动一个用于提供 JS 的 Server.</p>

<h3>2.对接调试</h3>

<p>在启动了 JS 的 server 之后，会在命令行中看到有关服务的地址和端口信息。手机端在对接 RN 的内容并启动之后，通过在 RN 界面的设置界面（使用菜单键或者摇一摇打开）连接 JS Server  的地址和端口即可。另外可以启用 Hot Loading 模式来实时加载 JS。</p>

<p>若是我们指定其他的端口，可以使用如下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>react-native start --port 8088</span></code></pre></td></tr></table></div></figure>


<h3>3.指定端口</h3>

<p>若是需要在真机上进行调试，需要注意端口的启用：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>adb reverse tcp:8081 tcp:8081</span></code></pre></td></tr></table></div></figure>


<p>如果需要改变端口，可参考链接  <a href="http://blog.grio.com/2015/07/android-tip-adb-reverse.html">Android Tip: adb reverse | Grio Blog</a>。</p>

<h2>遇到的问题</h2>

<h3>64位手机不兼容的问题</h3>

<p>这里可参照链接 <a href="https://corbt.com/posts/2015/09/18/mixing-32-and-64bit-dependencies-in-android.html">Mixing 32- and 64-bit Dependencies in Android - Corbt blog</a> 过滤掉 64 位的使用。</p>

<h3>Could not get BatchedBridge</h3>

<p>这个错误表示 RN 界面找不到需要加载的 js bundle，可以通过尝试以下几个途径去解决：
1. 进入 RN 的设置界面，在 Dev Setting 中 Debugging 中指定 Server 的地址和端口号。
2. 另外，需要确保手机端和 Server 端保证在同一个 WIFI 之下。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://facebook.github.io/react-native/docs/getting-started.html">React Native Doc</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[理解 Multidex 生成]]></title>
    <link href="http://alighters.github.io/blog/blog/2017/01/16/multidex-generate/"/>
    <updated>2017-01-16T15:00:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2017/01/16/multidex-generate</id>
    <content type="html"><![CDATA[<h2>介绍</h2>

<p>在 Android 开发中，提到 65536 问题，就不得不提 Multidex 的解决方案。具体问题就是在 Android 打包的期间，是需要对 java 文件编译成 class 文件，class 文件信息过多而又冗余，这就再经过一步合并变成 dex 文件的过程（这一步是 dx 工具来处理的），其才是 Davilk 虚拟机加载识别的东西。而单个 dex 文件，其对方法数、字段数做了限制，即不能超过 65536，这便是问题的由来了。</p>

<p>当然，解决这个问题也是很简单的。在 gradle 中启用 Multidex，在 application 中添加 Multidex.install 方法。乍以为万事大吉了，但在我们项目中还是遇到了 65536 的问题，主要是因为项目太大，在生成 mainDex 的过程中，还是出现了方法数超过了 65536 的问题，解决这个问题的思想是要将 mainDex 中的一些类移除至其它的 dex 中。那这一步，应该怎么玩呢？这里先看一些 dx 工具为我们提供了什么？</p>

<!-- more -->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  [--multi-dex [--main-dex-list=&lt;file&gt; [--minimal-main-dex]]</span></code></pre></td></tr></table></div></figure>


<p>执行 dx 命令，可以看到其提供了 &ndash;multi-dex 的选项参数，需要接受的是一个文件的 &ndash;main-dex-list 以及一个最小化主 dex 的 &ndash;minimal-main-dex 参数。这里就是需要我们最终控制的地方，但要接触到这里，需要我们先看看 gradle plugin 是如何集成与使用它的？</p>

<h2>生成</h2>

<p>在使用 Android Studio 的时候，在 build.gradle 文件中，已经提供了 multidex 的支持。相应的选项是在 defaultConfig 中的 <code>multiDexEnabled</code> 设置为 true 即可。那其是如何生成多个 dex 的过程，就需要在 gradle plugin 的源码中来寻找答案了。</p>

<p>通过 gradle 编译生成 apk 的期间，可以通过 <code>Gradle Console</code> 视图查看 gradle 执行任务的输出，期间跟 multidex 几个相关的任务如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:app:transformClassesWithJarMergingForDevDebug UP-TO-DATE
</span><span class='line'>:app:collectDevDebugMultiDexComponents
</span><span class='line'>:app:transformClassesWithMultidexlistForDevDebug UP-TO-DATE
</span><span class='line'>:app:transformClassesWithDexForDevDebug UP-TO-DATE</span></code></pre></td></tr></table></div></figure>


<p>这几个任务对应在 gradle plugin 的源码中的位置为 TaskManager 的方法 <code>createPostCompilationTasks</code>。这里针对其中相关的 transform 和 task 做以简单的讲解：</p>

<h3>1. JarMergingTransform</h3>

<p>JarMergingTransform 的主要作用是将所用到的 jar 转换至一个单一的 Jar 中。具体输出的结果，可以在 build/intermediates/transforms/jarMerging 目录下，看到一个名称为 combined 的 jar 文件。</p>

<h3>2. CreateManifestKeepList</h3>

<p>CreateManifestKeepList 继承自 DefaultAndroidTask, 这一步会读取项目之前合并后的 manifest 文件，根据既定的规则，获取其中的 application、activity、service、provider、instrumentation 类，与 Mainifest 中的类组件进行比较来获取，最后会在 build/intermediates/multidex 下生成名为 manifest_keep.txt 的文件。</p>

<p>另外，此任务设置 <code>Filter</code> 类，支持对特定的类进行过滤，让指定的类保存在 maindex 中。但是此方法已被标记为 Deprecated, 可能会在后续的版本中废弃掉。</p>

<h3>3. MultiDexTransform</h3>

<p>MultiDexTransform 的主要任务是根据之前的 mainfest_keep 及一些 proguard 文件来生成 mainDex 中指定的类集合文件，对应生成的输出结果为 <code>maindexlist.txt</code> 。</p>

<p>但这里有个问题，就是 mainDex 的生成规则，其是如何指定哪些类在 mainDexList 中？</p>

<p>查看源码可看到它把这部分工作交给类 <code>ClassReferenceListBuilder</code>。其又调用了类 <code>MainDexListBuilder</code>，后者对应着 build_tools 中的 mainClasses 工具中处理依赖关系所使用到的类。这里真正的依赖判端逻辑是在 <code>ClassReferenceListBuilder</code> 中，所需要指定的两个参数 <code>path</code> 和 <code>jarOfRoots</code>，前者表示的是所需要处理的所有类文件的路径(对应上文的 combined.jar)，后者指定的是所需要在 mainDex 中的类（即处理依赖时的 root，获取 root 所依赖的类, 对应上述步骤中生成的 manifest_keep.txt 中的类），</p>

<p>其生成规则是遍历 <code>jarOfRoots</code> 中的 class 文件，将其对应程 <code>DirectClassFile</code> 对象（包含 class 信息的相应对象），之后从其中获取常量池中的类型，判断是类、方法、字段，并添加其类型所包含的类型信息。若是方法的时候，则需要的是方法的返回值类型以及参数值的类型。这里类型信息进行获取的时候，会从类、超类、实现的接口列表三个角度进行判断获取相应的类型信息。</p>

<p>所以说，这里的依赖类的获取，是通过当前类的常量池来进行获取判断的，不得不说很机智。</p>

<h3>4. DexTransform</h3>

<p>它被 dexTask 所使用，相对应的调用程序为 build-tools 中的 dx 程序。在 DexTransform 中的参数 dexOptions、mainDexListFile 指定了 dx 命令执行过程中所需要的参数。其主要的任务用来生成 apk 中的 dex 文件，若是指定了 multidex 为 true 时，则会根据 mainDexList 文件(指定哪些类会在 mainDex)来划分生成最后的多个 dex 文件。</p>

<p>这一步就是通过以上步骤的输出作为输入，进而执行 dx 命令的，来生成最终的 dex。了解到这里，接下来我们需要在以上的过程中动些手脚，来解决我们遇到的问题。</p>

<h2>解决</h2>

<h3>方法一：改变 keepList 任务列表</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>afterEvaluate {
</span><span class='line'>  project.tasks.each { task -&gt;
</span><span class='line'>      if (task.name.startsWith('collect') && task.name.endsWith('MultiDexComponents')) {
</span><span class='line'>          println "main-dex-filter: found task $task.name"
</span><span class='line'>          task.filter { name, attrs -&gt;
</span><span class='line'>              def componentName = attrs.get('android:name')
</span><span class='line'>              if ('activity'.equals(name)) {
</span><span class='line'>                  println "main-dex-filter: skipping, detected activity [$componentName]"
</span><span class='line'>                  return false
</span><span class='line'>              } else {
</span><span class='line'>                  println "main-dex-filter: keeping, detected $name [$componentName]"
</span><span class='line'>                  return true
</span><span class='line'>              }
</span><span class='line'>          }
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>这一步对应 gradle 执行过程中的 <code>CreateManifestKeepList</code>，利用其提供的 filter，进行一些过滤操作，其中 <code>name</code> 参数表示为节点类型，例如 activity、service、receiver 等; <code>attrs</code> 参数表示相应的节点信息，它是一个 Map 类型的参数，可表示的值形如 <code>['android:name':'com.example.ActivityClass']</code> 。</p>

<p>这一步可对 mainDex 中的组件信息做一些过滤，而不是添加所有的组件信息。像上述代码的处理就很残暴，把所有的 activity 都过滤掉。</p>

<blockquote><p>PS: 需要注意的是，在源码中的 setFilter 已经被标为废弃，可能会在后续的版本被替换掉，所以用这种方案需要所使用的 gradle plugin 版本注意一二。</p></blockquote>

<h3>方法二：修改 dx 的参数值</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>afterEvaluate {
</span><span class='line'>  tasks.matching {
</span><span class='line'>      it.name.startsWith('dex')
</span><span class='line'>      println("task name:" + it.name)
</span><span class='line'>  }.each { dx -&gt;
</span><span class='line'>
</span><span class='line'>      if (dx.additionalParameters == null) {
</span><span class='line'>          dx.additionalParameters = []
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>      //允许生成多个dex文件
</span><span class='line'>      dx.additionalParameters += '--multi-dex' // enable multidex
</span><span class='line'>
</span><span class='line'>      // 设置multidex.keep文件中class为第一个dex文件中包含的class，如果没有下一项设置此项无作用
</span><span class='line'>      dx.additionalParameters += "--main-dex-list=$projectDir/multidex.keep".toString()
</span><span class='line'>
</span><span class='line'>      //此项添加后第一个classes.dex文件只能包含-main-dex-list列表中class
</span><span class='line'>      dx.additionalParameters += '--minimal-main-dex'
</span><span class='line'>
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>这一步直接对应 dx 最终的调用，即修改我们上文所提到的参数值，将其替换我们手动填充的值，但是这一步的 multidex.keep 文件就需要我们折腾一二了。</p>

<p>不过针对这个方案，笔者是一直没有找到在 Task 中相对应的以 dex 开头的任务，所以这个方案没有生效。那为什么会有这种写法呢？笔者在 <code>Project</code> 中的 <code>Variant</code> 中相对应的 <code>ApkVariant</code> 类中看到一点信息，此接口定义了 <code>getDex()</code> 方法，对应实现在 <code>ApkVariantImpl</code> 中如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="nd">@Nullable</span>
</span><span class='line'> <span class="nd">@Override</span>
</span><span class='line'> <span class="kd">public</span> <span class="n">Object</span> <span class="nf">getDex</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>     <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">&quot;Access to the dex task is now impossible, starting with 1.4.0\n&quot;</span>
</span><span class='line'>             <span class="o">+</span> <span class="s">&quot;1.4.0 introduces a new Transform API allowing manipulation of the .class files.\n&quot;</span>
</span><span class='line'>             <span class="o">+</span> <span class="s">&quot;See more information: http://tools.android.com/tech-docs/new-build-system/transform-api&quot;</span><span class="o">);</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码中返回的值就是这个方案中与 <code>dx</code> 相对应的值。不过从异常信息中可以看到的是在 gradle plugin 1.4.0 的版本开始，此方法就已被废弃，而改为采用 transform 的实现。</p>

<p>所以此方案只针对 gradle plugin 1.4.0 之前的版本。</p>

<h3>方案三：修改 MainDexList</h3>

<p>这里所说的 MainDexList 对应着 bulld-tools 目录下的 dx 工具中 &ndash;main-dex-list 参数，与 Gradle  任务中相对应的是上文中提到的 <code>DexTransform</code> 的参数 <code>mainDexListFile</code>。意味着我们在调用 dx 命令（对应着执行 DexTransform）时，可对 KeepList 进行二次修改，保证 mainDex 中的类不超过限制，同时不出现 NoClassDefFoundError 的错误。</p>

<h3>最终方案：DexKnifePlugin</h3>

<p>推荐使用 <a href="https://github.com/ceabie/DexKnifePlugin">DexKnifePlugin</a>。来简单描述一下它的实现。其定义了一套类似 Proguard 的规则，用来定制生成 mainDex 所需 MainDexList 的规则，另外其考虑了 Gradle Plugin 针对 Dex 生成的两个不同版本的兼容。最后达到缩减、调整 MainDexList 来保证 mainDex 的生成无误。(是上述方案二和三的结合)</p>

<h2>扩展</h2>

<h3>NoClassDefFoundError 的出现</h3>

<p>出现这个错误时，解决办法是将异常中的这个类加至 mainDex 中。但是这个错误跟 <code>NotClassFoundException</code> 的区别，可查阅 <a href="http://stackoverflow.com/a/5756989">链接</a>。</p>

<p>其出现这个问题的说法，简单理解为虚拟机在第一次加载该类的出现了问题，当第二次再次使用这个类的时候，就会报出 NoClassDefFoundError。对应为我们 App 在运行时，在 mainDex 中有些类找不到，就会出现这样的错误。</p>

<p>但是为什么出现 NoClassDefFoundError 呢？从上面的分析可知 mainDex 并不会把它依赖的所有类都包含进去，那么其类加载的规则是什么样的？这些内容是跟 Dalvik 虚拟机相关的，任务量不小，就暂且留作 2017 年的一项学习任务了。</p>

<h2>总结</h2>

<p>文章简单介绍了 Gradle Plugin 处理 MultiDex 的步骤，若是需要对 MainDex 做特殊处理时，便可根据 Manifest 文件生成的 keepList 或者 DexTransform 中的 MainDexList 做处理。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multidex 的问题]]></title>
    <link href="http://alighters.github.io/blog/blog/2016/11/01/multidex-problems/"/>
    <updated>2016-11-01T18:10:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2016/11/01/multidex-problems</id>
    <content type="html"><![CDATA[<h2>降低启动速度的问题</h2>

<p>文章中提到的一点，在 Android 设备 4.4 及其之前的版本，当开启 Multidex 的时候，启动速度会延长 15% 。而 5.0及以上的设备因使用 ART 的方式，其默认支持多 dex 的加载。</p>

<h2>NoClassDefFoundError 的问题</h2>

<!-- more -->


<ul>
<li>查看加载的类问题
在目录  [buildDir]/intermediates/multi-dex/[buildType]/maindexlist.txt 中可查看在主 dex 文件中的类，（但并不是 100% 准确，可能会丢失一些类）</li>
<li>解决办法：配置一个新的 multidex.keep 文件，用来指定在 mainDex 中包含的类。通过配置 gradle 文件，指定 gradle 打包过程中，执行 dex 生成时的 keep 文件追加。具体实施是创建一个新的 task，使用 finalizedBy 来指定在 create**MainDexClassList 任务之后执行。另外还需要指定 dx 执行时，添加 &ndash;minimal-main-dex 选项，来使 maindex 最小化。</li>
</ul>


<h2>如何判断 App 启动过程中哪些类是需要加载的呢？</h2>

<p>通过使用类加载 ClassLoader 中，其提供了方法 findLoadedClass。这个方法的作用是用来判断某个类是否被加载，所以文章中使用的技巧就是通过读在 second dex files 中的类，来判断主 dex 是否加载到。若是加载到，则我们就需要将这个类添加至 main dex 来提高 App 的启动速度。</p>

<h2>解决与建议</h2>

<p> 出现 65k 的问题时候，通过其他方式（重构、优化第三方 SDK的使用）来尽量避免使用 Multidex;若是不可避免地使用，需要对 Multidex 的方式进行优化来使用，来尽量提高我们 App 的启动速度。</p>

<h3>延迟加载</h3>

<p>对纯 java 文件，可以将其单独打成一个 dex，利用 Multidex 加载的原理，在当我们使用到相应 java 文件的时候，再加载这个 dex，来执行相应代码的调用。（方案有些不成熟，不支持涉及到资源文件的情况。）</p>

<h2>其他</h2>

<h3>1. 工具 ClassShark</h3>

<p>在评论区，提到的一个软件 <a href="https://github.com/google/android-classyshark">android-classyshark</a>，可以帮我们更加容易分析 APK、dex、jar 中的使用内容，（不再通过 dex2jar, jd-gui等工具来查看）能够对 apk 中的内容一目了然, 功能非常强大。</p>

<blockquote><p>在 Android Studio 2.2 之后的版本，其已经支持了对 apk 的分析，可以直接点击进行查看。</p></blockquote>

<h3>2. dex2oat 与 dexopt</h3>

<p>评论中关于 5.0及以上不受影响的讨论，主要原因是因为 5.0 采用了 ART 的编译方式，其是在 app 安装的时候执行的，期间对 dex 文件采用了 dex2oat 的执行过程，来对 dex 文件进行优化。而 5.0 之前的设备是没有这一步，其采用的 dexopt 的过程，并处理的是单个 dex 文件，这样也会影响了 multidex 的启动速度，但是这个是每次打开 app 都会进行的，并不是安装时执行的。</p>

<blockquote><p>作者的关注点是在每次 App 打开的过程中， Multidex 带来的影响，所以这个讨论在这里并不是与主题太多相关，但是我们还是又必要了解一下的。</p></blockquote>

<h2>参考资料</h2>

<ul>
<li><a href="https://medium.com/groupon-eng/android-s-multidex-slows-down-app-startup-d9f10b46770f#.nvl5amjzl">Android’s multidex slows down app startup</a></li>
<li><a href="https://github.com/mmadev/multidex-sample">multidex-sample</a></li>
<li><a href="https://medium.com/@Macarse/lazy-loading-dex-files-d41f6f37df0e#.9ftjpld1s">Lazy Loading Dex files</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[创建 Gradle Plugin]]></title>
    <link href="http://alighters.github.io/blog/blog/2016/11/01/create-gradle-plugin/"/>
    <updated>2016-11-01T18:09:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2016/11/01/create-gradle-plugin</id>
    <content type="html"><![CDATA[<p>在使用 Android Studio 开发的同时，必定离不开 Gradle，再加之最近对 Gradle 在 InstanRun 所扮演的角色颇有兴趣。所以，这里先有一个开篇，理解并编写简单的 gradle plugin。</p>

<h2>写一个简单的插件</h2>

<p>创建一个 build.gradle 文件</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="n">GreetingPlugin</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">GreetingPlugin</span> <span class="kd">implements</span> <span class="n">Plugin</span><span class="o">&lt;</span><span class="n">Project</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Project</span> <span class="n">project</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">project</span><span class="o">.</span><span class="na">task</span><span class="o">(</span><span class="s1">&#39;hello&#39;</span><span class="o">)</span> <span class="o">&lt;&lt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">println</span> <span class="s2">&quot;Hello from the GreetingPlugin&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在当前目录下，执行 <code>gradle -q hello</code>，会得到输出：Hello from the GreetingPlugin</p>

<h2>设置输入参数</h2>

<p>若是需要通过类型来指定参数，可以自定义一个 Extension 相应的 class, 并添加至 project 的 extensions 中，指定名称为 greeting，使用 greeting 来设定参数。替换上面的 build.gradle 文件内容，代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="n">GreetingPlugin</span>
</span><span class='line'>
</span><span class='line'><span class="n">greeting</span><span class="o">.</span><span class="na">message</span> <span class="o">=</span> <span class="s1">&#39;Hi from Gradle&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">GreetingPlugin</span> <span class="kd">implements</span> <span class="n">Plugin</span><span class="o">&lt;</span><span class="n">Project</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Project</span> <span class="n">project</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Add the &#39;greeting&#39; extension object</span>
</span><span class='line'>        <span class="n">project</span><span class="o">.</span><span class="na">extensions</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="s2">&quot;greeting&quot;</span><span class="o">,</span> <span class="n">GreetingPluginExtension</span><span class="o">)</span>
</span><span class='line'>        <span class="c1">// Add a task that uses the configuration</span>
</span><span class='line'>        <span class="n">project</span><span class="o">.</span><span class="na">task</span><span class="o">(</span><span class="s1">&#39;hello&#39;</span><span class="o">)</span> <span class="o">&lt;&lt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">println</span> <span class="n">project</span><span class="o">.</span><span class="na">greeting</span><span class="o">.</span><span class="na">message</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">GreetingPluginExtension</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">def</span> <span class="n">String</span> <span class="n">message</span> <span class="o">=</span> <span class="s1">&#39;Hello from GreetingPlugin&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行同上命令，会得到输出 Hi from Gradle.</p>

<h2>利用闭包输入参数</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="n">GreetingPlugin</span>
</span><span class='line'>
</span><span class='line'><span class="n">greeting</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">message</span> <span class="o">=</span> <span class="s1">&#39;Hi&#39;</span>
</span><span class='line'>    <span class="n">greeter</span> <span class="o">=</span> <span class="s1">&#39;Gradle&#39;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">GreetingPlugin</span> <span class="kd">implements</span> <span class="n">Plugin</span><span class="o">&lt;</span><span class="n">Project</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Project</span> <span class="n">project</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">project</span><span class="o">.</span><span class="na">extensions</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="s2">&quot;greeting&quot;</span><span class="o">,</span> <span class="n">GreetingPluginExtension</span><span class="o">)</span>
</span><span class='line'>        <span class="n">project</span><span class="o">.</span><span class="na">task</span><span class="o">(</span><span class="s1">&#39;hello&#39;</span><span class="o">)</span> <span class="o">&lt;&lt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">println</span> <span class="s2">&quot;${project.greeting.message} from ${project.greeting.greeter}&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">GreetingPluginExtension</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">message</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">greeter</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过以闭包的格式来设置 greeting 参数 message 和 greeter，来控制输出。
执行之后，会得到输出 Hi from Gradle.</p>

<h2>输出文件</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kd">class</span> <span class="nc">GreetingToFileTask</span> <span class="kd">extends</span> <span class="n">DefaultTask</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">def</span> <span class="n">destination</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">File</span> <span class="nf">getDestination</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">project</span><span class="o">.</span><span class="na">file</span><span class="o">(</span><span class="n">destination</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@TaskAction</span>
</span><span class='line'>    <span class="kt">def</span> <span class="nf">greet</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">def</span> <span class="n">file</span> <span class="o">=</span> <span class="n">getDestination</span><span class="o">()</span>
</span><span class='line'>        <span class="n">file</span><span class="o">.</span><span class="na">parentFile</span><span class="o">.</span><span class="na">mkdirs</span><span class="o">()</span>
</span><span class='line'>        <span class="n">file</span><span class="o">.</span><span class="na">write</span> <span class="s2">&quot;Hello!&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="nf">greet</span><span class="o">(</span><span class="nl">type:</span> <span class="n">GreetingToFileTask</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">destination</span> <span class="o">=</span> <span class="o">{</span> <span class="n">project</span><span class="o">.</span><span class="na">greetingFile</span> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="nf">sayGreeting</span><span class="o">(</span><span class="nl">dependsOn:</span> <span class="n">greet</span><span class="o">)</span> <span class="o">&lt;&lt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">println</span> <span class="nf">file</span><span class="o">(</span><span class="n">greetingFile</span><span class="o">).</span><span class="na">text</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">ext</span><span class="o">.</span><span class="na">greetingFile</span> <span class="o">=</span> <span class="s2">&quot;$buildDir/hello.txt&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码中首先定义了 <code>GreetingToFileTask</code> 的 task，含有一个属性名称为 <code>destination</code>，通过使用 <code>@TaskAction</code> 的注解，指定了该 task 所执行的内容。之后，将其以参数的形式传至 <code>greet</code> 的 task 之中，并设置了 destination 属性的值为当前目录下 <code>build/hello.txt</code>。最后使用 sayGreeting 的 task 来依赖 greet。
在当前目录下，执行 <code>gradle -q sayGreeting</code>, 会得到 Hello! 的输出，并会创建 build 目录，及其下面 hello.txt 的文件且其内容为 Hello!。</p>

<h2>项目创建</h2>

<p>1.在新的 Library 中，将其中的 build.gradle 文件改为如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;groovy&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">compile</span> <span class="nf">gradleApi</span><span class="o">()</span>
</span><span class='line'>    <span class="n">compile</span> <span class="nf">localGroovy</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>2.编写 groovy 插件代码
在 src/main 目录下，建立 groovy 文件夹，之后是相应的包名路径，在路径下创建 GreetingPlugin.groovy 的文件，内容如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">lighters</span><span class="o">.</span><span class="na">gradle</span><span class="o">.</span><span class="na">lib</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.gradle.api.Plugin</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.gradle.api.Project</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">GreetingPlugin</span> <span class="kd">implements</span> <span class="n">Plugin</span><span class="o">&lt;</span><span class="n">Project</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Project</span> <span class="n">project</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">project</span><span class="o">.</span><span class="na">task</span><span class="o">(</span><span class="s1">&#39;hello&#39;</span><span class="o">)</span> <span class="o">&lt;&lt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">println</span> <span class="s2">&quot;hello&quot;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>3.配置插件，编写 <code>src/main/resources/META-INF/gradle-plugins/com.lighters.gradletest.properties</code>，设置其内容，为相应的类名称：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">implementation</span><span class="o">-</span><span class="n">class</span><span class="o">=</span><span class="n">com</span><span class="o">.</span><span class="na">lighters</span><span class="o">.</span><span class="na">gradle</span><span class="o">.</span><span class="na">lib</span><span class="o">.</span><span class="na">GreetingPlugin</span>
</span></code></pre></td></tr></table></div></figure>


<p>4.发布至本地仓库
在 Library 的 build.gradle 文件中，添加如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mavenCentral</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">group</span><span class="o">=</span><span class="s1">&#39;com.lighters.gradle.lib&#39;</span>
</span><span class='line'><span class="n">version</span><span class="o">=</span><span class="s1">&#39;1.0.1&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">uploadArchives</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mavenDeployer</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">repository</span><span class="o">(</span><span class="nl">url:</span> <span class="n">uri</span><span class="o">(</span><span class="s1">&#39;../repo&#39;</span><span class="o">))</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>之后，执行 gradle 刷新同步任务，会在 other 中，看到 uploadArchives 的任务，执行这个任务，就会在本地创建好 repo 的仓库。</p>

<p>5.在主项目中引入使用如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">buildscript</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">maven</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">url</span> <span class="nf">uri</span><span class="o">(</span><span class="s1">&#39;../repo&#39;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">classpath</span> <span class="nl">group:</span> <span class="s1">&#39;com.lighters.gradle.lib&#39;</span><span class="o">,</span> <span class="nl">name:</span> <span class="s1">&#39;gradletest&#39;</span><span class="o">,</span>
</span><span class='line'>                  <span class="nl">version:</span> <span class="s1">&#39;1.0.1&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;com.lighters.gradletest&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Gradle 任务 build 完成之后，会看到一个新多出来的 hello 任务，执行这个任务，则可得到 &ldquo;hello&rdquo; 的输出。</p>

<h2>扩展</h2>

<ul>
<li><p>自定义 Task
可通过实现 <a href="https://docs.gradle.org/current/javadoc/org/gradle/api/DefaultTask.html">DefaultTask</a> ，来定义 Task, 通过使用 TaskAction 注解的形式，来指定 task 的输出行为。</p></li>
<li><p>参数传递
使用 project 对象的 extendtions 参数来创建参数对象，如下：</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">project</span><span class="o">.</span><span class="na">extensions</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="s1">&#39;myArgs&#39;</span><span class="o">,</span> <span class="n">MyCustomPluginExtension</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>其中，MyCustomPluginExtension 是一个简单的对象，只指定属性字段即可。</p></blockquote>

<p>另外，也可指定 <code>myArgs</code> 参数，来实现嵌套参数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'> <span class="n">project</span><span class="o">.</span><span class="na">myArgs</span><span class="o">.</span><span class="na">extensions</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="s1">&#39;nestArgs&#39;</span><span class="o">,</span> <span class="n">MyNestPluginExtension</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Demo</h2>

<p>具体代码，可参照：<a href="https://github.com/alighters/GradleDemos">GradleDemos</a></p>

<h2>参考资料</h2>

<ul>
<li><a href="https://docs.gradle.org/current/userguide/custom_plugins.html">Writing Custom Plugins</a></li>
<li><a href="https://docs.gradle.org/current/userguide/custom_tasks.html">Writing Custom Task Classes</a></li>
<li><a href="http://blog.csdn.net/sbsujjbcy/article/details/50782830">如何使用Android Studio开发Gradle插件</a></li>
<li><a href="http://blog.csdn.net/liuhongwei123888/article/details/50541759">自定义Gradle插件（一）</a></li>
<li><a href="http://blog.csdn.net/liuhongwei123888/article/details/50542104">自定义Gradle插件（二）</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[位运算之巧用]]></title>
    <link href="http://alighters.github.io/blog/blog/2016/10/27/bit-skill/"/>
    <updated>2016-10-27T14:12:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2016/10/27/bit-skill</id>
    <content type="html"><![CDATA[<p>之前接触到位运算的时候，总是似懂非懂，一脸萌比。最近花点时间，细细研究，其实发现也相当简单。下面来举两个相当实用的例子，来彻底掌握位运算。</p>

<h2>异或实现交换</h2>

<p>在涉及到两个数的相交换的诸多实现中，一个不错的及格的算法，就是利用加法来做。如下：</p>

<!-- more -->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a = a + b;
</span><span class='line'>b = a - b;
</span><span class='line'>a = a - b;</span></code></pre></td></tr></table></div></figure>


<p>写出这个的话，还算不错，再来个惊艳的，就是利用位运算，如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a = a ^ b;
</span><span class='line'>b = a ^ b;
</span><span class='line'>a = a ^ b;</span></code></pre></td></tr></table></div></figure>


<p>如此工整的代码也是没谁了。初始乍看起来，是一脸懵逼，不知道其到底原理何在？
首先，说说加法。加法与减法是相对的，因为相加得到的和为固定值，再利用减法可以逆转回去，根据其中相加两个数的一个值，得到另一个值。这里，我称之为加减法的可逆转性。
再者，来看看异或运算，是如何做到的？先看如下的表格，来理解异或运算的特性。</p>

<table>
<thead>
<tr>
<th> Tables        </th>
<th style="text-align:center;"> Col1  </th>
<th style="text-align:center;"> Col2  </th>
<th style="text-align:center;"> Col3  </th>
<th style="text-align:center;"> Col4  </th>
</tr>
</thead>
<tbody>
<tr>
<td> a             </td>
<td style="text-align:center;"> 0     </td>
<td style="text-align:center;"> 1     </td>
<td style="text-align:center;"> 0     </td>
<td style="text-align:center;"> 1     </td>
</tr>
<tr>
<td> b             </td>
<td style="text-align:center;"> 0     </td>
<td style="text-align:center;"> 1     </td>
<td style="text-align:center;"> 1     </td>
<td style="text-align:center;"> 0     </td>
</tr>
<tr>
<td> c(result)     </td>
<td style="text-align:center;"> 0     </td>
<td style="text-align:center;"> 0     </td>
<td style="text-align:center;"> 1     </td>
<td style="text-align:center;"> 1     </td>
</tr>
</tbody>
</table>


<p>其中，c 为 a ^ b 的值，可以看出异或最直白的表述为相同为假（即0），不同为真（即1）。另外，也可以运算得出 a = b ^ c, b = a ^ c。我称之为真正的可逆性，即不再需要其他运算符，即可再转换回去。</p>

<p>这时，结合上述的表格，便可理解上述的异或交换算法了。（若是没理解，也不用着急，算法就是慢慢理解，慢慢消化的，可在闲时慢慢回想，揣摩这段简单的代码。）</p>

<h2>实现两个数的相加</h2>

<p>这是在网上看到的一道<a href="https://www.h5jun.com/post/multiply7.html">面试题</a>，需要不采用加减乘除的四则运算，来实现一个数的 7倍。</p>

<p>7 倍的问题可以转换为(8 - 1) 的问题，即左移 3 位，然后加上自身的负数。最终还是转换为如何实现加法的问题。所以这里只关注如何实现加法的核心问题。</p>

<p>首先，先以两个二进制数相加，查看其有什么特征。</p>

<p>  0 1 1 0
  0 1 0 0
这两个数相加，可得 1010, 期间可拆分为两个过程，相对应的位数为 0 与 1 或 1 与 0 相加所得为 1 的过程一；相对应的位数为 1 与 1 相加所得为 10，即需要发生进位的过程二。（0 与 0 相加为 0，不需要考虑）。</p>

<p>过程一可转换为异或运算，过程二转换为与运算，然后左移一位，来发生进位。若此时所得的数为 0，则表示没有进位发生，上步异或的结果，即为运算的结果；若不为 0，则表示有进位，则需要拿这个数，与相与所得的数，来重复过程一，过程二。写出的算法如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">add</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="o">(</span><span class="n">x</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">result</span> <span class="o">=</span> <span class="n">x</span> <span class="o">^</span> <span class="n">y</span><span class="o">;</span>
</span><span class='line'>      <span class="n">x</span> <span class="o">=</span> <span class="o">(</span><span class="n">x</span> <span class="o">&amp;</span> <span class="n">y</span><span class="o">)</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>      <span class="n">y</span> <span class="o">=</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">y</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>测试所得，对负数也是没问题的，（这里只要不发生溢出，都是没有问题的）。纠其原因，还是计算机在运算的时候，是采用补码的形式来运行的。另外补码的相加减，符号位也是参与运算的。</p>

<h2>参考资料</h2>

<ul>
<li><a href="http://www.cnblogs.com/zhangziqiu/archive/2011/03/30/ComputerCode.html">原码, 反码, 补码 详解</a></li>
<li><a href="https://www.h5jun.com/post/multiply7.html">别人家的面试题：不用加减乘除，求整数的7倍</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac 下 Terminal 快捷键]]></title>
    <link href="http://alighters.github.io/blog/blog/2016/10/27/terminal-command/"/>
    <updated>2016-10-27T14:11:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2016/10/27/terminal-command</id>
    <content type="html"><![CDATA[<p>在mac下，是没有meta键的。具体的修改方法：</p>

<ul>
<li>若是系统自带的terminal，在设置的键盘选项中，将“使用option键作为meta键”</li>
<li><p>若是在iterm下，需要在profiles->keys中，将“Left option key acts as”修改为“+Esc”即可。</p>

<p>  <!-- more --></p></li>
<li><p>ctrl + a/e 回到命令行的开头和结尾</p></li>
<li>alt + b/f  向前/后一个单词</li>
<li>ctrl + u/k 剪切光标前/后 所有单词</li>
<li>ctrl + y 撤销上个操作</li>
<li>ctrl + w 删除光标前一个单词</li>
<li>ctrl + b/f 光标向前/后移动一个位置</li>
<li><p>ctrl + h 删除光标位置的前一个字符</p></li>
<li><p>command + ; 显示使用过的命令</p></li>
<li>command + shift + h 弹出历史记录窗口</li>
</ul>


<h3>参考资料</h3>

<ul>
<li><a href="http://ixhan.com/2009/11/osx-terminal-keyshort/">OSX Terminal(终端) 使用快捷键</a></li>
<li><a href="http://wulfric.me/2015/08/iterm2/">你应该知道的 iTerm2 使用方法&ndash;MAC终端工具</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[编程之法-字符串]]></title>
    <link href="http://alighters.github.io/blog/blog/2016/10/27/algorithm-string/"/>
    <updated>2016-10-27T14:11:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2016/10/27/algorithm-string</id>
    <content type="html"><![CDATA[<h2>字符串的旋转</h2>

<p>题：abcedf -> edfabc</p>

<h3>1.蛮力移位</h3>

<p>原理：将后一个位置的字符向前移动，第一个字符放置在最后的位置上。
即分三步完成 bcedfa -> cedfab -> edfabc</p>

<!-- more -->


<h3>2. 三步反转</h3>

<p>拆分为两段即 abc 与 edf，对他俩分别进行反转得到 cbafde；再对整个进行反转，得到结果</p>

<p>练习：单词翻转
“I am a student.&ldquo; -> "student. a am I&rdquo;.
思路：按空格分隔，分别进行反转，再整理反转。</p>

<h2>字符串的包含。</h2>

<p>题：a: &ldquo;ABCD&rdquo;, b:&ldquo;BAD&rdquo; 则包含为true;
    若b 是 ”BCE", 为 false;
    若b 是 “AA", 为true. 即字符串b 中出现的字符都必须按在 a 中出现。</p>

<h3>1.蛮力轮询</h3>

<h3>2.排序后轮询</h3>

<p>排序使用快排，需要 O(mlogm) + O(nlogn), 线性扫描需要 O(m+n)次操作。</p>

<h3>3.素数相乘</h3>

<p>原理：利用素数相乘取余数的结果来判断，是否存在。（若是余数为0，表示存在，若是余数不为0，则表示不存在）</p>

<p>分步：
1.将 a 中出现的字符对应到 26 个素数当中，并相乘得到结果
2.遍历 b 中的字符，取得相应的素数，与上一步乘积的结果，取余进行判断。</p>

<p>现实不可行：前16个素数相乘的结果会超出 long 能表示的结果。</p>

<h3>4.位运算法</h3>

<p>原理：将 a 中的字符存至 hash 表中，b 来进行获取判断。
位运算：先用一个 int 来表示最终的结果，因为 Int 为32位，完全满足 26 个字符的要求，对 a 中的字符，对应 26 个字符的顺序进行移位放置 a 中。
即 hash |= (1 &lt;&lt; a[i] - &lsquo;A&rsquo;)
再进行 b 中判断的时候，直接进行相与，即可得到结果。</p>

<h2>字符串的全排列</h2>

<h3>1.递归实现</h3>

<h3>2.字典序排列</h3>

<p>原理：起点字典序最小的排列 1 ~ n 如 ”12345“；终点 n ~ 1, 如 ”54321“。 执行过程就是获取比当前字典序大的下一个排列。</p>

<p>举例： 21543，
1. 获得第一个升序的数字为 1
2. 比 1 大，并在 1 右边的最小一个数自，得到 3
3. 它俩交换，得到 23541，
4. 翻转 541 ，得到 23145.</p>

<p>两种解法的都一共有 n! 种情况，复杂度为 O(n!)。</p>

<p>练习</p>

<h3>1. 字典序的所有排列</h3>

<p>如 &ldquo;ab&rdquo;, 任意排列为 aa, ab, ba，bb。</p>

<p>采用递归的思想，当字符的个数为 2 时，输出结果。</p>

<h3>2. 字符的所有组合</h3>

<p>输入 &ldquo;abc&rdquo;, 组合有 a,b,c,ab,ac,bc,abc</p>

<h3>3.序列的打印</h3>

<p>(a),(b),&copy;
(a,b),(a,c)(b,c)
(a,b,c)</p>

<h2>字符串转成整数</h2>

<p>&ldquo;123&rdquo; -> 123</p>

<h3>乘以进制10</h3>

<p>其他问题：溢出，正负</p>

<h2>回文判断</h2>

<h3>1. 两头往中间</h3>

<h3>2. 中间往两头</h3>

<p>练习
1. 链表回文
2. 栈回文</p>

<h2>最长回文子串</h2>

<h3>中心扩展法</h3>

<p>需要考虑奇数还是偶数</p>

<h3>Manacher 算法</h3>

<p>将字符串间隔添加特殊字符，变为一个长度为奇数长度的新的字符串。
如 S[i]: # 1 # 2 # 2 # 1 # 2 # 3 # 2 # 1 #
得 P[i]: 1 2 1 2 5 2 1 4 1 2 1 6 1 2 1 2 1
其中 P[i] 来记录为字符 S[i] 为中心的最长回文子串向左或向右扩张的长度（包括 S[i]）</p>

<p>一个利用中间变量特殊技巧，增加两个变量 id 和 mx, id 表示最大回文子串中心的位置，mx 为 id + P[id], 即最大回文子串的右边界。会得到一个重要的结论： 如果 mx > i, 那么 P[i] >= min(P[2 * id -i], mx - i)。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://book.douban.com/subject/26641732/">编程之法</a></li>
<li><a href="https://github.com/julycoding/The-Art-Of-Programming-By-July">The-Art-Of-Programming-By-July
</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 代码重构]]></title>
    <link href="http://alighters.github.io/blog/blog/2016/09/26/ruby-code-refactor/"/>
    <updated>2016-09-26T07:59:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2016/09/26/ruby-code-refactor</id>
    <content type="html"><![CDATA[<p>在《 Ruby 元编程》一书的第二章 <code>method</code> 中，通过一段代码的重构，来展示 Ruby 的特性，如何以很少的代码来达到我们最终的效果。</p>

<h2>示例 Demo</h2>

<p>源代码：data_source.rb，其通过传入工作站点的 id，用来获取工作站点信息，如下：</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">DS</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">initialize</span> <span class="c1"># connect to data source...</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">get_mouse_info</span><span class="p">(</span><span class="n">workstation_id</span><span class="p">)</span> <span class="c1"># ...</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">get_mouse_price</span><span class="p">(</span><span class="n">workstation_id</span><span class="p">)</span> <span class="c1"># ...</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">get_keyboard_info</span><span class="p">(</span><span class="n">workstation_id</span><span class="p">)</span> <span class="c1"># ...</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">get_keyboard_price</span><span class="p">(</span><span class="n">workstation_id</span><span class="p">)</span> <span class="c1"># ...</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">get_cpu_info</span><span class="p">(</span><span class="n">workstation_id</span><span class="p">)</span> <span class="c1"># ...</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">get_cpu_price</span><span class="p">(</span><span class="n">workstation_id</span><span class="p">)</span> <span class="c1"># ...</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">get_display_info</span><span class="p">(</span><span class="n">workstation_id</span><span class="p">)</span> <span class="c1"># ...</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">get_display_price</span><span class="p">(</span><span class="n">workstation_id</span><span class="p">)</span> <span class="c1"># ...</span>
</span><span class='line'>   <span class="c1"># ...and so on</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>调用代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ds</span> <span class="o">=</span> <span class="no">DS</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">ds</span><span class="o">.</span><span class="n">get_cpu_info</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span> <span class="c1"># =&gt; 2.16 Ghz</span>
</span><span class='line'><span class="n">ds</span><span class="o">.</span><span class="n">get_cpu_price</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span> <span class="c1"># =&gt; 150</span>
</span><span class='line'><span class="n">ds</span><span class="o">.</span><span class="n">get_mouse_info</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span> <span class="c1"># =&gt; Dual Optical</span>
</span><span class='line'><span class="n">ds</span><span class="o">.</span><span class="n">get_mouse_price</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span> <span class="c1"># =&gt; 40</span>
</span></code></pre></td></tr></table></div></figure>


<h2>重构</h2>

<p>可以看到在 <code>DS</code> 类中，有很多重复的信息。第一步，首先将其抽象成一个 Computer 的类：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Computer</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">computer_id</span><span class="p">,</span> <span class="n">data_source</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@id</span> <span class="o">=</span> <span class="n">computer_id</span>
</span><span class='line'>    <span class="vi">@data_source</span> <span class="o">=</span> <span class="n">data_source</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">mouse</span>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">get_mouse_info</span><span class="p">(</span><span class="vi">@id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">price</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">get_mouse_price</span><span class="p">(</span><span class="vi">@id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="s2">&quot;Mouse: </span><span class="si">#{</span><span class="n">info</span><span class="si">}</span><span class="s2"> ($</span><span class="si">#{</span><span class="n">price</span><span class="si">}</span><span class="s2">)&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;* </span><span class="si">#{</span><span class="n">result</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="n">price</span> <span class="o">&gt;=</span> <span class="mi">100</span>
</span><span class='line'>    <span class="n">result</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">cpu</span>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">get_cpu_info</span><span class="p">(</span><span class="vi">@id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">price</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">get_cpu_price</span><span class="p">(</span><span class="vi">@id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="s2">&quot;Cpu: </span><span class="si">#{</span><span class="n">info</span><span class="si">}</span><span class="s2"> ($</span><span class="si">#{</span><span class="n">price</span><span class="si">}</span><span class="s2">)&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;* </span><span class="si">#{</span><span class="n">result</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="n">price</span> <span class="o">&gt;=</span> <span class="mi">100</span>
</span><span class='line'>    <span class="n">result</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">keyboard</span>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">get_keyboard_info</span><span class="p">(</span><span class="vi">@id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">price</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">get_keyboard_price</span><span class="p">(</span><span class="vi">@id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="s2">&quot;Keyboard: </span><span class="si">#{</span><span class="n">info</span><span class="si">}</span><span class="s2"> ($</span><span class="si">#{</span><span class="n">price</span><span class="si">}</span><span class="s2">)&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;* </span><span class="si">#{</span><span class="n">result</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="n">price</span> <span class="o">&gt;=</span> <span class="mi">100</span>
</span><span class='line'>    <span class="n">result</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是，抽象成这个类中，可以看到方法中对 <code>data_source</code> 的使用还有点信息的冗余。这里可以对方法再以参数的形式调用，如下。</p>

<h2>1.使用 Object 类的 send 方法：</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Computer</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">computer_id</span><span class="p">,</span> <span class="n">data_source</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@id</span> <span class="o">=</span> <span class="n">computer_id</span>
</span><span class='line'>    <span class="vi">@data_source</span> <span class="o">=</span> <span class="n">data_source</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">mouse</span>
</span><span class='line'>    <span class="n">component</span> <span class="ss">:mouse</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">cpu</span>
</span><span class='line'>    <span class="n">component</span> <span class="ss">:cpu</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">keyboard</span>
</span><span class='line'>    <span class="n">component</span> <span class="ss">:keyboard</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">component</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">send</span> <span class="s2">&quot;get_</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">_info&quot;</span><span class="p">,</span> <span class="vi">@id</span>
</span><span class='line'>    <span class="n">price</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">send</span> <span class="s2">&quot;get_</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">_price&quot;</span><span class="p">,</span> <span class="vi">@id</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">name</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">capitalize</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">info</span><span class="si">}</span><span class="s2"> ($</span><span class="si">#{</span><span class="n">price</span><span class="si">}</span><span class="s2">)&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;* </span><span class="si">#{</span><span class="n">result</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="n">price</span> <span class="o">&gt;=</span> <span class="mi">100</span>
</span><span class='line'>    <span class="n">result</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>send</code> 方法的参数指定一个方法的名称和参数，这样对方法的调用就可以抽象在 <code>component</code> 方法中。
调用代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">my_computer</span> <span class="o">=</span> <span class="no">Computer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">42</span><span class="p">,</span> <span class="no">DS</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span><span class='line'><span class="n">my_computer</span><span class="o">.</span><span class="n">cpu</span> <span class="c1"># =&gt; * Cpu: 2.16 Ghz ($220)</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>PS: 这种动态派发的这种特殊用法有时被称为**模式派发 （Pattern Dispatch），因为它基于方法名的某种模式来过滤方法。</p></blockquote>

<h2>2.方法 define_method</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Computer</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">computer_id</span><span class="p">,</span> <span class="n">data_source</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@id</span> <span class="o">=</span> <span class="n">computer_id</span>
</span><span class='line'>    <span class="vi">@data_source</span> <span class="o">=</span> <span class="n">data_source</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">define_component</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="n">define_method</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">info</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">send</span> <span class="s2">&quot;get_</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">_info&quot;</span><span class="p">,</span> <span class="vi">@id</span>
</span><span class='line'>      <span class="n">price</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">send</span> <span class="s2">&quot;get_</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">_price&quot;</span><span class="p">,</span> <span class="vi">@id</span>
</span><span class='line'>      <span class="n">result</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">name</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">capitalize</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">info</span><span class="si">}</span><span class="s2"> ($</span><span class="si">#{</span><span class="n">price</span><span class="si">}</span><span class="s2">)&quot;</span>
</span><span class='line'>      <span class="k">return</span> <span class="s2">&quot;* </span><span class="si">#{</span><span class="n">result</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="n">price</span> <span class="o">&gt;=</span> <span class="mi">100</span>
</span><span class='line'>      <span class="n">result</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">define_component</span> <span class="ss">:mouse</span>
</span><span class='line'>  <span class="n">define_component</span> <span class="ss">:cpu</span>
</span><span class='line'>  <span class="n">define_component</span> <span class="ss">:keyboard</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用 <code>define_method</code> 方法，来在运行时动态地定义方法，也称<strong> 动态方法 （Dynamic Method）</strong>。</p>

<h3>3. 内省代码的使用</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Computer</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">computer_id</span><span class="p">,</span> <span class="n">data_source</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@id</span> <span class="o">=</span> <span class="n">computer_id</span>
</span><span class='line'>    <span class="vi">@data_source</span> <span class="o">=</span> <span class="n">data_source</span>
</span><span class='line'>    <span class="n">data_source</span><span class="o">.</span><span class="n">methods</span><span class="o">.</span><span class="n">grep</span><span class="p">(</span><span class="sr">/^get_(.*)_info$/</span><span class="p">)</span> <span class="p">{</span> <span class="no">Computer</span><span class="o">.</span><span class="n">define_component</span> <span class="vg">$1</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">define_component</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="n">define_method</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">info</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">send</span> <span class="s2">&quot;get_</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">_info&quot;</span><span class="p">,</span> <span class="vi">@id</span>
</span><span class='line'>      <span class="n">price</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">send</span> <span class="s2">&quot;get_</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">_price&quot;</span><span class="p">,</span> <span class="vi">@id</span>
</span><span class='line'>      <span class="n">result</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">name</span><span class="o">.</span><span class="n">capitalize</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">info</span><span class="si">}</span><span class="s2"> ($</span><span class="si">#{</span><span class="n">price</span><span class="si">}</span><span class="s2">)&quot;</span>
</span><span class='line'>      <span class="k">return</span> <span class="s2">&quot;* </span><span class="si">#{</span><span class="n">result</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="n">price</span> <span class="o">&gt;=</span> <span class="mi">100</span>
</span><span class='line'>      <span class="n">result</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里通过使用正则表达式，来进一步简化方法的定义。使用 <code>grep</code>，当满足之后的正则表达式，则会定义相应的方法。</p>

<h3>4.method_missing 的使用</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Computer</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">computer_id</span><span class="p">,</span> <span class="n">data_source</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@id</span> <span class="o">=</span> <span class="n">computer_id</span>
</span><span class='line'>    <span class="vi">@data_source</span> <span class="o">=</span> <span class="n">data_source</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span> <span class="k">if</span> <span class="o">!</span><span class="vi">@data_source</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="s2">&quot;get_</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">_info&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;get_</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">_info&quot;</span><span class="p">,</span> <span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">price</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;get_</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">_price&quot;</span><span class="p">,</span> <span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">name</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">capitalize</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">info</span><span class="si">}</span><span class="s2"> ($</span><span class="si">#{</span><span class="n">price</span><span class="si">}</span><span class="s2">)&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot; * </span><span class="si">#{</span><span class="n">result</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="n">price</span> <span class="o">&gt;=</span> <span class="mi">100</span>
</span><span class='line'>    <span class="n">result</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>method_missing</code> 方法又称 ghost 方法（幽灵方法），是指在方法的调用过程中，若是在其类型中及其祖先链上找不到相应的方法，则会在实例上调用 <code>method_missing</code> 方法（其属于 Kernel 的一个实例方法，而所有的对象都继承自 kernel 模块）。这里通过重写 <code>method_missing</code> 方法，来达到对 <code>data_source</code> 中相应的方法的动态调用。</p>

<h2>参考资料</h2>

<p><a href="http://media.pragprog.com/titles/ppmetr/methods.pdf">Metaprogramming Ruby</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 字节码实践 - 解读]]></title>
    <link href="http://alighters.github.io/blog/blog/2016/09/16/read-java-bytecode/"/>
    <updated>2016-09-16T07:58:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2016/09/16/read-java-bytecode</id>
    <content type="html"><![CDATA[<p>最近刚看完 <a href="https://book.douban.com/subject/24722612/">深入理解 Java 虚拟机</a> 一书中的第 6 章 （类文件结构），便迫不及待地自己写一个小的 Demo，来自己分析一把 Java 源文件经过编译之后成为字节码文件到底是个什么东西？先由一个简单的小 Demo 开始：</p>

<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">lighters</span><span class="o">.</span><span class="na">demo</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Test</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sayHello</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;Hello &quot;</span> <span class="o">+</span> <span class="n">name</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行 <code>javac Test.java</code>，会在此目录下生成 <code>Test.class</code> 的文件。但是这个 class 字节码文件，是以二进制的形式存储的，我们需要以十六进制的形式进行查看。这里我使用 Vim 进行查看，在命令行模式输入：<code>%!xxd</code>，来采用十六进制的格式查看，得到下面的输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nl">location:</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span>  <span class="mi">4</span> <span class="mi">5</span>  <span class="mi">6</span> <span class="mi">7</span>  <span class="mi">8</span> <span class="mi">9</span>  <span class="n">a</span> <span class="n">b</span>  <span class="n">c</span> <span class="n">d</span>  <span class="n">e</span> <span class="n">f</span>
</span><span class='line'>
</span><span class='line'><span class="mi">0000000</span><span class="o">:</span> <span class="n">cafe</span> <span class="n">babe</span> <span class="mi">0000</span> <span class="mi">0034</span> <span class="mi">002</span><span class="n">c</span> <span class="mi">0</span><span class="n">a00</span> <span class="mi">0900</span> <span class="mi">1609</span>  <span class="o">.......</span><span class="mi">4</span><span class="o">.,......</span>
</span><span class='line'><span class="mi">0000010</span><span class="o">:</span> <span class="mi">000</span><span class="n">b</span> <span class="mi">0017</span> <span class="mi">0900</span> <span class="mi">1800</span> <span class="mi">1907</span> <span class="mi">001</span><span class="n">a</span> <span class="mi">0</span><span class="n">a00</span> <span class="mi">0400</span>  <span class="o">................</span>
</span><span class='line'><span class="mi">0000020</span><span class="o">:</span> <span class="mi">1608</span> <span class="mi">001</span><span class="n">b</span> <span class="mi">0</span><span class="n">a00</span> <span class="mi">0400</span> <span class="mi">1</span><span class="n">c0a</span> <span class="mi">0004</span> <span class="mi">001</span><span class="n">d</span> <span class="mi">0700</span>  <span class="o">................</span>
</span><span class='line'><span class="mi">0000030</span><span class="o">:</span> <span class="mi">1</span><span class="n">e0a</span> <span class="mi">001</span><span class="n">f</span> <span class="mi">0020</span> <span class="mi">0700</span> <span class="mi">2101</span> <span class="mi">0004</span> <span class="mi">6</span><span class="n">e61</span> <span class="mi">6</span><span class="n">d65</span>  <span class="o">.....</span> <span class="o">..!...</span><span class="na">name</span>
</span><span class='line'><span class="mi">0000040</span><span class="o">:</span> <span class="mi">0100</span> <span class="mi">124</span><span class="n">c</span> <span class="mi">6</span><span class="n">a61</span> <span class="mi">7661</span> <span class="mi">2</span><span class="n">f6c</span> <span class="mi">616</span><span class="n">e</span> <span class="mi">672</span><span class="n">f</span> <span class="mi">5374</span>  <span class="o">...</span><span class="na">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">St</span>
</span><span class='line'><span class="mi">0000050</span><span class="o">:</span> <span class="mi">7269</span> <span class="mi">6</span><span class="n">e67</span> <span class="mi">3</span><span class="n">b01</span> <span class="mi">0006</span> <span class="mi">3</span><span class="n">c69</span> <span class="mi">6</span><span class="n">e69</span> <span class="mi">743</span><span class="n">e</span> <span class="mi">0100</span>  <span class="n">ring</span><span class="o">;...&lt;</span><span class="n">init</span><span class="o">&gt;..</span>
</span><span class='line'><span class="mi">0000060</span><span class="o">:</span> <span class="mi">1528</span> <span class="mi">4</span><span class="n">c6a</span> <span class="mi">6176</span> <span class="mi">612</span><span class="n">f</span> <span class="mi">6</span><span class="n">c61</span> <span class="mi">6</span><span class="n">e67</span> <span class="mi">2</span><span class="n">f53</span> <span class="mi">7472</span>  <span class="o">.(</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">Str</span>
</span><span class='line'><span class="mi">0000070</span><span class="o">:</span> <span class="mi">696</span><span class="n">e</span> <span class="mi">673</span><span class="n">b</span> <span class="mi">2956</span> <span class="mi">0100</span> <span class="mi">0443</span> <span class="mi">6</span><span class="n">f64</span> <span class="mi">6501</span> <span class="mi">000</span><span class="n">f</span>  <span class="n">ing</span><span class="o">;)</span><span class="n">V</span><span class="o">...</span><span class="na">Code</span><span class="o">...</span>
</span><span class='line'><span class="mi">0000080</span><span class="o">:</span> <span class="mi">4</span><span class="n">c69</span> <span class="mi">6</span><span class="n">e65</span> <span class="mi">4</span><span class="n">e75</span> <span class="mi">6</span><span class="n">d62</span> <span class="mi">6572</span> <span class="mi">5461</span> <span class="mi">626</span><span class="n">c</span> <span class="mi">6501</span>  <span class="n">LineNumberTable</span><span class="o">.</span>
</span><span class='line'><span class="mi">0000090</span><span class="o">:</span> <span class="mi">0008</span> <span class="mi">7361</span> <span class="mi">7948</span> <span class="mi">656</span><span class="n">c</span> <span class="mi">6</span><span class="n">c6f</span> <span class="mi">0100</span> <span class="mi">0328</span> <span class="mi">2956</span>  <span class="o">..</span><span class="na">sayHello</span><span class="o">...()</span><span class="n">V</span>
</span><span class='line'><span class="mi">00000</span><span class="nl">a0:</span> <span class="mi">0100</span> <span class="mi">0</span><span class="n">a53</span> <span class="mi">6</span><span class="n">f75</span> <span class="mi">7263</span> <span class="mi">6546</span> <span class="mi">696</span><span class="n">c</span> <span class="mi">6501</span> <span class="mi">0009</span>  <span class="o">...</span><span class="na">SourceFile</span><span class="o">...</span>
</span><span class='line'><span class="mi">00000</span><span class="nl">b0:</span> <span class="mi">5465</span> <span class="mi">7374</span> <span class="mi">2</span><span class="n">e6a</span> <span class="mi">6176</span> <span class="mi">610</span><span class="n">c</span> <span class="mi">000</span><span class="n">e</span> <span class="mi">0013</span> <span class="mi">0</span><span class="n">c00</span>  <span class="n">Test</span><span class="o">.</span><span class="na">java</span><span class="o">.......</span>
</span><span class='line'><span class="mi">00000</span><span class="nl">c0:</span> <span class="mi">0</span><span class="n">c00</span> <span class="mi">0</span><span class="n">d07</span> <span class="mi">0022</span> <span class="mi">0</span><span class="n">c00</span> <span class="mi">2300</span> <span class="mi">2401</span> <span class="mi">0017</span> <span class="mi">6</span><span class="n">a61</span>  <span class="o">.....</span><span class="s">&quot;..#.$...ja</span>
</span><span class='line'><span class="s">00000d0: 7661 2f6c 616e 672f 5374 7269 6e67 4275  va/lang/StringBu</span>
</span><span class='line'><span class="s">00000e0: 696c 6465 7201 0006 4865 6c6c 6f20 0c00  ilder...Hello ..</span>
</span><span class='line'><span class="s">00000f0: 2500 260c 0027 0028 0100 106a 6176 612f  %.&amp;..&#39;.(...java/</span>
</span><span class='line'><span class="s">0000100: 6c61 6e67 2f4f 626a 6563 7407 0029 0c00  lang/Object..)..</span>
</span><span class='line'><span class="s">0000110: 2a00 2b01 0016 636f 6d2f 6c69 6768 7465  *.+...com/lighte</span>
</span><span class='line'><span class="s">0000120: 7273 2f64 656d 6f2f 5465 7374 0100 106a  rs/demo/Test...j</span>
</span><span class='line'><span class="s">0000130: 6176 612f 6c61 6e67 2f53 7973 7465 6d01  ava/lang/System.</span>
</span><span class='line'><span class="s">0000140: 0003 6f75 7401 0015 4c6a 6176 612f 696f  ..out...Ljava/io</span>
</span><span class='line'><span class="s">0000150: 2f50 7269 6e74 5374 7265 616d 3b01 0006  /PrintStream;...</span>
</span><span class='line'><span class="s">0000160: 6170 7065 6e64 0100 2d28 4c6a 6176 612f  append..-(Ljava/</span>
</span><span class='line'><span class="s">0000170: 6c61 6e67 2f53 7472 696e 673b 294c 6a61  lang/String;)Lja</span>
</span><span class='line'><span class="s">0000180: 7661 2f6c 616e 672f 5374 7269 6e67 4275  va/lang/StringBu</span>
</span><span class='line'><span class="s">0000190: 696c 6465 723b 0100 0874 6f53 7472 696e  ilder;...toStrin</span>
</span><span class='line'><span class="s">00001a0: 6701 0014 2829 4c6a 6176 612f 6c61 6e67  g...()Ljava/lang</span>
</span><span class='line'><span class="s">00001b0: 2f53 7472 696e 673b 0100 136a 6176 612f  /String;...java/</span>
</span><span class='line'><span class="s">00001c0: 696f 2f50 7269 6e74 5374 7265 616d 0100  io/PrintStream..</span>
</span><span class='line'><span class="s">00001d0: 0670 7269 6e74 6601 003c 284c 6a61 7661  .printf..&lt;(Ljava</span>
</span><span class='line'><span class="s">00001e0: 2f6c 616e 672f 5374 7269 6e67 3b5b 4c6a  /lang/String;[Lj</span>
</span><span class='line'><span class="s">00001f0: 6176 612f 6c61 6e67 2f4f 626a 6563 743b  ava/lang/Object;</span>
</span><span class='line'><span class="s">0000200: 294c 6a61 7661 2f69 6f2f 5072 696e 7453  )Ljava/io/PrintS</span>
</span><span class='line'><span class="s">0000210: 7472 6561 6d3b 0021 000b 0009 0000 0001  tream;.!........</span>
</span><span class='line'><span class="s">0000220: 0002 000c 000d 0000 0002 0001 000e 000f  ................</span>
</span><span class='line'><span class="s">0000230: 0001 0010 0000 002a 0002 0002 0000 000a  .......*........</span>
</span><span class='line'><span class="s">0000240: 2ab7 0001 2a2b b500 02b1 0000 0001 0011  *...*+..........</span>
</span><span class='line'><span class="s">0000250: 0000 000e 0003 0000 0007 0004 0008 0009  ................</span>
</span><span class='line'><span class="s">0000260: 0009 0001 0012 0013 0001 0010 0000 003e  ...............&gt;</span>
</span><span class='line'><span class="s">0000270: 0003 0001 0000 0022 b200 03bb 0004 59b7  .......&quot;</span><span class="o">......</span><span class="na">Y</span><span class="o">.</span>
</span><span class='line'><span class="mi">0000280</span><span class="o">:</span> <span class="mi">0005</span> <span class="mi">1206</span> <span class="n">b600</span> <span class="mi">072</span><span class="n">a</span> <span class="n">b400</span> <span class="mi">02</span><span class="n">b6</span> <span class="mi">0007</span> <span class="n">b600</span>  <span class="o">.......*........</span>
</span><span class='line'><span class="mi">0000290</span><span class="o">:</span> <span class="mi">0803</span> <span class="n">bd00</span> <span class="mi">09</span><span class="n">b6</span> <span class="mi">000</span><span class="n">a</span> <span class="mi">57</span><span class="n">b1</span> <span class="mi">0000</span> <span class="mi">0001</span> <span class="mi">0011</span>  <span class="o">........</span><span class="na">W</span><span class="o">.......</span>
</span><span class='line'><span class="mi">00002</span><span class="nl">a0:</span> <span class="mi">0000</span> <span class="mi">000</span><span class="n">a</span> <span class="mi">0002</span> <span class="mi">0000</span> <span class="mi">000</span><span class="n">c</span> <span class="mi">0021</span> <span class="mi">000</span><span class="n">d</span> <span class="mi">0001</span>  <span class="o">...........!....</span>
</span><span class='line'><span class="mi">00002</span><span class="nl">b0:</span> <span class="mi">0014</span> <span class="mi">0000</span> <span class="mi">0002</span> <span class="mi">0015</span>                      <span class="o">........</span>
</span></code></pre></td></tr></table></div></figure>


<p>
这里的输出还是蛮人性化的，每行开头前面的冒号前那一串是表示每行开头的第一个字符的位置索引。1 个字符是 4 位，即每两位是 1 个字节，一行则是 16 个 字节，对应十六进制表示为 0 - F。</p>

<blockquote><p>PS: 第一行的内容为人为添加，方便定位列的索引。</p></blockquote>

<p>可知，这里用十六进制表示，整个文件内容的大小没超过 3 位，所以这里用 3 位的十六进制，来表示地址。例如，若地址为0x000，指向的内容为 ca ；地址为 0x001，指向的内容为 fe；地址为0x011 ，指向的内容为 0b；下文都将以这样的形式来指向字节码中的内容。</p>

<p>准备工作做好之后，我们还需要关于的 Java 字节码的结构信息表，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ClassFile</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">u4</span>             <span class="n">magic</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">minor_version</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">major_version</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">constant_pool_count</span><span class="o">;</span>
</span><span class='line'>    <span class="n">cp_info</span>        <span class="n">constant_pool</span><span class="o">[</span><span class="n">constant_pool_count</span><span class="o">-</span><span class="mi">1</span><span class="o">];</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">access_flags</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">this_class</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">super_class</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">interfaces_count</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">interfaces</span><span class="o">[</span><span class="n">interfaces_count</span><span class="o">];</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">fields_count</span><span class="o">;</span>
</span><span class='line'>    <span class="n">field_info</span>     <span class="n">fields</span><span class="o">[</span><span class="n">fields_count</span><span class="o">];</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">methods_count</span><span class="o">;</span>
</span><span class='line'>    <span class="n">method_info</span>    <span class="n">methods</span><span class="o">[</span><span class="n">methods_count</span><span class="o">];</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">attributes_count</span><span class="o">;</span>
</span><span class='line'>    <span class="n">attribute_info</span> <span class="n">attributes</span><span class="o">[</span><span class="n">attributes_count</span><span class="o">];</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的 u1 、u2、 u4 表示的分别为 1 个字节，2个字节，4 个字节。接下来，我们将会跟字节码的结构信息表来一一对应在上面 Test.class 文件的解析：</p>

<h2>魔数 - magic</h2>

<p>在字节码结构表中，可知 magic 对应的是 4 个字节的容量，相应在 Test.class 文件位置为0x000 - 0x003 的 4 个字节，信息为 <code>cafe babe</code>。用来表示为这是一个 class 文件，能够被 JVM 所识别。</p>

<h2>次版本 - minor_version</h2>

<p>大小为两个字节，对应位置索引 0x004 - 0x005 的 2个字节，即 0x0000，表示此版本的大小为 0。</p>

<h2>主版本 - major_version</h2>

<p>大小为两个字节，对应位置索引为 0x006 - 0x007 的2个字节，即 0034，对应十进制的大小为 52，而初始的 Jvm 版本 1.0 支持的大小为 45，也就意味着这是由 JDK 1.8 生成的字节码，则之能由 Jvm 1.8 及以上版本才能解析上文的字节码文件。</p>

<h2>常量池容量 - constant_pool_count</h2>

<p>由 2 个字节来表示常量池的大小，这个大小包含自身，即其余的常量大小只能为  2<sup>16</sup> - 1，对应 Test.class 文件中的描述为 002c ，对应十进制大小为 44，表明还将有 43 个字节用来描述常量池。</p>

<p>常量池中主要存放两大类常量：字面量和符号引用。字面量主要指文本字符串，声明为 final 的常量值等。而符号引用属于编译原理方面的概念，主要包含类和接口的全限定名，字段的名称和描述符，方法的名称和描述符。</p>

<h2>常量池 - constant_pool[constant_pool_count-1]</h2>

<p>这里将会有 43 个常量。常量池包含着一组信息，不过他们的通用格式如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">cp_info</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">u1</span> <span class="n">tag</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u1</span> <span class="n">info</span><span class="o">[];</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>即 1 个自己的 tag描述，加上一组相应信息的描述。看到这里，我们继续接下来的字节，内容为 0x0a，对应十进制的 10，在下面的常量 tag 表中，进行查找，可知对应的常量类型为 Constant_Methodref，表示当前类方法的符号引用。</p>

<p><img src="http://upload-images.jianshu.io/upload_images/656559-223a2c97df971838.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="常量池 tag" /></p>

<p>接着查找 Constant_Methodref 的结构，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">CONSTANT_Methodref_info</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">u1</span> <span class="n">tag</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span> <span class="n">class_index</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span> <span class="n">name_and_type_index</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可知 第一个字节是为 tag 标记，这里已经确定了是刚才的 <code>Constant_Methodref</code>；然后是两个字节的 class_index ，指向的内容是指类在常量池中的索引；最后是两个字节的 name_and_type_index，同样也是方法的描述在常量池中的索引值。</p>

<p>先看 class_index，可知其内容是地址0x00b - 0x00c ，相应内容为 0x0009，即这里我们需要从 0x00b 的位置开始数，数至第 9 个常量。常量寻找定位的过程如下：</p>

<ul>
<li>常量1：<code>CONSTANT_Methodref</code>，一共占 5 个字节，位置为 0x00a - 0x00e</li>
<li>常量2: <code>CONSTANT_Fieldref</code>，格式与常量1 <code>methodref</code>相同，5个字节，位置为 0x00f - 0x013</li>
<li>常量3：<code>CONSTANT_Fieldref</code>，同上，位置为 0x014 - 0x018</li>
<li>常量4：<code>CONSTANT_Class</code>，其格式为下述代码，3个字节，位置为 0x019 - 0x01b</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">CONSTANT_Class_info</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">u1</span> <span class="n">tag</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span> <span class="n">name_index</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>常量5：<code>CONSTANT_Methodref</code>, 5个字节，位置为 0x01c - 0x020</li>
<li>常量6；<code>CONSTANT_String</code>，其格式如下代码，3个字节，位置为 0x021 - 0x023，这里的 string_index，也指向的是常量池中的内容，不过它将会指向的
是一个 <code>CONSTANT_Utf8</code> 的常量。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">CONSTANT_String_info</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">u1</span> <span class="n">tag</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span> <span class="n">string_index</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>常量7：<code>CONSTANT_Methodref</code>, 5个字节，位置为 0x024 - 0x028</li>
<li>常量8：<code>CONSTANT_Methodref</code>, 5个字节，位置为 0x029 - 0x02d</li>
<li>常量9：<code>CONSTANT_Class</code>，3个字节，位置为 0x02e - 0x030。</li>
</ul>


<p>到这里，可以看出第一个常量 <code>CONSTANT_Methodref</code> 中的 <code>class_index</code> 指向的是一个 <code>CONSTANT_Class</code>，另一个 <code>name_and_type_index</code> 将会指向一个 <code>CONSTANT_NameAndType</code> 的常量。发现这样阅读定位，实在是太费力了，好在 jdk 给我们提供了 <code>javap</code> 的命令工具。 用它来输出字节码的信息，来帮助我们阅读。在命令行下输入 <code>javap -verbose Test.class</code>，过滤其他输出，只关心我们的常量池输出，如下 ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Constant</span> <span class="nl">pool:</span>
</span><span class='line'>   <span class="err">#</span><span class="mi">1</span> <span class="o">=</span> <span class="n">Methodref</span>          <span class="err">#</span><span class="mi">9</span><span class="o">.</span><span class="err">#</span><span class="mi">22</span>         <span class="c1">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span>
</span><span class='line'>   <span class="err">#</span><span class="mi">2</span> <span class="o">=</span> <span class="n">Fieldref</span>           <span class="err">#</span><span class="mi">11</span><span class="o">.</span><span class="err">#</span><span class="mi">23</span>        <span class="c1">// com/lighters/demo/Test.name:Ljava/lang/String;</span>
</span><span class='line'>   <span class="err">#</span><span class="mi">3</span> <span class="o">=</span> <span class="n">Fieldref</span>           <span class="err">#</span><span class="mi">24</span><span class="o">.</span><span class="err">#</span><span class="mi">25</span>        <span class="c1">// java/lang/System.out:Ljava/io/PrintStream;</span>
</span><span class='line'>   <span class="err">#</span><span class="mi">4</span> <span class="o">=</span> <span class="n">Class</span>              <span class="err">#</span><span class="mi">26</span>            <span class="c1">// java/lang/StringBuilder</span>
</span><span class='line'>   <span class="err">#</span><span class="mi">5</span> <span class="o">=</span> <span class="n">Methodref</span>          <span class="err">#</span><span class="mi">4</span><span class="o">.</span><span class="err">#</span><span class="mi">22</span>         <span class="c1">// java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span>
</span><span class='line'>   <span class="err">#</span><span class="mi">6</span> <span class="o">=</span> <span class="n">String</span>             <span class="err">#</span><span class="mi">27</span>            <span class="c1">// Hello</span>
</span><span class='line'>   <span class="err">#</span><span class="mi">7</span> <span class="o">=</span> <span class="n">Methodref</span>          <span class="err">#</span><span class="mi">4</span><span class="o">.</span><span class="err">#</span><span class="mi">28</span>         <span class="c1">// java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span>
</span><span class='line'>   <span class="err">#</span><span class="mi">8</span> <span class="o">=</span> <span class="n">Methodref</span>          <span class="err">#</span><span class="mi">4</span><span class="o">.</span><span class="err">#</span><span class="mi">29</span>         <span class="c1">// java/lang/StringBuilder.toString:()Ljava/lang/String;</span>
</span><span class='line'>   <span class="err">#</span><span class="mi">9</span> <span class="o">=</span> <span class="n">Class</span>              <span class="err">#</span><span class="mi">30</span>            <span class="c1">// java/lang/Object</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">10</span> <span class="o">=</span> <span class="n">Methodref</span>          <span class="err">#</span><span class="mi">31</span><span class="o">.</span><span class="err">#</span><span class="mi">32</span>        <span class="c1">// java/io/PrintStream.printf:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintStream;</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">11</span> <span class="o">=</span> <span class="n">Class</span>              <span class="err">#</span><span class="mi">33</span>            <span class="c1">// com/lighters/demo/Test</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">12</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="n">name</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">13</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">String</span><span class="o">;</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">14</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="o">&lt;</span><span class="n">init</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">15</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="o">(</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">String</span><span class="o">;)</span><span class="n">V</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">16</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="n">Code</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">17</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="n">LineNumberTable</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">18</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="n">sayHello</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">19</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="o">()</span><span class="n">V</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">20</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="n">SourceFile</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">21</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="n">Test</span><span class="o">.</span><span class="na">java</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">22</span> <span class="o">=</span> <span class="n">NameAndType</span>        <span class="err">#</span><span class="mi">14</span><span class="o">:</span><span class="err">#</span><span class="mi">19</span>        <span class="c1">// &quot;&lt;init&gt;&quot;:()V</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">23</span> <span class="o">=</span> <span class="n">NameAndType</span>        <span class="err">#</span><span class="mi">12</span><span class="o">:</span><span class="err">#</span><span class="mi">13</span>        <span class="c1">// name:Ljava/lang/String;</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">24</span> <span class="o">=</span> <span class="n">Class</span>              <span class="err">#</span><span class="mi">34</span>            <span class="c1">// java/lang/System</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">25</span> <span class="o">=</span> <span class="n">NameAndType</span>        <span class="err">#</span><span class="mi">35</span><span class="o">:</span><span class="err">#</span><span class="mi">36</span>        <span class="c1">// out:Ljava/io/PrintStream;</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">26</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="n">java</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">StringBuilder</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">27</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="n">Hello</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">28</span> <span class="o">=</span> <span class="n">NameAndType</span>        <span class="err">#</span><span class="mi">37</span><span class="o">:</span><span class="err">#</span><span class="mi">38</span>        <span class="c1">// append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">29</span> <span class="o">=</span> <span class="n">NameAndType</span>        <span class="err">#</span><span class="mi">39</span><span class="o">:</span><span class="err">#</span><span class="mi">40</span>        <span class="c1">// toString:()Ljava/lang/String;</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">30</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="n">java</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">Object</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">31</span> <span class="o">=</span> <span class="n">Class</span>              <span class="err">#</span><span class="mi">41</span>            <span class="c1">// java/io/PrintStream</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">32</span> <span class="o">=</span> <span class="n">NameAndType</span>        <span class="err">#</span><span class="mi">42</span><span class="o">:</span><span class="err">#</span><span class="mi">43</span>        <span class="c1">// printf:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintStream;</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">33</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="n">com</span><span class="o">/</span><span class="n">lighters</span><span class="o">/</span><span class="n">demo</span><span class="o">/</span><span class="n">Test</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">34</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="n">java</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">System</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">35</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="n">out</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">36</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="n">Ljava</span><span class="o">/</span><span class="n">io</span><span class="o">/</span><span class="n">PrintStream</span><span class="o">;</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">37</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="n">append</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">38</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="o">(</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">String</span><span class="o">;)</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">StringBuilder</span><span class="o">;</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">39</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="n">toString</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">40</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="o">()</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">String</span><span class="o">;</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">41</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="n">java</span><span class="o">/</span><span class="n">io</span><span class="o">/</span><span class="n">PrintStream</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">42</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="n">printf</span>
</span><span class='line'>  <span class="err">#</span><span class="mi">43</span> <span class="o">=</span> <span class="n">Utf8</span>               <span class="o">(</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">String</span><span class="o">;[</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">Object</span><span class="o">;)</span><span class="n">Ljava</span><span class="o">/</span><span class="n">io</span><span class="o">/</span><span class="n">PrintStream</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>结合这个输出，再回过头来，查看之前的第一个常量，其类型为 <code>Methodref</code>，另包含指向 #9 和 #22 的索引；#9 类型为 <code>Class</code>，其包含一个 #30 的 utf8 的字符串描述 ：<code>java/lang/Object</code>；# 22 指向的是 <code>NameAndType</code> 的索引，其指向的内容的 #14 的方法描述，及 #19 的方法参数及其返回值的描述。可知这个 <code>Methodref</code> 的最终指向的内容为 <code>Object</code> 的 <code>init</code> 方法，<code>()V</code> 表达的意思是参数为空，返回值为 Void。</p>

<p>另外还有其他的方法，字段，类以及 utf8 的描述，而 uft8 描述的则是一组 ascii 码字符。</p>

<h2>访问标记 - access_flags</h2>

<p>在经过了 43 个大小的常量池，接下来便是两个字节的访问标记，其主要用来表示当前类的访问符。这里具体的取值如下表：</p>

<p><img src="http://upload-images.jianshu.io/upload_images/656559-46948b414f858066.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="access_flags" />
从表中得到这里的取值都是数字 1 进行移位得到的结果，这样就可以通过或运算得到我们类有哪些访问标记。</p>

<p>访问标记对应在字节码中的位置为 0x216 - 0x217，内容为 0x0021，可知这结果是由访问标记中的 ACC_PUBLIC | ACC_SUPER 所得。ACC_SUPER 在 JDK 1.2 添加，默认类都会带上这个访问标记。</p>

<h2>当前类 - this_class</h2>

<p>两个字节的当前类标识，其地址为 0x218 - 0x219，内容为 0x000b。其内容表示的是在常量池中第 11 个，指向的内容为 class。通过查看之前的常量池表，可知其 class 的内容为 com/lighters/demo/Test。</p>

<h2>父类 - super_class</h2>

<p>其格式同上，可知其对应字节码的内容为 0x0009，在常量池表中针对的 class 内容为 java/lang/Object 。</p>

<h2>接口数量 - interfaces_count</h2>

<p>两个字节的表示，其地址为 0x21c - 0x21d，内容为 0x0000。表示当前类没有实现任何接口。</p>

<h2>接口 - interfaces[interfaces_count]</h2>

<p>这里描述的是 interfaces_count 的两个自己的接口描述。因为 interfaces_count 为零，所以这里不会有任何地址的指向。</p>

<h2>字段数量 - fields_count</h2>

<p>两字节的字段数量，字节码中对应地址为 0x21e - 0x21f，内容为 0x001。表示有个 1 字段。</p>

<h2>字段 - fields[fields_count]</h2>

<p>同样是有 fields_count 的 field_info，这里 fields_count 为 1， 我们只用分析一个即可，而 field_info 的格式如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">field_info</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">access_flags</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">name_index</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">descriptor_index</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">attributes_count</span><span class="o">;</span>
</span><span class='line'>    <span class="n">attribute_info</span> <span class="n">attributes</span><span class="o">[</span><span class="n">attributes_count</span><span class="o">];</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>第一项为两个字节的 access_flags ，字节码中对应的地址为 0x220 - 0x221，内容为 0x0002，而 acess_flags 对应的表结构定义如下；</p>

<p><img src="http://upload-images.jianshu.io/upload_images/656559-998d30425ca542be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Field access and property flags" /></p>

<p>所以，可知我们的字段为 private。接下来是两字节的 name_index，内容为 0x000c，对应常量表中的索引为 12，内容为 name。两字节的 descriptor_index，内容为 0x000d，对应常量表中的索引为13，内容为 Ljava/lang/String。</p>

<p>接下来则是 attributes_count，这里对应结果为 0，就不看了。</p>

<p>最终，我们可知道 Test 类中，有一个 private ，名称为 name，类型为 String的字段。而 attributes_count 为空，表示这里没有直接对其进行赋值。</p>

<h2>方法数量 - methods_count</h2>

<p>两个字节描述方法数量，字节码中地址为 0x228 - 0x229，其内容为 0x0002，表示两个方法。</p>

<h2>方法 - methods[methods_count]</h2>

<p>这里的方法则对应着 method_info 的的结构，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">method_info</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">access_flags</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">name_index</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">descriptor_index</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">attributes_count</span><span class="o">;</span>
</span><span class='line'>    <span class="n">attribute_info</span> <span class="n">attributes</span><span class="o">[</span><span class="n">attributes_count</span><span class="o">];</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的 method_info 跟 field_info 的结构相同。先看 <code>access_flags</code>，在字节码中其位置为 0x22a - 0x22b，相应内容为 0x0001。根据如下 method 的 access_flag 表，可知其相对应的为 public。</p>

<p><img src="http://upload-images.jianshu.io/upload_images/656559-881d90912e7d978c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Method access and property flags" /></p>

<p>接下来的 4 个字节是 0x000e 和 0x000f，分别指向常量池中 14 和 15，对应着 方法名称 <init> 和方法描述 (Ljava/lang/String;)V。</p>

<p>接下来的两个字节为 0x0001, 表示 attributes_count 为1。这就要分析一下 attribute_info 是什么内容？先看它的结构：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">attribute_info</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">u2</span> <span class="n">attribute_name_index</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u4</span> <span class="n">attribute_length</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u1</span> <span class="n">info</span><span class="o">[</span><span class="n">attribute_length</span><span class="o">];</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>两字节的 attribute_name_index 对应字节码表的位置为 0x232 - 0x233，表示的内容为 0x0010，其对应的是常量池的 utf8 的信息，索引内容为 16，表示相应的内容为 Code。其结构如下 ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Code_attribute</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">u2</span> <span class="n">attribute_name_index</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u4</span> <span class="n">attribute_length</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span> <span class="n">max_stack</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span> <span class="n">max_locals</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u4</span> <span class="n">code_length</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u1</span> <span class="n">code</span><span class="o">[</span><span class="n">code_length</span><span class="o">];</span>
</span><span class='line'>    <span class="n">u2</span> <span class="n">exception_table_length</span><span class="o">;</span>
</span><span class='line'>    <span class="o">{</span>   <span class="n">u2</span> <span class="n">start_pc</span><span class="o">;</span>
</span><span class='line'>        <span class="n">u2</span> <span class="n">end_pc</span><span class="o">;</span>
</span><span class='line'>        <span class="n">u2</span> <span class="n">handler_pc</span><span class="o">;</span>
</span><span class='line'>        <span class="n">u2</span> <span class="n">catch_type</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="n">exception_table</span><span class="o">[</span><span class="n">exception_table_length</span><span class="o">];</span>
</span><span class='line'>    <span class="n">u2</span> <span class="n">attributes_count</span><span class="o">;</span>
</span><span class='line'>    <span class="n">attribute_info</span> <span class="n">attributes</span><span class="o">[</span><span class="n">attributes_count</span><span class="o">];</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Code 主要用来描述方法的内部实现，其中会用指令来描述方法的运行状态，另外以及异常的信息等。但是 abstarct 与 native 的 method_info 并不会有 code_info。</p>

<p>这里的 method_info 信息我们通过之前的 javap 对 Test.class 文件输出的信息来进行查看，可以更加清晰明了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">com</span><span class="o">.</span><span class="na">lighters</span><span class="o">.</span><span class="na">demo</span><span class="o">.</span><span class="na">Test</span><span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span><span class="o">);</span>
</span><span class='line'>    <span class="nl">descriptor:</span> <span class="o">(</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">String</span><span class="o">;)</span><span class="n">V</span>
</span><span class='line'>    <span class="nl">flags:</span> <span class="n">ACC_PUBLIC</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>      <span class="n">stack</span><span class="o">=</span><span class="mi">2</span><span class="o">,</span> <span class="n">locals</span><span class="o">=</span><span class="mi">2</span><span class="o">,</span> <span class="n">args_size</span><span class="o">=</span><span class="mi">2</span>
</span><span class='line'>         <span class="mi">0</span><span class="o">:</span> <span class="n">aload_0</span>
</span><span class='line'>         <span class="mi">1</span><span class="o">:</span> <span class="n">invokespecial</span> <span class="err">#</span><span class="mi">1</span>                  <span class="c1">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span>
</span><span class='line'>         <span class="mi">4</span><span class="o">:</span> <span class="n">aload_0</span>
</span><span class='line'>         <span class="mi">5</span><span class="o">:</span> <span class="n">aload_1</span>
</span><span class='line'>         <span class="mi">6</span><span class="o">:</span> <span class="n">putfield</span>      <span class="err">#</span><span class="mi">2</span>                  <span class="c1">// Field name:Ljava/lang/String;</span>
</span><span class='line'>         <span class="mi">9</span><span class="o">:</span> <span class="k">return</span>
</span><span class='line'>      <span class="nl">LineNumberTable:</span>
</span><span class='line'>        <span class="n">line</span> <span class="mi">7</span><span class="o">:</span> <span class="mi">0</span>
</span><span class='line'>        <span class="n">line</span> <span class="mi">8</span><span class="o">:</span> <span class="mi">4</span>
</span><span class='line'>        <span class="n">line</span> <span class="mi">9</span><span class="o">:</span> <span class="mi">9</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sayHello</span><span class="o">();</span>
</span><span class='line'>    <span class="nl">descriptor:</span> <span class="o">()</span><span class="n">V</span>
</span><span class='line'>    <span class="nl">flags:</span> <span class="n">ACC_PUBLIC</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>      <span class="n">stack</span><span class="o">=</span><span class="mi">3</span><span class="o">,</span> <span class="n">locals</span><span class="o">=</span><span class="mi">1</span><span class="o">,</span> <span class="n">args_size</span><span class="o">=</span><span class="mi">1</span>
</span><span class='line'>         <span class="mi">0</span><span class="o">:</span> <span class="n">getstatic</span>     <span class="err">#</span><span class="mi">3</span>                  <span class="c1">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
</span><span class='line'>         <span class="mi">3</span><span class="o">:</span> <span class="k">new</span>           <span class="err">#</span><span class="mi">4</span>                  <span class="c1">// class java/lang/StringBuilder</span>
</span><span class='line'>         <span class="mi">6</span><span class="o">:</span> <span class="n">dup</span>
</span><span class='line'>         <span class="mi">7</span><span class="o">:</span> <span class="n">invokespecial</span> <span class="err">#</span><span class="mi">5</span>                  <span class="c1">// Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span>
</span><span class='line'>        <span class="mi">10</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">6</span>                  <span class="c1">// String Hello</span>
</span><span class='line'>        <span class="mi">12</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">7</span>                  <span class="c1">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span>
</span><span class='line'>        <span class="mi">15</span><span class="o">:</span> <span class="n">aload_0</span>
</span><span class='line'>        <span class="mi">16</span><span class="o">:</span> <span class="n">getfield</span>      <span class="err">#</span><span class="mi">2</span>                  <span class="c1">// Field name:Ljava/lang/String;</span>
</span><span class='line'>        <span class="mi">19</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">7</span>                  <span class="c1">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span>
</span><span class='line'>        <span class="mi">22</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">8</span>                  <span class="c1">// Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span>
</span><span class='line'>        <span class="mi">25</span><span class="o">:</span> <span class="n">iconst_0</span>
</span><span class='line'>        <span class="mi">26</span><span class="o">:</span> <span class="n">anewarray</span>     <span class="err">#</span><span class="mi">9</span>                  <span class="c1">// class java/lang/Object</span>
</span><span class='line'>        <span class="mi">29</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">10</span>                 <span class="c1">// Method java/io/PrintStream.printf:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintStream;</span>
</span><span class='line'>        <span class="mi">32</span><span class="o">:</span> <span class="n">pop</span>
</span><span class='line'>        <span class="mi">33</span><span class="o">:</span> <span class="k">return</span>
</span><span class='line'>      <span class="nl">LineNumberTable:</span>
</span><span class='line'>        <span class="n">line</span> <span class="mi">12</span><span class="o">:</span> <span class="mi">0</span>
</span><span class='line'>        <span class="n">line</span> <span class="mi">13</span><span class="o">:</span> <span class="mi">33</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出信息中的 Code 可以看出方法的操作栈最大深度为 2，内部变量为 2，之后便是以 1 个字节为单位的指令描述，这里就不对指定讲解了，可参照气候的注释进行理解。</p>

<p>在最后的 attributes 中，存放的是 LineNumberTable。它是做什么用的？当我们需要进行断点调试的时候，它便可以用来对应我们在源文件的方法代码位置，这样更方便我们定位代码错误位置。其格式如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">LineNumberTable_attribute</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">u2</span> <span class="n">attribute_name_index</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u4</span> <span class="n">attribute_length</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span> <span class="n">line_number_table_length</span><span class="o">;</span>
</span><span class='line'>    <span class="o">{</span>   <span class="n">u2</span> <span class="n">start_pc</span><span class="o">;</span>
</span><span class='line'>        <span class="n">u2</span> <span class="n">line_number</span><span class="o">;</span>  
</span><span class='line'>    <span class="o">}</span> <span class="n">line_number_table</span><span class="o">[</span><span class="n">line_number_table_length</span><span class="o">];</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中的 attribute_name_index，便是对应常量池索引为 17 的 LineNumberTable。主要研究 line_number_table 的数据结构：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">{</span>
</span><span class='line'>   <span class="n">u2</span> <span class="n">start_pc</span><span class="o">;</span>
</span><span class='line'>   <span class="n">u2</span> <span class="n">line_number</span><span class="o">;</span>   
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的 start_pc 表示针对在 Code 块的起始位置，而 line_number 则表示相对应的在源码中的行数。所以上面第一个方法，（类构造器 init ）输出 LineNumberTable ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nl">LineNumberTable:</span>
</span><span class='line'>  <span class="n">line</span> <span class="mi">7</span><span class="o">:</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">line</span> <span class="mi">8</span><span class="o">:</span> <span class="mi">4</span>
</span><span class='line'>  <span class="n">line</span> <span class="mi">9</span><span class="o">:</span> <span class="mi">9</span>
</span></code></pre></td></tr></table></div></figure>


<p>就相当好理解了，方法所在源码中的第 7 行对应在 Code info 块中的索引为 0；第 8 行对应 Code 中索引为 4；第 9 行对应 Code 中的索引为 9。</p>

<p>方法 <code>sayHello</code> 的格式同理，就不赘述了。有个小细节需要注意的是，在其 Code 中的索引 19 调用 invokevirtual 指令时，对应源文件中调用 <code>+</code> 操作符，可以在注释中，看到其相对应调用的是 <code>StringBuilder</code>对象的 <code>append</code> 方法。</p>

<p>说明了什么呢？当我们在调用 <code>+</code> 操作符时，编译器在进行编译的时候，会创建一个 <code>StringBuilder</code>对象，通过 <code>append</code> 方法进行相加操作。这样我们在多次使用 <code>+</code> 操作时，IDE 会给我们一个警告的提示，也就不足为怪了。</p>

<h2>附属属性数量 - attributes_count</h2>

<p>这里对应位置为 0x2ae- 0x2af，信息为 0x0001，表示为只存在 1 个 attribute。</p>

<h2>附属属性 - attributes[attributes_count]</h2>

<p>在 0x2b0 - 0x2b1 的信息为 0x0014，对应常量池的索引 20 的值，为 SourceFile。其结构如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">SourceFile_attribute</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">u2</span> <span class="n">attribute_name_index</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u4</span> <span class="n">attribute_length</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span> <span class="n">sourcefile_index</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可知接下来的 4 字节表示长度，为 2 ; 接下来的 2 字节表示源文件索引，值为 0x0015，对应常量池中的索引为 21 的值，为 Test.java。</p>

<h2>总结</h2>

<p>在根据主线 ClassFile 的结构表一一分析之后，字节码 <code>class</code> 文件终于被我们完整的看完了。当然其中一些细节如其他的 attribute 结构、Code 中相应的指令操作等，并没有去深入讲解，但是这并不妨碍我们对字节码（只闻其名，不知其人）产生一个更加深入而又完整的认识。我们只需编写出符合 JVM 规范的字节码文件，即可运行与 JVM 之上，像其他的语言如 JRuby、Scala、Kotlin等就是，不过它们使用的是特定的编译器。另外，需要提及的两个命令 javac 及 javap ，需要熟练使用。当然其中的指令操作还是需要去深入研究一番，这篇也有许多不足之处，也欢迎小伙伴一起深入探讨。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://book.douban.com/subject/24722612/">深入理解 Java 虚拟机 周志明著 第二版</a></li>
<li><a href="https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html">JVM Doc</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android单元测试-Robolectric 浅析]]></title>
    <link href="http://alighters.github.io/blog/blog/2016/09/08/unit-test-robolectric/"/>
    <updated>2016-09-08T13:17:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2016/09/08/unit-test-robolectric</id>
    <content type="html"><![CDATA[<h2>介绍</h2>

<p>Robolectric 测试框架针对 Android 的组件（包含各种View）进行了统一的 <code>Shadow</code>，使得我们不再依赖模拟器或真机，直接就单元测试就可方便地测试我们的 UI。</p>

<h2>引入</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">testCompile</span> <span class="s">&quot;org.robolectric:robolectric:3.1.1&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h2>使用</h2>

<h3>1.通用 Demo 示例</h3>

<p>这里先来一个简单的 Demo， 也是我们经常使用的形式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">RobolectricTestRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@Config</span><span class="o">(</span><span class="n">constants</span> <span class="o">=</span> <span class="n">BuildConfig</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">sdk</span> <span class="o">=</span> <span class="mi">21</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RobolectricTestMainActivity</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Activity</span> <span class="n">activity</span> <span class="o">=</span> <span class="n">Robolectric</span><span class="o">.</span><span class="na">setupActivity</span><span class="o">(</span><span class="n">TestMainActivity</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ShadowActivity</span> <span class="n">shadowActivity</span> <span class="o">=</span> <span class="n">Shadows</span><span class="o">.</span><span class="na">shadowOf</span><span class="o">(</span><span class="n">activity</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Button</span> <span class="n">button</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span> <span class="n">activity</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">btn_test_main</span><span class="o">);</span>
</span><span class='line'>        <span class="n">TextView</span> <span class="n">textView</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span> <span class="n">activity</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">tv_test_main</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">button</span><span class="o">.</span><span class="na">performClick</span><span class="o">();</span>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">textView</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">toString</span><span class="o">(),</span> <span class="n">equalTo</span><span class="o">(</span><span class="s">&quot;Hello&quot;</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Intent</span><span class="o">(</span><span class="n">activity</span><span class="o">,</span> <span class="n">TestToastActivity</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>        <span class="n">activity</span><span class="o">.</span><span class="na">startActivity</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">shadowActivity</span><span class="o">.</span><span class="na">getNextStartedActivity</span><span class="o">(),</span> <span class="n">equalTo</span><span class="o">(</span><span class="n">intent</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在真实的 <code>TestMainActivity</code> 中，存在一个按钮和一个文本框，当点击按钮之后，将文本框的内容修改为 “hello”。当我们通过 <code>Robolectric</code> 的 <code>setupActivity</code> 构造出来一个 <code>Activity</code> 之后，对其进行操作并验证，完全符合我们的预期结果。</p>

<p>另外，在上面的示例中，针对 <code>Shadow</code> 的使用，我们通过真实的 <code>startActivity</code> 方法启动下一个 <code>Activity</code>。若此时，我们需要验证其是否启动成功，就可以使用其对应的 <code>ShadowActivity</code>。在拿到 <code>ShadowActivity</code> 之后，通过获取其 <code>getNextStartedActivity</code>，就可验证其是否启动成功。</p>

<h3>2.Custom Shadow 的使用</h3>

<p>初次接触这个 <code>Shadow</code> 可能有些困惑，我们在 Robolectric 给我们提供的 <code>Shadows</code> 类中，可以发现其已经有很多的 <code>Shadow</code> 实现，其以一个 map 的格式存储真实类跟 shadow 类对应的关系：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">SHADOW_MAP</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;(</span><span class="mi">250</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">static</span> <span class="o">{</span>
</span><span class='line'> <span class="n">SHADOW_MAP</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;android.widget.AbsListView&quot;</span><span class="o">,</span> <span class="s">&quot;org.robolectric.shadows.ShadowAbsListView&quot;</span><span class="o">);</span>
</span><span class='line'> <span class="n">SHADOW_MAP</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;android.widget.AbsSeekBar&quot;</span><span class="o">,</span> <span class="s">&quot;org.robolectric.shadows.ShadowAbsSeekBar&quot;</span><span class="o">);</span>
</span><span class='line'> <span class="n">SHADOW_MAP</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;android.widget.AbsSpinner&quot;</span><span class="o">,</span> <span class="s">&quot;org.robolectric.shadows.ShadowAbsSpinner&quot;</span><span class="o">);</span>
</span><span class='line'> <span class="n">SHADOW_MAP</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;android.widget.AbsoluteLayout&quot;</span><span class="o">,</span> <span class="s">&quot;org.robolectric.shadows.ShadowAbsoluteLayout&quot;</span><span class="o">);</span>
</span><span class='line'> <span class="n">SHADOW_MAP</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;android.widget.AbsoluteLayout.LayoutParams&quot;</span><span class="o">,</span> <span class="s">&quot;org.robolectric.shadows.ShadowAbsoluteLayout$ShadowLayoutParams&quot;</span><span class="o">);</span>
</span><span class='line'> <span class="n">SHADOW_MAP</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;android.database.AbstractCursor&quot;</span><span class="o">,</span> <span class="s">&quot;org.robolectric.shadows.ShadowAbstractCursor&quot;</span><span class="o">);</span>
</span><span class='line'>   <span class="o">****</span> <span class="n">省略</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里，大概就可以获悉其的实现方法，通过 <code>Shadow</code> 类来替换其对应的真实方法的实现，最终达到的目的就会使我们的测试脱离一些底层的具体实现，来达到我们最快测试的目的。</p>

<p>若是大家感兴趣的话，可以具体查看相应组件类的 <code>Shadow</code> 实现。当然，这里我们也可以自定义 <code>Shadow</code>，来满足定制化的需求，这里来个很简单的实现：
+ 定义 Shadow 类</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Implements</span><span class="o">(</span><span class="n">Toast</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomShadowToast</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="n">mIsShown</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">__constructor__</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Implementation</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">show</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mIsShown</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isToastShowInvoked</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mIsShown</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里以 Toast 为例，只对其 show 方法做以实现，当调用了 <code>show</code> 方法之后，我们将一静态变量 <code>mIsShown</code> 标记为 true，通过 <code>isToastShowInvoked</code> 方法来进行判断其是否调用。</p>

<blockquote><p>需要注意的三点：@Implements 注解指定需要对哪个类进行 shadow；@Implementation 指定需要对哪个方法进行替换；构造器需要通过  __constructor__  来编写。</p></blockquote>

<ul>
<li>测试调用</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">RobolectricTestRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@Config</span><span class="o">(</span><span class="n">constants</span> <span class="o">=</span> <span class="n">BuildConfig</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">sdk</span> <span class="o">=</span> <span class="mi">21</span><span class="o">,</span> <span class="n">shadows</span> <span class="o">=</span> <span class="o">{</span> <span class="n">CustomShadowToast</span><span class="o">.</span><span class="na">class</span> <span class="o">})</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomShadowTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testToast</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Activity</span> <span class="n">activity</span> <span class="o">=</span> <span class="n">Robolectric</span><span class="o">.</span><span class="na">setupActivity</span><span class="o">(</span><span class="n">TestToastActivity</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Button</span> <span class="n">button</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span> <span class="n">activity</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">btn_test_main</span><span class="o">);</span>
</span><span class='line'>        <span class="n">button</span><span class="o">.</span><span class="na">performClick</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">CustomShadowToast</span><span class="o">.</span><span class="na">isToastShowInvoked</span><span class="o">(),</span> <span class="n">is</span><span class="o">(</span><span class="kc">true</span><span class="o">));</span>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">shadowOf</span><span class="o">(</span><span class="n">RuntimeEnvironment</span><span class="o">.</span><span class="na">application</span><span class="o">).</span><span class="na">getShownToasts</span><span class="o">().</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">,</span> <span class="n">is</span><span class="o">(</span><span class="kc">true</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里要注意的是在 <code>Config</code> 注解中添加我们的 <code>Shadow</code> 类。在 <code>TestToastActivity</code> 类中，通过 button 的点击，来随意显示一个 Toast ，我们是可以发现自定义 <code>CustomShadowToast</code> 的静态变量确实是调用了。</p>

<p>不过第二个 <code>assertThat</code> 方法对显示的 <code>toast</code> 数目做判断，却发现个数为零。这 <code>shownToasts</code> 数目的改变，是在 <code>ShadowToast</code> 类中，进行添加的，可看代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Implementation</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">show</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'> <span class="n">shadowOf</span><span class="o">(</span><span class="n">RuntimeEnvironment</span><span class="o">.</span><span class="na">application</span><span class="o">).</span><span class="na">getShownToasts</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="n">toast</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为 <code>ShadowToast</code> 类中也对 <code>show</code> 方法做了实现，但是其却被我们自定义实现给替换掉了。所以我们在自定义 <code>Shadow</code> 实现的时候，需要对这一点谨慎一二。</p>

<p>另外，我们也有在自定义 <code>Shadow</code> 的时候，需要持有真实类的引用，可以直接使用 <code>RealObject</code> 注解，就像 <code>ShadowToast</code> 一样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Implements</span><span class="o">(</span><span class="n">Toast</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ShadowToast</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// 省略</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@RealObject</span> <span class="n">Toast</span> <span class="n">toast</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>浅析</h2>

<p>相信大家也是同我一样会对这里的 <code>Shadow</code> 实现颇感兴趣的。问题是 <code>Shadow</code> 类是如何跟真实的类挂上关系的？我们在针对真实类方法的调用，最后却调用的是 <code>Shadow</code> 类里面的方法。</p>

<p>以第一个 Demo 中的 <code>ShadowActivity</code> 的获取为例，查看 <code>shadowOf</code> 方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">ShadowActivity</span> <span class="nf">shadowOf</span><span class="o">(</span><span class="n">Activity</span> <span class="n">actual</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'> <span class="k">return</span> <span class="o">(</span><span class="n">ShadowActivity</span><span class="o">)</span> <span class="n">ShadowExtractor</span><span class="o">.</span><span class="na">extract</span><span class="o">(</span><span class="n">actual</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>进而再看 <code>ShadowExtractor</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ShadowExtractor</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">Object</span> <span class="nf">extract</span><span class="o">(</span><span class="n">Object</span> <span class="n">instance</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">((</span><span class="n">ShadowedObject</span><span class="o">)</span> <span class="n">instance</span><span class="o">).</span><span class="na">$$robo$getData</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>而其中的 <code>ShadowedObject</code> 就是一个很简单的接口：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ShadowedObject</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Object</span> <span class="nf">$$robo$getData</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>由此可知，我们的 Activity 对象 <code>actual</code> 其实已经实现了 <code>ShadowedObject</code> 接口。这个就比较吊了啊，这里代码查看到头，再追溯 <code>Activity</code> 是如何构造的，发现并无什么特别的地方。那最后只剩 <code>@RunWith</code> 注解的参数 <code>RobolectricTestRunner</code> 类了，在 <code>runChild</code> 方法中，发现构造 <code>SdkEnvironment</code> 中 <code>InstrumentingClassLoader</code> 的身影，细看这个类，发现应该就是它完成了我们所需要的功能。</p>

<p>首先，它继承了 <code>ClassLoader</code> ，它在 <code>loadClass</code> 中进行了重写，对由需要由自己进行特殊加载的类，执行 <code>findClass</code> 的方法，否则用父类的 <code>loadClass</code> 方法。</p>

<p>在 <code>findClass</code> 中，其使用了 <a href="http://asm.ow2.org">ASM</a> 这个字节码修改库，来对我们需要修改的类的字节码做修改，使其与我们的 <code>shadow</code> 相绑定。最可证明的就是其中的这段代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">classNode</span><span class="o">.</span><span class="na">interfaces</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">Type</span><span class="o">.</span><span class="na">getInternalName</span><span class="o">(</span><span class="n">ShadowedObject</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过 ASM 的 <code>ClassNode</code> 对象添加了 <code>ShadowedObject</code> 的接口，与我们之前看到的相吻合。但是类方法是如何替换的，这里的代码就看的是一头雾水了。这里先留一个坑，以后理解了 Java 的字节码，再来填这个坑。若是有小伙伴对这里也有兴趣，可加 QQ 群：289926871 一起交流。</p>

<h2>参考资料</h2>

<ul>
<li><a href="http://robolectric.org/">Robolectric doc</a></li>
<li><a href="http://asm.ow2.org/">Asm doc</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android单元测试-Mockito 浅析]]></title>
    <link href="http://alighters.github.io/blog/blog/2016/09/08/unit-test-mockito/"/>
    <updated>2016-09-08T13:17:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2016/09/08/unit-test-mockito</id>
    <content type="html"><![CDATA[<p>本文主要针对测试框架 <code>Mockito</code> 在实践中的经常用到的代码做一示例汇总，并对其实现思想做以简单的分析。</p>

<h2>介绍</h2>

<p>用来为提供函数返回结果的模拟（mock）及对函数调用过程的验证。</p>

<p><strong> 关键词 </strong>
+ mock : 针对真实的类或者对象，创建一个模拟（代理）的对象。
+ stub :  针对一个类或者对象的方法，进行模拟调用及输出。</p>

<!-- more -->


<p>其中 mock 针对是类和队形，而 stub 针对的是行为。他们具体在此框架中的体现分别是: 1) mock 对应的是类 <code>Mockito</code> 中的 <code>mock</code> 及 <code>spy</code> 方法；2）stub 对应是 <code>Mockito</code> 中的 <code>when</code> 及 <code>doReturn</code> 等系列方法。</p>

<blockquote><p>PS: 这里注意与框架 Robolectric 的 <code>Shadow</code> 以区别。</p></blockquote>

<h2>引入</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">testCompile</span> <span class="err">&#39;</span><span class="n">org</span><span class="o">.</span><span class="na">mockito</span><span class="o">:</span><span class="n">mockito</span><span class="o">-</span><span class="nl">core:</span><span class="mf">2.1</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="n">beta</span><span class="o">.</span><span class="mi">119</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>代码示例：<a href="https://github.com/alighters/AndroidDemos/blob/master/mockito/src/test/java/lighters/mockito/MockTest.java">地址</a></h2>

<h3>1. Mock 方法的使用</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testMock</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">List</span> <span class="n">mockedList</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">List</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//using mock object</span>
</span><span class='line'>  <span class="n">mockedList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;one&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">mockedList</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//verification</span>
</span><span class='line'>  <span class="n">verify</span><span class="o">(</span><span class="n">mockedList</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;one&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">verify</span><span class="o">(</span><span class="n">mockedList</span><span class="o">).</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可直接通过接口来进行 mock。一旦创建了一个 mock 之后，他会记住所有它的操作，则我们就可以通过 verify 方法来检查相应方法是否调用。</p>

<h3>2.打桩（Stub），即调用返回的结果模拟</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">LinkedList</span> <span class="n">mockedList</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">LinkedList</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//stubbing</span>
</span><span class='line'><span class="n">when</span><span class="o">(</span><span class="n">mockedList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">)).</span><span class="na">thenReturn</span><span class="o">(</span><span class="s">&quot;first&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">when</span><span class="o">(</span><span class="n">mockedList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">1</span><span class="o">)).</span><span class="na">thenThrow</span><span class="o">(</span><span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//following prints &quot;first&quot;</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">mockedList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//following throws runtime exception</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">mockedList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//following prints &quot;null&quot; because get(999) was not stubbed</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">mockedList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">999</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里指定关键字 <code>when</code> 返回一个 <code>OngoingStubbing</code> 接口，通过其提供的 <code>thenReturn</code>，<code>thenThrow</code>，<code>thenCallRealMethod</code> 及自定义 <code>thenAnswer</code> 来返回相应的结果。</p>

<h3>3.参数匹配</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">LinkedList</span> <span class="n">mockedList</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">LinkedList</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="c1">//stubbing using built-in anyInt() argument matcher</span>
</span><span class='line'><span class="n">when</span><span class="o">(</span><span class="n">mockedList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">anyInt</span><span class="o">())).</span><span class="na">thenReturn</span><span class="o">(</span><span class="s">&quot;element&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//following prints &quot;element&quot;</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">mockedList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">999</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//you can also verify using an argument matcher</span>
</span><span class='line'><span class="n">verify</span><span class="o">(</span><span class="n">mockedList</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="n">anyInt</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>有时我们针对函数参数的模拟，不是一个特定的数值，而是一个范围。这时可以范围型的参数匹配，在 <code>ArgumentMatchers</code> 中，提供了一组不同类型的 any 操作。如：<code>any(Class)</code>，<code>anyObject()</code>，<code>anyVararg()</code>，<code>anyChar()</code>，<code>anyInt()</code>，<code>anyBoolean()</code>，<code>anyCollectionOf(Class)</code>等。</p>

<h3>4.调用次数</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">LinkedList</span> <span class="n">mockedList</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">LinkedList</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//using mock</span>
</span><span class='line'><span class="n">mockedList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;once&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">mockedList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;twice&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">mockedList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;twice&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">mockedList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;three times&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">mockedList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;three times&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">mockedList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;three times&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//following two verifications work exactly the same - times(1) is used by default</span>
</span><span class='line'><span class="n">verify</span><span class="o">(</span><span class="n">mockedList</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;once&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">verify</span><span class="o">(</span><span class="n">mockedList</span><span class="o">,</span> <span class="n">times</span><span class="o">(</span><span class="mi">1</span><span class="o">)).</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;once&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//exact number of invocations verification</span>
</span><span class='line'><span class="n">verify</span><span class="o">(</span><span class="n">mockedList</span><span class="o">,</span> <span class="n">times</span><span class="o">(</span><span class="mi">2</span><span class="o">)).</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;twice&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">verify</span><span class="o">(</span><span class="n">mockedList</span><span class="o">,</span> <span class="n">times</span><span class="o">(</span><span class="mi">3</span><span class="o">)).</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;three times&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//verification using never(). never() is an alias to times(0)</span>
</span><span class='line'><span class="n">verify</span><span class="o">(</span><span class="n">mockedList</span><span class="o">,</span> <span class="n">never</span><span class="o">()).</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;never happened&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//verification using atLeast()/atMost()</span>
</span><span class='line'><span class="n">verify</span><span class="o">(</span><span class="n">mockedList</span><span class="o">,</span> <span class="n">atLeastOnce</span><span class="o">()).</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;three times&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">verify</span><span class="o">(</span><span class="n">mockedList</span><span class="o">,</span> <span class="n">atLeast</span><span class="o">(</span><span class="mi">2</span><span class="o">)).</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;twice&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">verify</span><span class="o">(</span><span class="n">mockedList</span><span class="o">,</span> <span class="n">atMost</span><span class="o">(</span><span class="mi">5</span><span class="o">)).</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;three times&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过 <code>times</code>，<code>never</code>，<code>atLeastOnce</code>，<code>atLeast</code>，<code>atMost</code> 这些方法，我们可以对一个方法的调用次数做判断。其中 <code>times(1)</code> 是默认的。</p>

<h3>5.方法添加异常</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">LinkedList</span> <span class="n">mockedList</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">LinkedList</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="n">doThrow</span><span class="o">(</span><span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">()).</span><span class="na">when</span><span class="o">(</span><span class="n">mockedList</span><span class="o">).</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//following throws RuntimeException:</span>
</span><span class='line'><span class="n">mockedList</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用 <code>doThrow</code> 可以为一个方法的调用添加异常。这样可以验证我们的代码对异常的处理能力如何。</p>

<h3>6.顺序验证</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// A. Single mock whose methods must be invoked in a particular order</span>
</span><span class='line'><span class="n">List</span> <span class="n">singleMock</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">List</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//using a single mock</span>
</span><span class='line'><span class="n">singleMock</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;was added first&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">singleMock</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;was added second&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//create an inOrder verifier for a single mock</span>
</span><span class='line'><span class="n">InOrder</span> <span class="n">inOrder1</span> <span class="o">=</span> <span class="n">inOrder</span><span class="o">(</span><span class="n">singleMock</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//following will make sure that add is first called with &quot;was added first, then with &quot;was added second&quot;</span>
</span><span class='line'><span class="n">inOrder1</span><span class="o">.</span><span class="na">verify</span><span class="o">(</span><span class="n">singleMock</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;was added first&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">inOrder1</span><span class="o">.</span><span class="na">verify</span><span class="o">(</span><span class="n">singleMock</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;was added second&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// B. Multiple mocks that must be used in a particular order</span>
</span><span class='line'><span class="n">List</span> <span class="n">firstMock</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">List</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="n">List</span> <span class="n">secondMock</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">List</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//using mocks</span>
</span><span class='line'><span class="n">firstMock</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;was called first&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">secondMock</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;was called second&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//create inOrder object passing any mocks that need to be verified in order</span>
</span><span class='line'><span class="n">inOrder1</span> <span class="o">=</span> <span class="n">inOrder</span><span class="o">(</span><span class="n">firstMock</span><span class="o">,</span> <span class="n">secondMock</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//following will make sure that firstMock was called before secondMock</span>
</span><span class='line'><span class="n">inOrder1</span><span class="o">.</span><span class="na">verify</span><span class="o">(</span><span class="n">firstMock</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;was called first&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">inOrder1</span><span class="o">.</span><span class="na">verify</span><span class="o">(</span><span class="n">secondMock</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;was called second&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>若是我们需要对调用的顺序做判断，就可以使用 <code>InOrder</code> 这个类，通过 Mockito 的方法 <code>inOrder</code>，来作为其参数，这样我们的方法就必须按顺序调用。试试将上述代码的 verify 顺序交换，看看会发生什么。</p>

<h3>7.调用从未发生</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span> <span class="n">mockOne</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">List</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="n">List</span> <span class="n">mockTwo</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">List</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="n">List</span> <span class="n">mockThree</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">List</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//using mocks - only mockOne is interacted</span>
</span><span class='line'><span class="n">mockOne</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;one&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//ordinary verification</span>
</span><span class='line'><span class="n">verify</span><span class="o">(</span><span class="n">mockOne</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;one&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//verify that method was never called on a mock</span>
</span><span class='line'><span class="n">verify</span><span class="o">(</span><span class="n">mockOne</span><span class="o">,</span> <span class="n">never</span><span class="o">()).</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;two&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//verify that other mocks were not interacted</span>
</span><span class='line'><span class="n">verifyZeroInteractions</span><span class="o">(</span><span class="n">mockTwo</span><span class="o">,</span> <span class="n">mockThree</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过 <code>never</code> 来指定一个方法从未发生调用，使用 <code>verifyZeroInteractions</code> 来确定对象的实例从未发生调用</p>

<h3>8. 没有更多调用</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span> <span class="n">mockedList</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">List</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//using mocks</span>
</span><span class='line'><span class="n">mockedList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;one&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">mockedList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;two&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">verify</span><span class="o">(</span><span class="n">mockedList</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;one&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//following verification will fail</span>
</span><span class='line'><span class="n">verifyNoMoreInteractions</span><span class="o">(</span><span class="n">mockedList</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码中的 <code>verifyNoMoreInteractions</code> 会发生错误，原因就在于未对 <code>add("two")</code> 做验证，我们在 <code>verify(mockedList).add("one");</code> 代码后添加 <code>add(two)</code>的方法验证，最后的测试通过。</p>

<blockquote><p>1.这里的 verify <code>add("one")</code> 及 <code>add("two)</code>顺序是无所谓的。
2.可以看出的是这个测试方法的不精确性，尽力避免使用。</p></blockquote>

<h3>9. @Mock 注解</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">ArticleManagerTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>       <span class="nd">@Mock</span> <span class="kd">private</span> <span class="n">ArticleCalculator</span> <span class="n">calculator</span><span class="o">;</span>
</span><span class='line'>       <span class="nd">@Mock</span> <span class="kd">private</span> <span class="n">ArticleDatabase</span> <span class="n">database</span><span class="o">;</span>
</span><span class='line'>       <span class="nd">@Mock</span> <span class="kd">private</span> <span class="n">UserProvider</span> <span class="n">userProvider</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="kd">private</span> <span class="n">ArticleManager</span> <span class="n">manager</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以通过对属性添加 @Mock 注解来避免使用 mock 方法，不过不要忘了 initMocks 方法的调用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">MockitoAnnotations</span><span class="o">.</span><span class="na">initMocks</span><span class="o">(</span><span class="n">testClass</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>10. 连续调用</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">HashMap</span> <span class="n">mock</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">HashMap</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="n">when</span><span class="o">(</span><span class="n">mock</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;some arg&quot;</span><span class="o">)).</span><span class="na">thenThrow</span><span class="o">(</span><span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">()).</span><span class="na">thenReturn</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//First call: throws runtime exception:</span>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">mock</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;some arg&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Second call: prints &quot;foo&quot;</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">mock</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;some arg&quot;</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Any consecutive call: prints &quot;foo&quot; as well (last stubbing wins).</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">mock</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;some arg&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过对 mock 一直添加 <code>then</code> 的返回值，使得我们按顺序每次调用的返回结果都不同。另外，一个简单的写法， <code>thenReturn</code> 支持数组参数，来设定结果依次返回：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">when</span><span class="o">(</span><span class="n">mock</span><span class="o">.</span><span class="na">someMethod</span><span class="o">(</span><span class="s">&quot;some arg&quot;</span><span class="o">))</span> <span class="o">.</span><span class="na">thenReturn</span><span class="o">(</span><span class="s">&quot;one&quot;</span><span class="o">,</span> <span class="s">&quot;two&quot;</span><span class="o">,</span> <span class="s">&quot;three&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>11.Answer 结果返回</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">HashMap</span> <span class="n">mock</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">HashMap</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">when</span><span class="o">(</span><span class="n">mock</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">anyString</span><span class="o">())).</span><span class="na">thenAnswer</span><span class="o">(</span><span class="k">new</span> <span class="n">Answer</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="nd">@Override</span>
</span><span class='line'>   <span class="kd">public</span> <span class="n">Object</span> <span class="nf">answer</span><span class="o">(</span><span class="n">InvocationOnMock</span> <span class="n">invocation</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">Object</span><span class="o">[]</span> <span class="n">args</span> <span class="o">=</span> <span class="n">invocation</span><span class="o">.</span><span class="na">getArguments</span><span class="o">();</span>
</span><span class='line'>       <span class="n">Object</span> <span class="n">mock</span> <span class="o">=</span> <span class="n">invocation</span><span class="o">.</span><span class="na">getMock</span><span class="o">();</span>
</span><span class='line'>       <span class="k">return</span> <span class="s">&quot;called with arguments: &quot;</span> <span class="o">+</span> <span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//the following prints &quot;called with arguments: foo&quot;</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">mock</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>当我们一个函数方法返回结果的不确定性，需要动态地根据参数指来改变。则上述的几个 <code>then</code> 方法不满足的情况下，我们可以通过 <code>thenAnswer</code> 方法返回一个 Answer 对象，来动态地返回结果。</p>

<h3>12.doReturn | doThrow | doAnswer | doNothing | doCallRealMethod</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span> <span class="n">mockedList</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">LinkedList</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="n">doThrow</span><span class="o">(</span><span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">()).</span><span class="na">when</span><span class="o">(</span><span class="n">mockedList</span><span class="o">).</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//following throws RuntimeException:</span>
</span><span class='line'><span class="n">mockedList</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用 do 系列的方法，我们可以针对 <code>返回值</code> 的方法进行测试。</p>

<h3>13.检测真实的对象</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">LinkedList</span><span class="o">();</span>
</span><span class='line'><span class="n">List</span> <span class="n">sypList</span> <span class="o">=</span> <span class="n">spy</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//optionally, you can stub out some methods:</span>
</span><span class='line'><span class="n">when</span><span class="o">(</span><span class="n">sypList</span><span class="o">.</span><span class="na">size</span><span class="o">()).</span><span class="na">thenReturn</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//using the spy calls *real* methods</span>
</span><span class='line'><span class="n">sypList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;one&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">sypList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;two&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//prints &quot;one&quot; - the first element of a list</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sypList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//size() method was stubbed - 100 is printed</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sypList</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//optionally, you can verify</span>
</span><span class='line'><span class="n">verify</span><span class="o">(</span><span class="n">sypList</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;one&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">verify</span><span class="o">(</span><span class="n">sypList</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;two&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>mock 方法是根据接口、类动态地生成一个对象，若是我们有一个真正的对象的时候，其就不适用了，这时，可以使用 spy 方法。但是其有使用限制的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">LinkedList</span><span class="o">();</span>
</span><span class='line'><span class="n">List</span> <span class="n">spy</span> <span class="o">=</span> <span class="n">spy</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Impossible: real method is called so spy.get(0) throws IndexOutOfBoundsException (the list is yet empty)</span>
</span><span class='line'><span class="c1">//when(spy.get(0)).thenReturn(&quot;foo&quot;);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//You have to use doReturn() for stubbing</span>
</span><span class='line'><span class="n">doReturn</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">).</span><span class="na">when</span><span class="o">(</span><span class="n">spy</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用 <code>when</code> + <code>thenReturn</code> ，并不返回我们预期的结果，而是需要使用 <code>doReturn</code> + <code>when</code> 的格式。
其原因在于，Mockito 框架并不会对真实的对象进行 mock，只会真实的对象创建一个副本。</p>

<h3>14.指定返回信息</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Map</span> <span class="n">mock</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">HashMap</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">Mockito</span><span class="o">.</span><span class="na">RETURNS_SMART_NULLS</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">mock</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;b&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>添加了 <code>Mockito. RETURNS_SMART_NULLS</code> 参数，当调用未指定返回行为的方法，输出的内容将不再是简单的 <code>null</code> 异常，而是下面更加人性化的信息:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">SmartNull</span> <span class="n">returned</span> <span class="n">by</span> <span class="k">this</span> <span class="n">unstubbed</span> <span class="n">method</span> <span class="n">call</span> <span class="n">on</span> <span class="n">a</span> <span class="nl">mock:</span>
</span><span class='line'><span class="n">hashMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;b&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>15.参数匹配判断</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">ListOfTwoElements</span> <span class="kd">implements</span> <span class="n">ArgumentMatcher</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>   <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">matches</span><span class="o">(</span><span class="n">List</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">return</span> <span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>       <span class="c1">//printed in verification errors</span>
</span><span class='line'>       <span class="k">return</span> <span class="s">&quot;[list of 2 elements]&quot;</span><span class="o">;</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">List</span> <span class="n">mock</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">List</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">when</span><span class="o">(</span><span class="n">mock</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">argThat</span><span class="o">(</span><span class="k">new</span> <span class="nf">ListOfTwoElements</span><span class="o">()))).</span><span class="na">thenReturn</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">mock</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&quot;one&quot;</span><span class="o">,</span> <span class="s">&quot;two&quot;</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'><span class="n">verify</span><span class="o">(</span><span class="n">mock</span><span class="o">).</span><span class="na">addAll</span><span class="o">(</span><span class="n">argThat</span><span class="o">(</span><span class="k">new</span> <span class="nf">ListOfTwoElements</span><span class="o">()));</span>
</span></code></pre></td></tr></table></div></figure>


<p>实现 <code>ArgumentMatcher</code> 类，并通过 <code>argThat</code> 方法对参数进行判断。</p>

<h3>16.对真实类的部分 mock</h3>

<p>这里一般有两种写法：
1） 使用 spy</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testPartialRealMock1</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">//you can create partial mock with spy() method:</span>
</span><span class='line'>  <span class="n">LinkedList</span> <span class="n">linkedList</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">LinkedList</span><span class="o">();</span>
</span><span class='line'>  <span class="n">linkedList</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">List</span> <span class="n">list</span> <span class="o">=</span> <span class="n">spy</span><span class="o">(</span><span class="n">linkedList</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">assertThat</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">),</span> <span class="n">is</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过 spy 调用对象的方法，将会调用其真正的方法。</p>

<p>2) 使用 mock</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Rule</span>
</span><span class='line'><span class="kd">public</span> <span class="n">ExpectedException</span> <span class="n">thrown</span><span class="o">=</span> <span class="n">ExpectedException</span><span class="o">.</span><span class="na">none</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testPartialRealMock2</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">//you can enable partial mock capabilities selectively on mocks:</span>
</span><span class='line'>  <span class="n">List</span> <span class="n">mock</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">LinkedList</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>  <span class="c1">//Be sure the real implementation is &#39;safe&#39;.</span>
</span><span class='line'>  <span class="c1">//If real implementation throws exceptions or depends on specific state of the object then you&#39;re in trouble.</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">when</span><span class="o">(</span><span class="n">mock</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">anyInt</span><span class="o">())).</span><span class="na">thenCallRealMethod</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">thrown</span><span class="o">.</span><span class="na">expect</span><span class="o">(</span><span class="n">Exception</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">mock</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>针对 mock 的使用时，主要代码在于方法 <code>thenCallRealMethod()</code>，但它有个很大的安全隐患，就是此方法抛出异常的问题。上述代码就可以看出，因为真实的 list 对象，并不含有任何元素，所以在通过真实方法返回时，就会有异常产生。</p>

<p>这里，建议使用方法一 <code>spy</code>，来对真实的对象进行测试。</p>

<h3>17.重置 mock</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span> <span class="n">mock</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">List</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="n">when</span><span class="o">(</span><span class="n">mock</span><span class="o">.</span><span class="na">size</span><span class="o">()).</span><span class="na">thenReturn</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
</span><span class='line'><span class="n">mock</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'><span class="n">reset</span><span class="o">(</span><span class="n">mock</span><span class="o">);</span>
</span><span class='line'><span class="n">assertThat</span><span class="o">(</span><span class="n">mock</span><span class="o">.</span><span class="na">size</span><span class="o">(),</span> <span class="n">is</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用 <code>reset</code> 方法，可以将 mock 重置为初始状态。</p>

<h3>18.序列化 mock</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">List</span> <span class="n">serializableMock</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">List</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">withSettings</span><span class="o">().</span><span class="na">serializable</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>若是 spy 的使用则如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;();</span>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">spy</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">ArrayList</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">withSettings</span><span class="o">()</span> <span class="o">.</span><span class="na">spiedInstance</span><span class="o">(</span><span class="n">list</span><span class="o">)</span> <span class="o">.</span><span class="na">defaultAnswer</span><span class="o">(</span><span class="n">CALLS_REAL_METHODS</span><span class="o">)</span> <span class="o">.</span><span class="na">serializable</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<h3>19.timeout 的使用</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span> <span class="n">mock</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">List</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">when</span><span class="o">(</span><span class="n">mock</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">)).</span><span class="na">thenReturn</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">mock</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">verify</span><span class="o">(</span><span class="n">mock</span><span class="o">,</span> <span class="n">timeout</span><span class="o">(</span><span class="mi">100</span><span class="o">)).</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'><span class="c1">//above is an alias to:</span>
</span><span class='line'><span class="n">verify</span><span class="o">(</span><span class="n">mock</span><span class="o">,</span> <span class="n">timeout</span><span class="o">(</span><span class="mi">100</span><span class="o">).</span><span class="na">times</span><span class="o">(</span><span class="mi">1</span><span class="o">)).</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">mock</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'><span class="n">verify</span><span class="o">(</span><span class="n">mock</span><span class="o">,</span> <span class="n">timeout</span><span class="o">(</span><span class="mi">100</span><span class="o">).</span><span class="na">times</span><span class="o">(</span><span class="mi">2</span><span class="o">)).</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">verify</span><span class="o">(</span><span class="n">mock</span><span class="o">,</span> <span class="n">timeout</span><span class="o">(</span><span class="mi">100</span><span class="o">).</span><span class="na">atLeast</span><span class="o">(</span><span class="mi">2</span><span class="o">)).</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">verify</span><span class="o">(</span><span class="n">mock</span><span class="o">,</span> <span class="k">new</span> <span class="nf">Timeout</span><span class="o">(</span><span class="mi">100</span><span class="o">,</span> <span class="k">new</span> <span class="nf">VerificationMode</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>   <span class="nd">@Override</span>
</span><span class='line'>   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">verify</span><span class="o">(</span><span class="n">VerificationData</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="nd">@Override</span>
</span><span class='line'>   <span class="kd">public</span> <span class="n">VerificationMode</span> <span class="nf">description</span><span class="o">(</span><span class="n">String</span> <span class="n">description</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">})).</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>指定了 <code>timeout</code> 的延时，同时我们也可以其他的验证操作，例如 <code>times</code>，<code>atLeast</code> 等，另外，我们也可以自定义自己的验证规则 <code>VerficationMode</code>。</p>

<h3>20.ignoreStub方法</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//mocking lists for the sake of the example (if you mock List in real you will burn in hell)</span>
</span><span class='line'><span class="n">List</span> <span class="n">mock1</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">List</span><span class="o">.</span><span class="na">class</span><span class="o">),</span> <span class="n">mock2</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">List</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//stubbing mocks:</span>
</span><span class='line'><span class="n">when</span><span class="o">(</span><span class="n">mock1</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">)).</span><span class="na">thenReturn</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
</span><span class='line'><span class="n">when</span><span class="o">(</span><span class="n">mock2</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">)).</span><span class="na">thenReturn</span><span class="o">(</span><span class="mi">20</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//using mocks by calling stubbed get(0) methods:</span>
</span><span class='line'><span class="c1">//System.out.println(mock1.get(0)); //prints 10</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">mock2</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span> <span class="c1">//prints 20</span>
</span><span class='line'>
</span><span class='line'><span class="n">mock1</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'><span class="n">verify</span><span class="o">(</span><span class="n">mock1</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//using mocks by calling clear() methods:</span>
</span><span class='line'><span class="n">mock1</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'><span class="n">mock2</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//verification:</span>
</span><span class='line'><span class="n">verify</span><span class="o">(</span><span class="n">mock1</span><span class="o">).</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'><span class="n">verify</span><span class="o">(</span><span class="n">mock2</span><span class="o">).</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">//verifyNoMoreInteractions() fails because get() methods were not accounted for.</span>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">verifyNoMoreInteractions</span><span class="o">(</span><span class="n">mock1</span><span class="o">,</span> <span class="n">mock2</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NoInteractionsWanted</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//However, if we ignore stubbed methods then we can verifyNoMoreInteractions()</span>
</span><span class='line'><span class="n">verifyNoMoreInteractions</span><span class="o">(</span><span class="n">ignoreStubs</span><span class="o">(</span><span class="n">mock1</span><span class="o">,</span> <span class="n">mock2</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>当第一次调用 <code>verifyNoMoreInteractions</code> 时，直接出现异常，是因为之前也调用了 <code>mock2.get(0)</code>，但是并没有进行 <code>verify</code>。
而一旦我们对添加了 <code>ignoreStubs</code>方法，则会忽略之前的 <code>Stub</code> 的方法，不会再有 <code>verify</code>的限制。
比较特殊的是 <code>inOrder</code>的方法，它会自带 <code>ignoreStubs</code>的效果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span> <span class="n">list</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">List</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="n">when</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">)).</span><span class="na">thenReturn</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span> <span class="c1">//we don&#39;t want to verify this</span>
</span><span class='line'><span class="n">list</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//verify(list).add(0);</span>
</span><span class='line'><span class="c1">//verify(list).add(0);</span>
</span><span class='line'><span class="c1">//verify(list).clear();</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// Same as: InOrder inOrder = inOrder(list);</span>
</span><span class='line'><span class="n">InOrder</span> <span class="n">inOrder</span> <span class="o">=</span> <span class="n">inOrder</span><span class="o">(</span><span class="n">ignoreStubs</span><span class="o">(</span><span class="n">list</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'><span class="n">inOrder</span><span class="o">.</span><span class="na">verify</span><span class="o">(</span><span class="n">list</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'><span class="c1">// this will have an error..</span>
</span><span class='line'><span class="c1">//inOrder.verify(list).get(0);</span>
</span><span class='line'><span class="n">inOrder</span><span class="o">.</span><span class="na">verify</span><span class="o">(</span><span class="n">list</span><span class="o">).</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'><span class="n">inOrder</span><span class="o">.</span><span class="na">verifyNoMoreInteractions</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码中特殊的一点是使用了 <code>inOrder</code>，它并不会上面 <code>System.out.println(list.get(0));</code> 做处理。</p>

<h3>21. 获取 mock 详情</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span> <span class="n">list</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">List</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="n">assertThat</span><span class="o">(</span><span class="n">Mockito</span><span class="o">.</span><span class="na">mockingDetails</span><span class="o">(</span><span class="n">list</span><span class="o">).</span><span class="na">isMock</span><span class="o">(),</span> <span class="n">is</span><span class="o">(</span><span class="kc">true</span><span class="o">));</span>
</span><span class='line'><span class="n">assertThat</span><span class="o">(</span><span class="n">Mockito</span><span class="o">.</span><span class="na">mockingDetails</span><span class="o">(</span><span class="n">list</span><span class="o">).</span><span class="na">isSpy</span><span class="o">(),</span> <span class="n">is</span><span class="o">(</span><span class="kc">false</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<h3>22.自定义错误信息</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span> <span class="n">list</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">List</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="n">when</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">)).</span><span class="na">thenReturn</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'><span class="n">verify</span><span class="o">(</span><span class="n">list</span><span class="o">,</span> <span class="n">description</span><span class="o">(</span><span class="s">&quot;should print the get(0) result&quot;</span><span class="o">)).</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>官方文档还提供一些关于 Java8 函数式的更多用法，这里因为环境问题就不列举了，更多内容可查阅官方文档。</p></blockquote>

<h2>原理简单剖析</h2>

<p>通过上面的示例，我们可以发现两个很重要的方法：<code>mock</code> 及 <code>verify</code>。</p>

<h3>1.mock 类生成</h3>

<p>这里是使用运行时生成代码的库 <a href="https://github.com/raphw/byte-buddy">byte-buddy</a>，而对应在 <code>mockito</code> 框架中实现的代码是在 <code>MockBytecodeGenerator</code> 类中。其中主要的代码在方法 <code>generateMockClass</code> 中，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">T</span><span class="o">&gt;</span> <span class="nf">generateMockClass</span><span class="o">(</span><span class="n">MockFeatures</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">features</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">DynamicType</span><span class="o">.</span><span class="na">Builder</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">builder</span> <span class="o">=</span>
</span><span class='line'>          <span class="n">byteBuddy</span><span class="o">.</span><span class="na">subclass</span><span class="o">(</span><span class="n">features</span><span class="o">.</span><span class="na">mockedType</span><span class="o">)</span>
</span><span class='line'>                   <span class="o">.</span><span class="na">name</span><span class="o">(</span><span class="n">nameFor</span><span class="o">(</span><span class="n">features</span><span class="o">.</span><span class="na">mockedType</span><span class="o">))</span>
</span><span class='line'>                   <span class="o">.</span><span class="na">ignoreAlso</span><span class="o">(</span><span class="n">isGroovyMethod</span><span class="o">())</span>
</span><span class='line'>                   <span class="o">.</span><span class="na">annotateType</span><span class="o">(</span><span class="n">features</span><span class="o">.</span><span class="na">mockedType</span><span class="o">.</span><span class="na">getAnnotations</span><span class="o">())</span>
</span><span class='line'>                   <span class="o">.</span><span class="na">implement</span><span class="o">(</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Type</span><span class="o">&gt;(</span><span class="n">features</span><span class="o">.</span><span class="na">interfaces</span><span class="o">))</span>
</span><span class='line'>                   <span class="o">.</span><span class="na">method</span><span class="o">(</span><span class="n">any</span><span class="o">())</span>
</span><span class='line'>                     <span class="o">.</span><span class="na">intercept</span><span class="o">(</span><span class="n">MethodDelegation</span><span class="o">.</span><span class="na">to</span><span class="o">(</span><span class="n">DispatcherDefaultingToRealMethod</span><span class="o">.</span><span class="na">class</span><span class="o">))</span>
</span><span class='line'>                     <span class="o">.</span><span class="na">transform</span><span class="o">(</span><span class="n">Transformer</span><span class="o">.</span><span class="na">ForMethod</span><span class="o">.</span><span class="na">withModifiers</span><span class="o">(</span><span class="n">SynchronizationState</span><span class="o">.</span><span class="na">PLAIN</span><span class="o">))</span>
</span><span class='line'>                     <span class="o">.</span><span class="na">attribute</span><span class="o">(</span><span class="n">MethodAttributeAppender</span><span class="o">.</span><span class="na">ForInstrumentedMethod</span><span class="o">.</span><span class="na">INCLUDING_RECEIVER</span><span class="o">)</span>
</span><span class='line'>                   <span class="o">.</span><span class="na">serialVersionUid</span><span class="o">(</span><span class="mi">42L</span><span class="o">)</span>
</span><span class='line'>                   <span class="o">.</span><span class="na">defineField</span><span class="o">(</span><span class="s">&quot;mockitoInterceptor&quot;</span><span class="o">,</span> <span class="n">MockMethodInterceptor</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">PRIVATE</span><span class="o">)</span>
</span><span class='line'>                   <span class="o">.</span><span class="na">implement</span><span class="o">(</span><span class="n">MockAccess</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'>                     <span class="o">.</span><span class="na">intercept</span><span class="o">(</span><span class="n">FieldAccessor</span><span class="o">.</span><span class="na">ofBeanProperty</span><span class="o">())</span>
</span><span class='line'>                   <span class="o">.</span><span class="na">method</span><span class="o">(</span><span class="n">isHashCode</span><span class="o">())</span>
</span><span class='line'>                     <span class="o">.</span><span class="na">intercept</span><span class="o">(</span><span class="n">to</span><span class="o">(</span><span class="n">MockMethodInterceptor</span><span class="o">.</span><span class="na">ForHashCode</span><span class="o">.</span><span class="na">class</span><span class="o">))</span>
</span><span class='line'>                   <span class="o">.</span><span class="na">method</span><span class="o">(</span><span class="n">isEquals</span><span class="o">())</span>
</span><span class='line'>                     <span class="o">.</span><span class="na">intercept</span><span class="o">(</span><span class="n">to</span><span class="o">(</span><span class="n">MockMethodInterceptor</span><span class="o">.</span><span class="na">ForEquals</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">features</span><span class="o">.</span><span class="na">crossClassLoaderSerializable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">builder</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">implement</span><span class="o">(</span><span class="n">CrossClassLoaderSerializableMock</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'>                       <span class="o">.</span><span class="na">intercept</span><span class="o">(</span><span class="n">to</span><span class="o">(</span><span class="n">MockMethodInterceptor</span><span class="o">.</span><span class="na">ForWriteReplace</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">builder</span><span class="o">.</span><span class="na">make</span><span class="o">()</span>
</span><span class='line'>                <span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="k">new</span> <span class="n">MultipleParentClassLoader</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
</span><span class='line'>                        <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">features</span><span class="o">.</span><span class="na">mockedType</span><span class="o">)</span>
</span><span class='line'>                        <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">features</span><span class="o">.</span><span class="na">interfaces</span><span class="o">)</span>
</span><span class='line'>                        <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getContextClassLoader</span><span class="o">())</span>
</span><span class='line'>                        <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">MockAccess</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">DispatcherDefaultingToRealMethod</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'>                        <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">MockMethodInterceptor</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
</span><span class='line'>                                <span class="n">MockMethodInterceptor</span><span class="o">.</span><span class="na">ForHashCode</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
</span><span class='line'>                                <span class="n">MockMethodInterceptor</span><span class="o">.</span><span class="na">ForEquals</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">build</span><span class="o">(),</span>
</span><span class='line'>                        <span class="n">ClassLoadingStrategy</span><span class="o">.</span><span class="na">Default</span><span class="o">.</span><span class="na">INJECTION</span><span class="o">.</span><span class="na">with</span><span class="o">(</span><span class="n">features</span><span class="o">.</span><span class="na">mockedType</span><span class="o">.</span><span class="na">getProtectionDomain</span><span class="o">()))</span>
</span><span class='line'>                <span class="o">.</span><span class="na">getLoaded</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里便是通过 byte-buddy 来生成我们的 mock 类， 其中代码行 <code>.intercept(MethodDelegation.to(DispatcherDefaultingToRealMethod.class))</code> 则是用来生成代理方法的类 ，其中 <code>DispatcherDefaultingToRealMethod</code> 是类 <code>MockMethodInterceptor</code> 的静态内部类。在对其调用时，最后会调到 <code>MockHandlerImpl</code> 类的实现方法 <code>handle</code> ，这个才是我们执行 mock 类方法每次调用的重头戏：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">Object</span> <span class="nf">handle</span><span class="o">(</span><span class="n">Invocation</span> <span class="n">invocation</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">invocationContainerImpl</span><span class="o">.</span><span class="na">hasAnswersForStubbing</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// 对 doThrow() 或者 doAnswer() 返回 void 格式的执行调用     </span>
</span><span class='line'>      <span class="n">InvocationMatcher</span> <span class="n">invocationMatcher</span> <span class="o">=</span> <span class="n">matchersBinder</span><span class="o">.</span><span class="na">bindMatchers</span><span class="o">(</span>
</span><span class='line'>              <span class="n">mockingProgress</span><span class="o">().</span><span class="na">getArgumentMatcherStorage</span><span class="o">(),</span>
</span><span class='line'>              <span class="n">invocation</span>
</span><span class='line'>      <span class="o">);</span>
</span><span class='line'>      <span class="n">invocationContainerImpl</span><span class="o">.</span><span class="na">setMethodForStubbing</span><span class="o">(</span><span class="n">invocationMatcher</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="c1">// 验证规则获取</span>
</span><span class='line'>  <span class="n">VerificationMode</span> <span class="n">verificationMode</span> <span class="o">=</span> <span class="n">mockingProgress</span><span class="o">().</span><span class="na">pullVerificationMode</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">InvocationMatcher</span> <span class="n">invocationMatcher</span> <span class="o">=</span> <span class="n">matchersBinder</span><span class="o">.</span><span class="na">bindMatchers</span><span class="o">(</span>
</span><span class='line'>          <span class="n">mockingProgress</span><span class="o">().</span><span class="na">getArgumentMatcherStorage</span><span class="o">(),</span>
</span><span class='line'>          <span class="n">invocation</span>
</span><span class='line'>  <span class="o">);</span>
</span><span class='line'><span class="c1">// mock 进度状态的验证</span>
</span><span class='line'>  <span class="n">mockingProgress</span><span class="o">().</span><span class="na">validateState</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 当 verificationMode 不是空的时候，则表明在执行 verify 方法</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">verificationMode</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// 检查 verificationMode 是否对应正确的 mock</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(((</span><span class="n">MockAwareVerificationMode</span><span class="o">)</span> <span class="n">verificationMode</span><span class="o">).</span><span class="na">getMock</span><span class="o">()</span> <span class="o">==</span> <span class="n">invocation</span><span class="o">.</span><span class="na">getMock</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">VerificationDataImpl</span> <span class="n">data</span> <span class="o">=</span> <span class="n">createVerificationData</span><span class="o">(</span><span class="n">invocationContainerImpl</span><span class="o">,</span> <span class="n">invocationMatcher</span><span class="o">);</span>
</span><span class='line'>          <span class="n">verificationMode</span><span class="o">.</span><span class="na">verify</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// 对应的不是相同的 mock , 重新添加 verification mode</span>
</span><span class='line'>          <span class="n">mockingProgress</span><span class="o">().</span><span class="na">verificationStarted</span><span class="o">(</span><span class="n">verificationMode</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 对调用执行打桩</span>
</span><span class='line'>  <span class="n">invocationContainerImpl</span><span class="o">.</span><span class="na">setInvocationForPotentialStubbing</span><span class="o">(</span><span class="n">invocationMatcher</span><span class="o">);</span>
</span><span class='line'>  <span class="n">OngoingStubbingImpl</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">ongoingStubbing</span> <span class="o">=</span> <span class="k">new</span> <span class="n">OngoingStubbingImpl</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;(</span><span class="n">invocationContainerImpl</span><span class="o">);</span>
</span><span class='line'>  <span class="n">mockingProgress</span><span class="o">().</span><span class="na">reportOngoingStubbing</span><span class="o">(</span><span class="n">ongoingStubbing</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 对这次调用，查找是否有存在的 answer </span>
</span><span class='line'>  <span class="n">StubbedInvocationMatcher</span> <span class="n">stubbedInvocation</span> <span class="o">=</span> <span class="n">invocationContainerImpl</span><span class="o">.</span><span class="na">findAnswerFor</span><span class="o">(</span><span class="n">invocation</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">stubbedInvocation</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">stubbedInvocation</span><span class="o">.</span><span class="na">captureArgumentsFrom</span><span class="o">(</span><span class="n">invocation</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">stubbedInvocation</span><span class="o">.</span><span class="na">answer</span><span class="o">(</span><span class="n">invocation</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Object</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">mockSettings</span><span class="o">.</span><span class="na">getDefaultAnswer</span><span class="o">().</span><span class="na">answer</span><span class="o">(</span><span class="n">invocation</span><span class="o">);</span>
</span><span class='line'>      <span class="k">new</span> <span class="nf">AnswersValidator</span><span class="o">().</span><span class="na">validateDefaultAnswerReturnedValue</span><span class="o">(</span><span class="n">invocation</span><span class="o">,</span> <span class="n">ret</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// 重新设置调用的方法</span>
</span><span class='line'>      <span class="n">invocationContainerImpl</span><span class="o">.</span><span class="na">resetInvocationForPotentialStubbing</span><span class="o">(</span><span class="n">invocationMatcher</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">ret</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码中可以看出这个代理方法也做验证及调用方法的记录，用来方便后续 verify 方法的验证。
另外，针对真实对象模拟的方法 <code>spy</code> ，其调用的也是 <code>mock</code> 方法，不同的是指定了 <code>spiedInstance</code> 或者 answer 指定的是 <code>CALLS_REAL_METHODS</code>。</p>

<h3>2. verify 方法的实现</h3>

<p>可知 verify 是对 mock 对象的验证，其调用的方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="nf">verify</span><span class="o">(</span><span class="n">T</span> <span class="n">mock</span><span class="o">,</span> <span class="n">VerificationMode</span> <span class="n">mode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">mock</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="nf">nullPassedToVerify</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(!</span><span class="n">isMock</span><span class="o">(</span><span class="n">mock</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="nf">notAMockPassedToVerify</span><span class="o">(</span><span class="n">mock</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">MockingProgress</span> <span class="n">mockingProgress</span> <span class="o">=</span> <span class="n">mockingProgress</span><span class="o">();</span>
</span><span class='line'>  <span class="n">VerificationMode</span> <span class="n">actualMode</span> <span class="o">=</span> <span class="n">mockingProgress</span><span class="o">.</span><span class="na">maybeVerifyLazily</span><span class="o">(</span><span class="n">mode</span><span class="o">);</span>
</span><span class='line'>  <span class="n">mockingProgress</span><span class="o">.</span><span class="na">verificationStarted</span><span class="o">(</span><span class="k">new</span> <span class="nf">MockAwareVerificationMode</span><span class="o">(</span><span class="n">mock</span><span class="o">,</span> <span class="n">actualMode</span><span class="o">));</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">mock</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过获取到 mockingProgress，调用其方法 <code>verificationStarted</code>，将新的规则 <code>actualMode</code> 保存下来，并最后返回 mock 对象。之后，若是针对 verify 的对象调用方法，则会调到上文提到 <code>MockHandlerImpl</code> 的 <code>handle</code> 方法，会执行下面的语句：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(((</span><span class="n">MockAwareVerificationMode</span><span class="o">)</span> <span class="n">verificationMode</span><span class="o">).</span><span class="na">getMock</span><span class="o">()</span> <span class="o">==</span> <span class="n">invocation</span><span class="o">.</span><span class="na">getMock</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">VerificationDataImpl</span> <span class="n">data</span> <span class="o">=</span> <span class="n">createVerificationData</span><span class="o">(</span><span class="n">invocationContainerImpl</span><span class="o">,</span> <span class="n">invocationMatcher</span><span class="o">);</span>
</span><span class='line'>    <span class="n">verificationMode</span><span class="o">.</span><span class="na">verify</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的 <code>VerificationDataImpl</code> 则有两个属性:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="n">InvocationMatcher</span> <span class="n">wanted</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="n">InvocationContainer</span> <span class="n">invocations</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中 <code>invocations</code> 保存着我们对 mock 对象的调用记录，而 <code>wanted</code> 则是我们需要 <code>verify</code> 的方法。而具体的验证规则也就是我们之前保存的 <code>VerificationMode</code>。</p>

<h2>总结</h2>

<p>至此，我们总结了 <code>Mockito</code> 框架的多种使用方法，及其简单的原理实现。若是有小伙伴不甚明了，欢迎加入 qq 群：289926871 来一起讨论。</p>

<h2>参考资料</h2>

<ul>
<li><a href="http://site.mockito.org/mockito/docs/current/org/mockito/Mockito.html">Mockito doc</a></li>
<li><a href="https://github.com/mockito/mockito">mockito</a></li>
<li><a href="https://github.com/raphw/byte-buddy">byte-buddy</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[单元测试-Junit 使用及其原理分析]]></title>
    <link href="http://alighters.github.io/blog/blog/2016/09/08/unit-test-junit/"/>
    <updated>2016-09-08T13:16:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2016/09/08/unit-test-junit</id>
    <content type="html"><![CDATA[<h2>引入</h2>

<p>在 build.gradle 文件中</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dependencies {
</span><span class='line'>    testCompile 'junit:junit:4.12'
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>这其中会引入两个jar：junit-4.12.jar 和 hamcrest-core-1.3.jar</p>

<!--more -->


<h2>介绍</h2>

<p>junit 中两个重要的类 <code>Assume</code> 和 <code>Assert</code>， 以及其他一些重要的注解：<code>BeforeClass</code>，<code>AfterClass</code>，<code>After</code>，<code>Before</code> 及 <code>Test</code>，<code>Ignore</code>。
  其中，<code>BeforeClass</code> 和 <code>AfterClass</code> 在每个类加载的开始和结束时运行，需要设置 <code>static</code> 方法；而 <code>Before</code>和<code>After</code> 则是在每个测试方法的开始之前和结束之后运行。</p>

<p>在 hamcrest-core 的 jar 包中，在 org.hamcrest.core 包中提供了一系列操作运算封装，使测试代码更加地易读。如<code>is</code>，<code>not</code>，<code>allOf</code>，<code>anyOf</code>等。</p>

<h2>代码示例</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testAssertArrayEquals</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">byte</span><span class="o">[]</span> <span class="n">expected</span> <span class="o">=</span> <span class="s">&quot;trial&quot;</span><span class="o">.</span><span class="na">getBytes</span><span class="o">();</span>
</span><span class='line'>  <span class="kt">byte</span><span class="o">[]</span> <span class="n">actual</span> <span class="o">=</span> <span class="s">&quot;trial&quot;</span><span class="o">.</span><span class="na">getBytes</span><span class="o">();</span>
</span><span class='line'>  <span class="n">assertArrayEquals</span><span class="o">(</span><span class="s">&quot;failure - byte arrays not same&quot;</span><span class="o">,</span> <span class="n">expected</span><span class="o">,</span> <span class="n">actual</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testAssertEquals</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">assertEquals</span><span class="o">(</span><span class="s">&quot;failure - strings are not equal&quot;</span><span class="o">,</span> <span class="s">&quot;text&quot;</span><span class="o">,</span> <span class="s">&quot;text&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testAssertFalse</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">assertFalse</span><span class="o">(</span><span class="s">&quot;failure - should be false&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testAssertNotNull</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">assertNotNull</span><span class="o">(</span><span class="s">&quot;should not be null&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="nf">Object</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testAssertNotSame</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">assertNotSame</span><span class="o">(</span><span class="s">&quot;should not be same Object&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="nf">Object</span><span class="o">(),</span> <span class="k">new</span> <span class="nf">Object</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testAssertNull</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">assertNull</span><span class="o">(</span><span class="s">&quot;should be null&quot;</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testAssertSame</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Integer</span> <span class="n">aNumber</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="mi">768</span><span class="o">);</span>
</span><span class='line'>  <span class="n">assertSame</span><span class="o">(</span><span class="s">&quot;should be same&quot;</span><span class="o">,</span> <span class="n">aNumber</span><span class="o">,</span> <span class="n">aNumber</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testAssertTrue</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">assertTrue</span><span class="o">(</span><span class="s">&quot;failure - should be true&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上代码来自官方介绍的 <a href="https://github.com/junit-team/junit4/wiki/Assertions">Demo</a> , 列举的是常用而又基础的操作，但遇到复杂的集合判断操作，就力不从心了，不过 Junit 提供了另一更为强大的 <code>assertThat</code> 方法，首先来看看它的使用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// JUnit Matchers assertThat</span>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testAssertThatBothContainsString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">assertThat</span><span class="o">(</span><span class="s">&quot;albumen&quot;</span><span class="o">,</span> <span class="n">both</span><span class="o">(</span><span class="n">containsString</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">)).</span><span class="na">and</span><span class="o">(</span><span class="n">containsString</span><span class="o">(</span><span class="s">&quot;b&quot;</span><span class="o">)));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testAssertThatHasItems</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">assertThat</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&quot;one&quot;</span><span class="o">,</span> <span class="s">&quot;two&quot;</span><span class="o">,</span> <span class="s">&quot;three&quot;</span><span class="o">),</span> <span class="n">hasItems</span><span class="o">(</span><span class="s">&quot;one&quot;</span><span class="o">,</span> <span class="s">&quot;three&quot;</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testAssertThatEveryItemContainsString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">assertThat</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">[]</span> <span class="o">{</span> <span class="s">&quot;fun&quot;</span><span class="o">,</span> <span class="s">&quot;ban&quot;</span><span class="o">,</span> <span class="s">&quot;net&quot;</span> <span class="o">}),</span> <span class="n">everyItem</span><span class="o">(</span><span class="n">containsString</span><span class="o">(</span><span class="s">&quot;n&quot;</span><span class="o">)));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Core Hamcrest Matchers with assertThat</span>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testAssertThatHamcrestCoreMatchers</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">assertThat</span><span class="o">(</span><span class="s">&quot;good&quot;</span><span class="o">,</span> <span class="n">allOf</span><span class="o">(</span><span class="n">equalTo</span><span class="o">(</span><span class="s">&quot;good&quot;</span><span class="o">),</span> <span class="n">startsWith</span><span class="o">(</span><span class="s">&quot;good&quot;</span><span class="o">)));</span>
</span><span class='line'>  <span class="n">assertThat</span><span class="o">(</span><span class="s">&quot;good&quot;</span><span class="o">,</span> <span class="n">not</span><span class="o">(</span><span class="n">allOf</span><span class="o">(</span><span class="n">equalTo</span><span class="o">(</span><span class="s">&quot;bad&quot;</span><span class="o">),</span> <span class="n">equalTo</span><span class="o">(</span><span class="s">&quot;good&quot;</span><span class="o">))));</span>
</span><span class='line'>  <span class="n">assertThat</span><span class="o">(</span><span class="s">&quot;good&quot;</span><span class="o">,</span> <span class="n">anyOf</span><span class="o">(</span><span class="n">equalTo</span><span class="o">(</span><span class="s">&quot;bad&quot;</span><span class="o">),</span> <span class="n">equalTo</span><span class="o">(</span><span class="s">&quot;good&quot;</span><span class="o">)));</span>
</span><span class='line'>  <span class="n">assertThat</span><span class="o">(</span><span class="mi">7</span><span class="o">,</span> <span class="n">not</span><span class="o">(</span><span class="n">CombinableMatcher</span><span class="o">.&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="n">either</span><span class="o">(</span><span class="n">equalTo</span><span class="o">(</span><span class="mi">3</span><span class="o">)).</span><span class="na">or</span><span class="o">(</span><span class="n">equalTo</span><span class="o">(</span><span class="mi">4</span><span class="o">))));</span>
</span><span class='line'>  <span class="n">assertThat</span><span class="o">(</span><span class="k">new</span> <span class="nf">Object</span><span class="o">(),</span> <span class="n">not</span><span class="o">(</span><span class="n">sameInstance</span><span class="o">(</span><span class="k">new</span> <span class="nf">Object</span><span class="o">())));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的 assertThat 用了两种方法：一个是 JunitMatchers ，另一个就是 hamcrest matchers 的 assertThat，不过后者提供的功能相当强大，前者的方法已经标为废弃了。</p>

<blockquote><p>另外，官方也提及了其它第三方提供的 Matchers 实现：
<a href="https://github.com/tobyweston/simple-excel">Excel spreadsheet matchers</a>
<a href="https://github.com/hertzsprung/hamcrest-json">JSON matchers</a>
<a href="https://code.google.com/p/xml-matchers/">XML/XPath matchers</a></p></blockquote>

<p>所以再次我们只看后者，可以看出来的是其方法的最后一个参数非常灵活，紧接着我们看看其怎么实现的？</p>

<h2>assertThat 方法实现</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="nf">assertThat</span><span class="o">(</span><span class="n">T</span> <span class="n">actual</span><span class="o">,</span> <span class="n">Matcher</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">matcher</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">assertThat</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">,</span> <span class="n">actual</span><span class="o">,</span> <span class="n">matcher</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="nf">assertThat</span><span class="o">(</span><span class="n">String</span> <span class="n">reason</span><span class="o">,</span> <span class="n">T</span> <span class="n">actual</span><span class="o">,</span>
</span><span class='line'>      <span class="n">Matcher</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">matcher</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">MatcherAssert</span><span class="o">.</span><span class="na">assertThat</span><span class="o">(</span><span class="n">reason</span><span class="o">,</span> <span class="n">actual</span><span class="o">,</span> <span class="n">matcher</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>再定位到 <code>MatcherAssert</code> 类的方法 <code>assertThat</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="nf">assertThat</span><span class="o">(</span><span class="n">String</span> <span class="n">reason</span><span class="o">,</span> <span class="n">T</span> <span class="n">actual</span><span class="o">,</span> <span class="n">Matcher</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">matcher</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(!</span><span class="n">matcher</span><span class="o">.</span><span class="na">matches</span><span class="o">(</span><span class="n">actual</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Description</span> <span class="n">description</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">StringDescription</span><span class="o">();</span>
</span><span class='line'>      <span class="n">description</span><span class="o">.</span><span class="na">appendText</span><span class="o">(</span><span class="n">reason</span><span class="o">)</span>
</span><span class='line'>                 <span class="o">.</span><span class="na">appendText</span><span class="o">(</span><span class="s">&quot;\nExpected: &quot;</span><span class="o">)</span>
</span><span class='line'>                 <span class="o">.</span><span class="na">appendDescriptionOf</span><span class="o">(</span><span class="n">matcher</span><span class="o">)</span>
</span><span class='line'>                 <span class="o">.</span><span class="na">appendText</span><span class="o">(</span><span class="s">&quot;\n     but: &quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">matcher</span><span class="o">.</span><span class="na">describeMismatch</span><span class="o">(</span><span class="n">actual</span><span class="o">,</span> <span class="n">description</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">AssertionError</span><span class="o">(</span><span class="n">description</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看出真正地判断方法是通过 <code>Matcher</code> 类的 <code>matches</code> 方法，若是不满足的话，则返回 <code>AssertionError</code>。所以真正的核心就是 <code>Matcher</code>，而关于它的实现都在 <code>hamcrest-core-1.3</code> 包中，看看其实现的类结构图：</p>

<p><img src="http://upload-images.jianshu.io/upload_images/656559-3b70f4e022063e3f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="matcher" /></p>

<p>看一下其的实现，就可发现上文提到的 <code>is</code> , <code>anyof</code> 等等静态方法都是返回一个相应的 Matcher，这样通过一个简单的抽象，在这里就提供了极大的灵活性。若是感觉它提供的这些不满足的话，也可自己进行来进行重写，按自己的需求来定制实现。</p>

<h2>Rule 介绍</h2>

<p>同样地，当我们越来越多需要进行单元测试时，就需要使用 <code>Rule</code> 来帮忙了。其主要目的是针对一个测试类中的每个单元测试方法进行统一添加一些行为。代码则使用 <code>@Rule</code> 注解的形式来添加至类的属性上。</p>

<p>在 Junit 框架中，其相对应的接口是 <code>TestRule</code>，而主要的实现有：</p>

<ul>
<li>ErrorCollector: 将大量的错误收集起来</li>
<li>ExpectedException: 对抛出的错误做断言</li>
<li>ExternalResource: 可对测试方法的开始和结束添加回调</li>
<li>TemporaryFolder: 用来创建文件，并在测试结束时自动删除</li>
<li>TestName: 用来获取测试所执行的方法名称</li>
<li>TestWatcher: 可在测试方法的执行期间添加逻辑</li>
<li>Timeout: 超过固定的时间让测试结束</li>
<li>Verifier: 当状态不正确时，可让测试结束</li>
</ul>


<p>它们的更多使用方法，可参照官网的 <a href="https://github.com/junit-team/junit4/wiki/rules">Rules 介绍</a>。</p>

<h2>实现原理分析</h2>

<p>Junit4 中的测试代码可被执行，是因为其真正的入口是名为 <code>JUnitCore</code>。它作为 Junit 的 <code>Facade</code> (门面)模式，来对外进行交互。另外，其有一个静态的 <code>main</code> 方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Result</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">JUnitCore</span><span class="o">().</span><span class="na">runMain</span><span class="o">(</span><span class="k">new</span> <span class="nf">RealSystem</span><span class="o">(),</span> <span class="n">args</span><span class="o">);</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">wasSuccessful</span><span class="o">()</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以，当我们执行单元测试的时候，其实也就是运行了一个新的进程应用程序，其入口就在这里。我们执行分析的时候，也从这里开始：</p>

<p>其会调到一个 <code>run(Runner runner)</code> 的方法，而 Runner 是一个抽象类，其实现针对不同的平台又有好多个。这里主要提及两个，一个是 Junit4ClassRunner，它是 4.4 版本及之前的采用的，之后被废弃掉了，而采用了继承实现抽象类 <code>ParentRunner</code> 的 <code>BlockJUnit4ClassRunner</code> 类，它在 4.5 之后被采用。这里主要查看后者，先看 <code>ParentRunner</code> 对其接口 <code>Runner</code> 中方法 <code>run</code> 的实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="kd">final</span> <span class="n">RunNotifier</span> <span class="n">notifier</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">EachTestNotifier</span> <span class="n">testNotifier</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">EachTestNotifier</span><span class="o">(</span><span class="n">notifier</span><span class="o">,</span>
</span><span class='line'>          <span class="n">getDescription</span><span class="o">());</span>
</span><span class='line'>  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Statement</span> <span class="n">statement</span> <span class="o">=</span> <span class="n">classBlock</span><span class="o">(</span><span class="n">notifier</span><span class="o">);</span>
</span><span class='line'>      <span class="n">statement</span><span class="o">.</span><span class="na">evaluate</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">AssumptionViolatedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">testNotifier</span><span class="o">.</span><span class="na">addFailedAssumption</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">StoppedByUserException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="n">e</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">testNotifier</span><span class="o">.</span><span class="na">addFailure</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中，主要通过 classBlock 方法生成的 Statement 的 <code>evaluate</code>来进行调用，先看它是怎么生成的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">protected</span> <span class="n">Statement</span> <span class="nf">classBlock</span><span class="o">(</span><span class="kd">final</span> <span class="n">RunNotifier</span> <span class="n">notifier</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Statement</span> <span class="n">statement</span> <span class="o">=</span> <span class="n">childrenInvoker</span><span class="o">(</span><span class="n">notifier</span><span class="o">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(!</span><span class="n">areAllChildrenIgnored</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">statement</span> <span class="o">=</span> <span class="n">withBeforeClasses</span><span class="o">(</span><span class="n">statement</span><span class="o">);</span>
</span><span class='line'>      <span class="n">statement</span> <span class="o">=</span> <span class="n">withAfterClasses</span><span class="o">(</span><span class="n">statement</span><span class="o">);</span>
</span><span class='line'>      <span class="n">statement</span> <span class="o">=</span> <span class="n">withClassRules</span><span class="o">(</span><span class="n">statement</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">statement</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里主要的方法 <code>childrenInvoker</code> 会调用一个抽象的方法 <code>protected abstract void runChild(T child, RunNotifier notifier);</code>，它则是由子类来实现。另外看到的是，当测试类中的测试方法都没有被忽略的时候，则会使用 <code>with</code>对应的三个方法来添加其获取注解 <code>BeforeClass</code>，<code>AfterClass</code>，<code>ClassRule</code>对应的信息，并添加至其调用的 <code>statement</code>中。</p>

<p>接下来查看 <code>BlockJUnit4ClassRunner</code> 的 <code>runChild</code>的实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">runChild</span><span class="o">(</span><span class="kd">final</span> <span class="n">FrameworkMethod</span> <span class="n">method</span><span class="o">,</span> <span class="n">RunNotifier</span> <span class="n">notifier</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Description</span> <span class="n">description</span> <span class="o">=</span> <span class="n">describeChild</span><span class="o">(</span><span class="n">method</span><span class="o">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">isIgnored</span><span class="o">(</span><span class="n">method</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">notifier</span><span class="o">.</span><span class="na">fireTestIgnored</span><span class="o">(</span><span class="n">description</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">runLeaf</span><span class="o">(</span><span class="n">methodBlock</span><span class="o">(</span><span class="n">method</span><span class="o">),</span> <span class="n">description</span><span class="o">,</span> <span class="n">notifier</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中，若是添加了 <code>@ignore</code>的注解，则不会得到调用。看看 <code>methodBlock</code>方法都干了什么：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">protected</span> <span class="n">Statement</span> <span class="nf">methodBlock</span><span class="o">(</span><span class="n">FrameworkMethod</span> <span class="n">method</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Object</span> <span class="n">test</span><span class="o">;</span>
</span><span class='line'>  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">test</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ReflectiveCallable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">protected</span> <span class="n">Object</span> <span class="nf">runReflectiveCall</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="nf">createTest</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}.</span><span class="na">run</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="nf">Fail</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Statement</span> <span class="n">statement</span> <span class="o">=</span> <span class="n">methodInvoker</span><span class="o">(</span><span class="n">method</span><span class="o">,</span> <span class="n">test</span><span class="o">);</span>
</span><span class='line'>  <span class="n">statement</span> <span class="o">=</span> <span class="n">possiblyExpectingExceptions</span><span class="o">(</span><span class="n">method</span><span class="o">,</span> <span class="n">test</span><span class="o">,</span> <span class="n">statement</span><span class="o">);</span>
</span><span class='line'>  <span class="n">statement</span> <span class="o">=</span> <span class="n">withPotentialTimeout</span><span class="o">(</span><span class="n">method</span><span class="o">,</span> <span class="n">test</span><span class="o">,</span> <span class="n">statement</span><span class="o">);</span>
</span><span class='line'>  <span class="n">statement</span> <span class="o">=</span> <span class="n">withBefores</span><span class="o">(</span><span class="n">method</span><span class="o">,</span> <span class="n">test</span><span class="o">,</span> <span class="n">statement</span><span class="o">);</span>
</span><span class='line'>  <span class="n">statement</span> <span class="o">=</span> <span class="n">withAfters</span><span class="o">(</span><span class="n">method</span><span class="o">,</span> <span class="n">test</span><span class="o">,</span> <span class="n">statement</span><span class="o">);</span>
</span><span class='line'>  <span class="n">statement</span> <span class="o">=</span> <span class="n">withRules</span><span class="o">(</span><span class="n">method</span><span class="o">,</span> <span class="n">test</span><span class="o">,</span> <span class="n">statement</span><span class="o">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">statement</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这个 <code>statement</code> 的获取中，通过使用组合的方式，会这个 <code>statement</code> 添加 <code>Before</code>，<code>After</code> 及其它 <code>Rule</code> 的链式调用，最后生成一个 statement 来返回。</p>

<h2>总结</h2>

<p>可以看出 Junit 是一个简单而又强大的库，不然不会经久不衰。其简单的实现但又强大的功能已经基本满足我们绝大多数的需求。但在这里还有一个疑问就是不知道 Junit 是如何继承到 Android Studio 的 IDE 中，并是如何直接调用我们的测试方法或者测试类的？有兴趣的小伙伴可加 qq 群 289926871 一起讨论哈。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://developer.android.com/training/testing/unit-testing/local-unit-tests.html">Building Local Unit Tests</a></li>
<li><a href="https://github.com/junit-team/junit4/wiki">junit4</a></li>
<li><a href="https://github.com/junit-team/junit4/wiki/rules">Rules</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HashMap 实现细节点整理]]></title>
    <link href="http://alighters.github.io/blog/blog/2016/08/26/hashmap-knowledge-elements/"/>
    <updated>2016-08-26T20:19:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2016/08/26/hashmap-knowledge-elements</id>
    <content type="html"><![CDATA[<p>提及 HashMap，大家都耳熟能详了，本文不会再讲它的实现原理，只对其中的一些小的实现细节进行罗列。</p>

<p><img src="http://alighters.github.io/imgs/hashmap.png" alt="hashmap" /></p>

<!-- more -->


<p>首先先要明白的两点：</p>

<ul>
<li><p>图中的 table 是一个大小为 2<sup>n</sup>的一维数组，其中存放的是一个个的 HashMapEntry，而 HashMapEntry 是包含了 hash、key 与 value 值及一个指向 HashMapEntry 的 next 指针。</p></li>
<li><p>HashMapEntry 在 object 数组中的获取及存放是根据 HashMapEntry 结构的中的 hash 与当前的 table 数组大小一减去已进行与操作的结果来作为相应的索引值（ index = (table.length -1 ) &amp; hash）。若在存放的过程中，index 值相同，则会链接当前 entry 的 next 指针上。</p></li>
</ul>


<h2>只允许放置一个 key 为 null 的元素</h2>

<p>知道 HashMap 中允许存放 key 为 null 的元素，纠其原理是因为其中有一个 <code>entryForNullKey</code> 的属性，专门来存放 null 相应的 value 值，再进行 <code>put</code> 和 <code>remove</code>方法的时候，都会对 key 进行判断，若为 null，则会只进行 <code>entryForNullKey</code>相应的更新操作。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * The entry representing the null key, or null if there&#39;s no such mapping.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">transient</span> <span class="n">HashMapEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">entryForNullKey</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>容量获取算法 roundUpToPowerOfTwo</h2>

<p>我们在初始化 HashMap 的时候，可以通过 <code>new HashMap(int capacity)</code>来构造新的 HashMap，而这个参数的值是可以任意填写的，没做任何规范及限制的。（PS：最好根据要存放元素的数量来填写）
但是在 HashMap 的实现当中，而是以大于等于 <code>capacity</code> 并且是 2 的幂数的整数来作为一个新的容量值。修正的算法是通过调用 <code>Collections</code> 类中的 <code>roundUpToPowerOfTwo</code> 方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">* Returns the smallest power of two &gt;= its argument, with several caveats:</span>
</span><span class='line'><span class="cm">* If the argument is negative but not Integer.MIN_VALUE, the method returns</span>
</span><span class='line'><span class="cm">* zero. If the argument is &gt; 2^30 or equal to Integer.MIN_VALUE, the method</span>
</span><span class='line'><span class="cm">* returns Integer.MIN_VALUE. If the argument is zero, the method returns</span>
</span><span class='line'><span class="cm">* zero.</span>
</span><span class='line'><span class="cm">* @hide</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">roundUpToPowerOfTwo</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">i</span><span class="o">--;</span> <span class="c1">// If input is a power of two, shift its high-order bit right.</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// &quot;Smear&quot; the high-order bit all the way to the right.</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">|=</span> <span class="n">i</span> <span class="o">&gt;&gt;&gt;</span>  <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">|=</span> <span class="n">i</span> <span class="o">&gt;&gt;&gt;</span>  <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">|=</span> <span class="n">i</span> <span class="o">&gt;&gt;&gt;</span>  <span class="mi">4</span><span class="o">;</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">|=</span> <span class="n">i</span> <span class="o">&gt;&gt;&gt;</span>  <span class="mi">8</span><span class="o">;</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">|=</span> <span class="n">i</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">16</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到这个算法进行了 5 次移位操作，乍一看，一脸懵逼，这是在干嘛？</p>

<p>细细一想啊，我现在要获取一个是 2 的幂数的整数，那其二进制的表现形式就是其最高位为1 ，低位全部为 0；或者其低位全部为 1，只需再对其加 1，即可变成 2 的倍数。</p>

<p>举个栗子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">1000</span> <span class="mi">0000</span>
</span><span class='line'><span class="mi">0100</span> <span class="mi">0000</span>  <span class="c1">// 无符号右移一位</span>
</span><span class='line'><span class="mi">1100</span> <span class="mi">0000</span>  <span class="c1">// 上面两个执行或操作的结果</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1100</span> <span class="mi">0000</span>
</span><span class='line'><span class="mi">0011</span> <span class="mi">0000</span> <span class="c1">// 无符号右移二位</span>
</span><span class='line'><span class="mi">1111</span> <span class="mi">0000</span> <span class="c1">// 上面两个执行或操作的结果</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1111</span> <span class="mi">0000</span>
</span><span class='line'><span class="mi">0000</span> <span class="mi">1111</span> <span class="c1">// 无符号右移三位</span>
</span><span class='line'><span class="mi">1111</span> <span class="mi">1111</span> <span class="c1">// 上面两个执行或操作的结果</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实我们只需将我们的关注点放置其元素为1的最高位上，执行右移操作，紧接着是或操作，最后的结果就是将高位的1，向后涂抹 （smear），全部变为1。</p>

<p>移位5次的原因在于 Java 中的整数是32位的，正好是2的 5次方。</p>

<p>算法刚开始的减一操作，则是为了防止刚开始传入的数字便是 2 的幂数。用来保证最终的结果是大于等于传入的参数的值。</p>

<h2>扩容的临界值</h2>

<p>HashMap 能够放置元素的最小容量为 4，最大容量为 1 &lt;&lt; 30，并且每次扩容之后的容量大小都是 2 的幂数。
什么会扩容呢？在每次调用 HashMap 的 put 方法时，在进行 <code>size++</code> 时，会与 <code>threshold</code> 进行比较，当超过 <code>threshold</code>时，就会自动扩容。而这个 <code>threshold</code> 的取值为容量的 &frac34; ，其值的更新之时，是在一维数组 table 根据乘以2的容量，申请空间之时，即 <code>makeTable</code> 方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">* Allocate a table of the given capacity and set the threshold accordingly.</span>
</span><span class='line'><span class="cm">* @param newCapacity must be a power of two</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="kd">private</span> <span class="n">HashMapEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;[]</span> <span class="nf">makeTable</span><span class="o">(</span><span class="kt">int</span> <span class="n">newCapacity</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">&quot;unchecked&quot;</span><span class="o">)</span> <span class="n">HashMapEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;[]</span> <span class="n">newTable</span>
</span><span class='line'>          <span class="o">=</span> <span class="o">(</span><span class="n">HashMapEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;[])</span> <span class="k">new</span> <span class="n">HashMapEntry</span><span class="o">[</span><span class="n">newCapacity</span><span class="o">];</span>
</span><span class='line'>  <span class="n">table</span> <span class="o">=</span> <span class="n">newTable</span><span class="o">;</span>
</span><span class='line'>  <span class="n">threshold</span> <span class="o">=</span> <span class="o">(</span><span class="n">newCapacity</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="o">(</span><span class="n">newCapacity</span> <span class="o">&gt;&gt;</span> <span class="mi">2</span><span class="o">);</span> <span class="c1">// 3/4 capacity</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">newTable</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里主要研究一下这个获取容量为 &frac34; 的算法，将 <code>newCapacity</code> 右移1位，即获取的是 1/2；右移2位，即获取 1/4；另外再加上 <code>newCapacity</code> 为2的倍数，所以这里的 &frac34; 毫无破绽。</p>

<h2>扩容 * 2实现中的元素转移</h2>

<p>假如我当前 HashMap 中的容量（capacity）为8，在执行元素的获取及存放是，都是先拿元素的 hash 值，跟 capacity - 1 即 7，对应的二进制为 111，执行与操作，获取的结果即为对应所存放数组中的索引。</p>

<p>而当 HashMap 在进行扩容 * 2 之后，元素的获取也要满足上面的方法，那在扩容的时候，就要先前数组到新数组的赋值，那它这个重新索引的算法是怎么进行的呢？</p>

<p>在执行 <code>doubleCapacity</code>方法时候，会进行这个操作：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">oldCapacity</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>   <span class="c1">// 获取不为空的元素</span>
</span><span class='line'>   <span class="n">HashMapEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">oldTable</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(</span><span class="n">e</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="kt">int</span> <span class="n">highBit</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">hash</span> <span class="o">&amp;</span> <span class="n">oldCapacity</span><span class="o">;</span>
</span><span class='line'>   <span class="n">newTable</span><span class="o">[</span><span class="n">j</span> <span class="o">|</span> <span class="n">highBit</span><span class="o">]</span> <span class="o">=</span> <span class="n">e</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**省略 **/</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>因 <code>oldCapacity</code> 为2的幂数，获取到的 <code>highBit</code> 也是 2 的幂数。若是 e.hash 对应在 oldCapacity 的高位也是相同的 1，则 <code>newTable</code>的索引 <code>j | highBit</code>则是相当于 j 加上了 2 的幂数，即 <code>j | highBit</code> 相对于 newCapacity 来说，从前半段移动到后半段；若是 e.hash 对应在 oldCapacity 的高位不为1，则获取到 <code>highBit</code> 为零，则相应旧数组迁移至新数组的索引位置还是维持原样。</p>

<p>简化上面的公式：</p>

<blockquote><p>公式一： oldIndex = ( 2<sup>n</sup> -1) | hash                <br/>
公式二:   hash &amp; 2<sup>n</sup> | oldIndex = newIndex</p></blockquote>

<p>可知新的 <code>newIndex</code> 同时也满足：</p>

<blockquote><p>公式三： newIndex  = (2<sup>n+1</sup>  - 1) | hash</p></blockquote>

<p>若是我们将公式一和公式三都代入公式二中，消除 oldIndex 和 newIndex 可得到：</p>

<blockquote><p>公式四： hash &amp; (2<sup>n</sup> -1) | (hash &amp; 2<sup>n</sup>) = hash &amp; ( 2<sup>n+1</sup> - 1)</p></blockquote>

<p>这里发现这个公式，很是符合结合律，即：</p>

<blockquote><p>( a &amp; x ) | ( a &amp; y ) = a &amp; ( x | y )</p></blockquote>

<p>不要问我怎么证明这个公式是对的。（我是问了个妹子，妹子直接告诉不要纠结公式，直接读字面量，即与或操作，就可发现这个公式是正确的。）</p>

<p>这样的话，将上面的公式执行结合律的话，可得公式四的左边：</p>

<blockquote><p>hash &amp; ((2<sup>n</sup> -1) | 2<sup>n</sup> ) = hash &amp; ( 2<sup>n+1</sup> - 1)</p></blockquote>

<p>确定是跟公式四的右半部分相等。至此，可证明这个扩容移位的操作是毫无破绽的，不过一时半会理解起来还是颇为费劲的，也不得不感叹作者的强大。</p>

<h2>Hash 值的生成</h2>

<p>在进行元素的存放及获取时，都会获取元素的 hash 值，（即是 key 的 hash值），而一个好的 HashMap，应该是元素均匀地放置在数组中，而不应该大量地出现簇拥现象，（即对应的 HashMapEntry 的 next 指针不为空）。所以仅仅依靠原始的 key 的 hash 值，则是不靠谱的。所以 HashMap 的算法都会进行二次 hash，但我发现 java 中的版本 跟 android 版本实现完全不一致：</p>

<ul>
<li>Android的实现（以 Android API 23 为例）
这里真正的实现是在 <code>Collections</code> 类中：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">secondaryHash</span><span class="o">(</span><span class="kt">int</span> <span class="n">h</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// Spread bits to regularize both segment and index locations,</span>
</span><span class='line'>  <span class="c1">// using variant of single-word Wang/Jenkins hash.</span>
</span><span class='line'>  <span class="n">h</span> <span class="o">+=</span> <span class="o">(</span><span class="n">h</span> <span class="o">&lt;&lt;</span>  <span class="mi">15</span><span class="o">)</span> <span class="o">^</span> <span class="mh">0xffffcd7d</span><span class="o">;</span>
</span><span class='line'>  <span class="n">h</span> <span class="o">^=</span> <span class="o">(</span><span class="n">h</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">10</span><span class="o">);</span>
</span><span class='line'>  <span class="n">h</span> <span class="o">+=</span> <span class="o">(</span><span class="n">h</span> <span class="o">&lt;&lt;</span>   <span class="mi">3</span><span class="o">);</span>
</span><span class='line'>  <span class="n">h</span> <span class="o">^=</span> <span class="o">(</span><span class="n">h</span> <span class="o">&gt;&gt;&gt;</span>  <span class="mi">6</span><span class="o">);</span>
</span><span class='line'>  <span class="n">h</span> <span class="o">+=</span> <span class="o">(</span><span class="n">h</span> <span class="o">&lt;&lt;</span>   <span class="mi">2</span><span class="o">)</span> <span class="o">+</span> <span class="o">(</span><span class="n">h</span> <span class="o">&lt;&lt;</span> <span class="mi">14</span><span class="o">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">h</span> <span class="o">^</span> <span class="o">(</span><span class="n">h</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">16</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个算法看的是一脸懵逼，若是有哪位大神看懂了，希望能够指点一下小弟。这里可去参看注释中提到的 Wang/Jenkins hash，这里是借鉴这位大神的实现。算法最终达到的效果就是一个网友提到的“崩坏性”，即微小的改动，也会触发结果的大变样。</p>

<ul>
<li>Java的实现 （以 JDK 1.8 为例）</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="nf">hash</span><span class="o">(</span><span class="n">Object</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">h</span><span class="o">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">(</span><span class="n">key</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="o">(</span><span class="n">h</span> <span class="o">=</span> <span class="n">key</span><span class="o">.</span><span class="na">hashCode</span><span class="o">())</span> <span class="o">^</span> <span class="o">(</span><span class="n">h</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">16</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>明显地看出它这里处理就相当简单了，只将高位进行后移16位，然后进行异或就结束了。不过官方文档给出的说法是，因为其 table 大小是 2<sup>n</sup> ，其实发生碰撞的概率很小，另外在 1.8 中碰撞的链表已经修改为了树结构，所以这里是针对速度、实用及位扩展操作复杂度的一个权衡。</p>

<h2>线程同步</h2>

<p>另外需要谨记的是，HashMap 不是线程安全的，若出现多线程访问的问题，需要实用 <code>Collections.synchronizedMap(Map&lt;K, V&gt; map)</code> 方法来对 map 再进行一次包装。不过其返回的数据结构  <code>SynchronizedMap</code> 也是很简单的，采用组合的方式持有 map，然后针对 map 的每个操作，都加上了同步块。</p>

<p>至此，HashMap 应该了然于胸了，若是小伙伴还有什么疑问的话，欢迎一起交流。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RxJava+Retrofit实现全局过期token自动刷新Demo篇]]></title>
    <link href="http://alighters.github.io/blog/blog/2016/08/22/rxjava-plus-retrofitshi-xian-zhi-demo/"/>
    <updated>2016-08-22T10:03:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2016/08/22/rxjava-plus-retrofitshi-xian-zhi-demo</id>
    <content type="html"><![CDATA[<p>在上篇文章<a href="http://alighters.com/blog/2016/05/02/rxjava-plus-retrofitshi-xian-wang-luo-dai-li/">Rxjava+Retrofit 实现全局过期 Token 自动刷新</a>中，主讲了实现的思想，发布之后，有些小伙伴抱怨没有完整的 Demo，所以在这里重新补上了一个姗姗来迟的简单的实例。<a href="https://github.com/alighters/AndroidDemos/commit/a7266bef2c0fee2b60f5ef2c3ecd06456d624eef">Android代码点我</a></p>

<!-- more -->


<h2>适用情况</h2>

<p>一个应用的大部分请求都需要一个带有 token 的参数，来表示当前的用户信息；另外 token 是带有有效时间的，当 token 过期时，需要执行刷新 token 的操作。这个解决方案就是针对这种情况而产生的，当一个请求收到 token 过期的错误信息，我们会在底层执行刷新 token 的操作（这个操作是透明操作，对用户不可见），当 token 刷新成功之后，则重新执行之前发出的请求。</p>

<p>另外，不适用的就是 token 是放在 http 请求的 header 中的请求，这种情况的需要通过使用 okhttp 的拦截器来实现，可自行查阅其他的文章。</p>

<h2>Demo 实现</h2>

<h3>1.实现思想</h3>

<p>利用 Observale 的 retryWhen 的方法，识别 token 过期失效的错误信息，此时发出刷新 token 请求的代码块，完成之后更新 token，这时之前的请求会重新执行，但将它的 token 更新为最新的。另外通过代理类对所有的请求都进行处理，完成之后，我们只需关注单个 API 的实现，而不用每个都考虑 token 过期，大大地实现解耦操作。</p>

<h3>2.API实现</h3>

<p>为了保证 Demo 的完整性，API 这个环节是必不可少的，这里允许我偷个小懒，没有采用远程的 API 服务来实现。而是使用 NodeJs 在本地写了个简单的服务，所以小小地辛苦读者多动一下手指头，先启动咱们的 API 服务。<a href="https://github.com/alighters/AndroidDemos/blob/master/server/refresh_token.js">NodeJs代码点我</a></p>

<ul>
<li><p>启动服务
完成的服务器代码在项目的根目录下的 server 文件中，里面包含一个名 refresh_token 的 js 文件。我们切到 server 目录下，在命令行下执行 <code>node refresh_token.js</code>，就可以启动一个监听端口号为 8888 的服务。
另外，如果在电脑上访问的话，执行 <a href="http://127.0.0.1:8888">http://127.0.0.1:8888</a> 即可访问；如果通过模拟器访问的话，需要拿到电脑的本地 IP，这里我获取到的是 192.168.56.1。</p></li>
<li><p>API 介绍
这里为了模仿真实的 token 原理，我采用时间戳来作为 token 的一种实现。客户端向服务器请求 token, 服务器返回当前的时间戳来作为 token；之后用户每次的请求则需要携带这个 token 作为参数，服务器拿到客户端发送过来的 token，来与当前的时间进行比较，这里我使用的时间间隔为30秒，若小于30秒，服务器认为 token 合法，返回正确结果；若大于30秒，则认为 token 失效。</p></li>
<li><p>实现
这里我设计了三个 API，获取 token 的 <code>get_token</code> 及刷新 token 的 <code>refresh_token</code>，简单起见，它俩不需要参数，并且返回的结果相同；另外一个正常请求的 API 是 <code>request</code>，它需要传递一个名称为 token 的参数。代码很简单，如下：</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;url&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">querystring</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;querystring&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// 发送 HTTP 头部 </span>
</span><span class='line'>   <span class="c1">// HTTP 状态值: 200 : OK</span>
</span><span class='line'>   <span class="c1">// 内容类型: text/plain</span>
</span><span class='line'>   <span class="nx">response</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span> <span class="s1">&#39;text/plain&#39;</span><span class="p">});</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">var</span> <span class="nx">pathname</span> <span class="o">=</span> <span class="nx">url</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">).</span><span class="nx">pathname</span><span class="p">;</span>
</span><span class='line'>   <span class="k">if</span> <span class="p">(</span><span class="nx">pathname</span> <span class="o">==</span> <span class="s2">&quot;/get_token&quot;</span> <span class="o">||</span> <span class="nx">pathname</span> <span class="o">==</span> <span class="s2">&quot;/refresh_token&quot;</span><span class="p">){</span>
</span><span class='line'>      <span class="c1">// get a new token or refresh the token</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>         <span class="s2">&quot;success&quot;</span> <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>         <span class="s2">&quot;data&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;token&quot;</span> <span class="o">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getTime</span><span class="p">().</span><span class="nx">toString</span><span class="p">()</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">result</span><span class="p">));</span>
</span><span class='line'>   <span class="p">}</span><span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">pathname</span> <span class="o">==</span> <span class="s2">&quot;/request&quot;</span><span class="p">){</span>
</span><span class='line'>      <span class="c1">// Normal request</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">token_str</span> <span class="o">=</span> <span class="nx">querystring</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">url</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">).</span><span class="nx">query</span><span class="p">)[</span><span class="s1">&#39;token&#39;</span><span class="p">];</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">token_str</span><span class="p">){</span>
</span><span class='line'>         <span class="kd">var</span> <span class="nx">token_time</span> <span class="o">=</span> <span class="nb">parseFloat</span><span class="p">(</span><span class="nx">token_str</span><span class="p">);</span>
</span><span class='line'>         <span class="kd">var</span> <span class="nx">cur_time</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getTime</span><span class="p">();</span>
</span><span class='line'>         <span class="k">if</span><span class="p">(</span><span class="nx">cur_time</span> <span class="o">-</span> <span class="nx">token_time</span> <span class="o">&lt;</span> <span class="mi">30</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">){</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>               <span class="s2">&quot;success&quot;</span> <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>               <span class="s2">&quot;data&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                  <span class="s2">&quot;result&quot;</span> <span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>               <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">result</span><span class="p">));</span>
</span><span class='line'>         <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>            <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span><span class="s2">&quot;success&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span> <span class="s2">&quot;error_code&quot;</span> <span class="o">:</span> <span class="mi">1001</span><span class="p">}));</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>         <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span><span class="s2">&quot;success&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span> <span class="s2">&quot;error_code&quot;</span> <span class="o">:</span> <span class="mi">1000</span><span class="p">}));</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}).</span><span class="nx">listen</span><span class="p">(</span><span class="mi">8888</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码很简单，需要提及的是当 token 超过限定的30秒，返回的 error_code 是 1001；而 token 不存在则返回的 error_code 是 1000，这时我们可能需要做的操作就是重新登录的操作等等。</p>

<h3>3.错误抛出</h3>

<p>当服务器错误信息的时候，同样也是一个 model，不同的是 success 为 false，并且含有 error_code的信息。所以我们需要针对 model 处理的时候，做以判断。主要修改的地方就是 retrofit 的 <code>GsonConvertFactory</code>，这里不再通过 gradle 引入，直接把其源码中的三个文件添加到咱们的项目中。</p>

<p>首先提及的一下是对统一 model 的封装，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ApiModel</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="n">success</span><span class="o">;</span>
</span><span class='line'>    <span class="nd">@SerializedName</span><span class="o">(</span><span class="s">&quot;error_code&quot;</span><span class="o">)</span> <span class="kd">public</span> <span class="kt">int</span> <span class="n">errorCode</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">T</span> <span class="n">data</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当正确返回的时候，我们获取到 data，直接给上层；当出错的时候，可以针对 errorCode的信息，做一些处理，让其走最上层调用的 onError 方法。</p>

<p>好了，说说我们这里要修改的地方：</p>

<ul>
<li>1.修改 <code>GsonConverterFactory</code> 中，生成 <code>GsonResponseBodyConverter</code> 的方法：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">Converter</span><span class="o">&lt;</span><span class="n">ResponseBody</span><span class="o">,</span> <span class="o">?&gt;</span> <span class="n">responseBodyConverter</span><span class="o">(</span><span class="kd">final</span> <span class="n">Type</span> <span class="n">type</span><span class="o">,</span> <span class="n">Annotation</span><span class="o">[]</span> <span class="n">annotations</span><span class="o">,</span> <span class="n">Retrofit</span> <span class="n">retrofit</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Type</span> <span class="n">newType</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ParameterizedType</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="n">Type</span><span class="o">[]</span> <span class="nf">getActualTypeArguments</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="k">new</span> <span class="n">Type</span><span class="o">[]</span> <span class="o">{</span> <span class="n">type</span> <span class="o">};</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="n">Type</span> <span class="nf">getOwnerType</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="n">Type</span> <span class="nf">getRawType</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">ApiModel</span><span class="o">.</span><span class="na">class</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">};</span>
</span><span class='line'>  <span class="n">TypeAdapter</span><span class="o">&lt;?&gt;</span> <span class="n">adapter</span> <span class="o">=</span> <span class="n">gson</span><span class="o">.</span><span class="na">getAdapter</span><span class="o">(</span><span class="n">TypeToken</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">newType</span><span class="o">));</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="n">GsonResponseBodyConverter</span><span class="o">&lt;&gt;(</span><span class="n">adapter</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看出我们这里对 type 类型，做以包装，让其重新生成一个类型为 ApiModel 的新类型。因为我们在写接口代码的时候，都以真正的类型 type 来作为返回值的，而不是 ApiModel。</p>

<ul>
<li>2.GsonResponseBodyConverter的处理
它的修改，则是要针对返回结果，做以异常的判断并抛出，主要看其的 <code>convert</code>方法：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">Object</span> <span class="nf">convert</span><span class="o">(</span><span class="n">ResponseBody</span> <span class="n">value</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">ApiModel</span> <span class="n">apiModel</span> <span class="o">=</span> <span class="o">(</span><span class="n">ApiModel</span><span class="o">)</span> <span class="n">adapter</span><span class="o">.</span><span class="na">fromJson</span><span class="o">(</span><span class="n">value</span><span class="o">.</span><span class="na">charStream</span><span class="o">());</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">apiModel</span><span class="o">.</span><span class="na">errorCode</span> <span class="o">==</span> <span class="n">ErrorCode</span><span class="o">.</span><span class="na">TOKEN_NOT_EXIST</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">throw</span> <span class="k">new</span> <span class="nf">TokenNotExistException</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">apiModel</span><span class="o">.</span><span class="na">errorCode</span> <span class="o">==</span> <span class="n">ErrorCode</span><span class="o">.</span><span class="na">TOKEN_INVALID</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">throw</span> <span class="k">new</span> <span class="nf">TokenInvalidException</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(!</span><span class="n">apiModel</span><span class="o">.</span><span class="na">success</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// TODO: 16/8/21 handle the other error.</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">apiModel</span><span class="o">.</span><span class="na">success</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">apiModel</span><span class="o">.</span><span class="na">data</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">value</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4.添加代理</h3>

<p>在使用 Retrofit 的时候，我们都需要针对每个 API 编写相应的接口代码，最后通过 Retrofit 的 <code>create</code> 方法来实现调用，而这个方法就是通过使用代理，根据这个接口方法的各种注解参数，最后一个个单独的完整的 API 调用。</p>

<p>因为我们也需要对每个 API 做处理，所以我们也对它的 <code>create</code> 方法做一个代理的实现，主要使用的代码是 <code>Proxy</code>类的 <code>newProxyInstance</code>方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="nf">getProxy</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">tClass</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">T</span> <span class="n">t</span> <span class="o">=</span> <span class="n">getRetrofit</span><span class="o">().</span><span class="na">create</span><span class="o">(</span><span class="n">tClass</span><span class="o">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">(</span><span class="n">T</span><span class="o">)</span> <span class="n">Proxy</span><span class="o">.</span><span class="na">newProxyInstance</span><span class="o">(</span><span class="n">tClass</span><span class="o">.</span><span class="na">getClassLoader</span><span class="o">(),</span> <span class="k">new</span> <span class="n">Class</span><span class="o">&lt;?&gt;[]</span> <span class="o">{</span> <span class="n">tClass</span> <span class="o">},</span> <span class="k">new</span> <span class="nf">ProxyHandler</span><span class="o">(</span><span class="n">t</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>核心的代理实现则是这个 <code>ProxyHandler</code>，它是对接口 <code>InvocationHandler</code> 的一个实现类。思想就是针对 method 的调用，做以 retryWhen 的包装，在retryWhen 中获取相应的异常信息来做处理，看 retryWhen 的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">retryWhen</span><span class="o">(</span><span class="k">new</span> <span class="n">Func1</span><span class="o">&lt;</span><span class="n">Observable</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">Throwable</span><span class="o">&gt;,</span> <span class="n">Observable</span><span class="o">&lt;?&gt;&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="n">Observable</span><span class="o">&lt;?&gt;</span> <span class="n">call</span><span class="o">(</span><span class="n">Observable</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">Throwable</span><span class="o">&gt;</span> <span class="n">observable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">observable</span><span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="k">new</span> <span class="n">Func1</span><span class="o">&lt;</span><span class="n">Throwable</span><span class="o">,</span> <span class="n">Observable</span><span class="o">&lt;?&gt;&gt;()</span> <span class="o">{</span>
</span><span class='line'>                    <span class="nd">@Override</span>
</span><span class='line'>                    <span class="kd">public</span> <span class="n">Observable</span><span class="o">&lt;?&gt;</span> <span class="n">call</span><span class="o">(</span><span class="n">Throwable</span> <span class="n">throwable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="k">if</span> <span class="o">(</span><span class="n">throwable</span> <span class="k">instanceof</span> <span class="n">TokenInvalidException</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                            <span class="k">return</span> <span class="nf">refreshTokenWhenTokenInvalid</span><span class="o">();</span>
</span><span class='line'>                        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">throwable</span> <span class="k">instanceof</span> <span class="n">TokenNotExistException</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                            <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="n">BaseApplication</span><span class="o">.</span><span class="na">getContext</span><span class="o">(),</span> <span class="s">&quot;Token is not existed!!&quot;</span><span class="o">,</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_SHORT</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>                            <span class="k">return</span> <span class="n">Observable</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="n">throwable</span><span class="o">);</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>                        <span class="k">return</span> <span class="n">Observable</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="n">throwable</span><span class="o">);</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">});</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里针对 token 过期的 TokenInvalidException 的异常，执行刷新 token 的操作，刷新 token 的操作则是直接调用 Retrofit 的方法，而不需要走代理了。另外它必须是个同步的代码块，主要的代码就不在这里贴了，具体的代码见 <a href="https://github.com/alighters/AndroidDemos/blob/master/app/src/main/java/com/lighters/demos/token/http/proxy/ProxyHandler.java">这里</a>。</p>

<h3>5.代码验证</h3>

<p>最上层的代码调用中，添加了两个按钮:
+ 按钮1：获取token</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@OnClick</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">btn_token_get</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onGetTokenClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">RetrofitUtil</span><span class="o">.</span><span class="na">getInstance</span><span class="o">()</span>
</span><span class='line'>      <span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">IApiService</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">getToken</span><span class="o">()</span>
</span><span class='line'>      <span class="o">.</span><span class="na">subscribeOn</span><span class="o">(</span><span class="n">Schedulers</span><span class="o">.</span><span class="na">io</span><span class="o">())</span>
</span><span class='line'>      <span class="o">.</span><span class="na">observeOn</span><span class="o">(</span><span class="n">AndroidSchedulers</span><span class="o">.</span><span class="na">mainThread</span><span class="o">())</span>
</span><span class='line'>      <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="k">new</span> <span class="n">Subscriber</span><span class="o">&lt;</span><span class="n">TokenModel</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCompleted</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onError</span><span class="o">(</span><span class="n">Throwable</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onNext</span><span class="o">(</span><span class="n">TokenModel</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">if</span> <span class="o">(</span><span class="n">model</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">TextUtils</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">model</span><span class="o">.</span><span class="na">token</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">GlobalToken</span><span class="o">.</span><span class="na">updateToken</span><span class="o">(</span><span class="n">model</span><span class="o">.</span><span class="na">token</span><span class="o">);</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>token 获取成功之后，仅仅更新一下全局的token即可。</p>

<ul>
<li>按钮2：正常的请求</li>
</ul>


<p>这里为了模拟多请求，这里我直接调正常的请求5次：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@OnClick</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">btn_request</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onRequestClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">RetrofitUtil</span><span class="o">.</span><span class="na">getInstance</span><span class="o">()</span>
</span><span class='line'>          <span class="o">.</span><span class="na">getProxy</span><span class="o">(</span><span class="n">IApiService</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="na">getResult</span><span class="o">(</span><span class="n">GlobalToken</span><span class="o">.</span><span class="na">getToken</span><span class="o">())</span>
</span><span class='line'>          <span class="o">.</span><span class="na">subscribeOn</span><span class="o">(</span><span class="n">Schedulers</span><span class="o">.</span><span class="na">io</span><span class="o">())</span>
</span><span class='line'>          <span class="o">.</span><span class="na">observeOn</span><span class="o">(</span><span class="n">AndroidSchedulers</span><span class="o">.</span><span class="na">mainThread</span><span class="o">())</span>
</span><span class='line'>          <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="k">new</span> <span class="n">Subscriber</span><span class="o">&lt;</span><span class="n">ResultModel</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>              <span class="nd">@Override</span>
</span><span class='line'>              <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCompleted</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>              <span class="nd">@Override</span>
</span><span class='line'>              <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onError</span><span class="o">(</span><span class="n">Throwable</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>              <span class="nd">@Override</span>
</span><span class='line'>              <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onNext</span><span class="o">(</span><span class="n">ResultModel</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">});</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了查看输出，另外对 Okhttp 添加了 <code>HttpLoggingInterceptor</code> 并设置 Body 的 level 输出，用来监测 http 请求的输出。</p>

<p>一切完成之后，先点击获取 token 的按钮，等待30秒之后，再点击正常请求按钮。可以看到如下的输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="o">--&gt;</span> <span class="n">GET</span> <span class="nl">http:</span><span class="c1">//192.168.56.1:8888/request?token=1471774119164 http/1.1</span>
</span><span class='line'> <span class="o">--&gt;</span> <span class="n">END</span> <span class="n">GET</span>
</span><span class='line'> <span class="o">--&gt;</span> <span class="n">GET</span> <span class="nl">http:</span><span class="c1">//192.168.56.1:8888/request?token=1471774119164 http/1.1</span>
</span><span class='line'> <span class="o">--&gt;</span> <span class="n">END</span> <span class="n">GET</span>
</span><span class='line'> <span class="o">--&gt;</span> <span class="n">GET</span> <span class="nl">http:</span><span class="c1">//192.168.56.1:8888/request?token=1471774119164 http/1.1</span>
</span><span class='line'> <span class="o">--&gt;</span> <span class="n">END</span> <span class="n">GET</span>
</span><span class='line'> <span class="o">--&gt;</span> <span class="n">GET</span> <span class="nl">http:</span><span class="c1">//192.168.56.1:8888/request?token=1471774119164 http/1.1</span>
</span><span class='line'> <span class="o">--&gt;</span> <span class="n">END</span> <span class="n">GET</span>
</span><span class='line'> <span class="o">--&gt;</span> <span class="n">GET</span> <span class="nl">http:</span><span class="c1">//192.168.56.1:8888/request?token=1471774119164 http/1.1</span>
</span><span class='line'> <span class="o">--&gt;</span> <span class="n">END</span> <span class="n">GET</span>
</span><span class='line'> <span class="o">&lt;--</span> <span class="mi">200</span> <span class="n">OK</span> <span class="nl">http:</span><span class="c1">//192.168.56.1:8888/request?token=1471774119164 (8ms)</span>
</span><span class='line'> <span class="n">Content</span><span class="o">-</span><span class="nl">Type:</span> <span class="n">text</span><span class="o">/</span><span class="n">plain</span>
</span><span class='line'> <span class="nl">Date:</span> <span class="n">Mon</span><span class="o">,</span> <span class="mi">22</span> <span class="n">Aug</span> <span class="mi">2016</span> <span class="mi">00</span><span class="o">:</span><span class="mi">38</span><span class="o">:</span><span class="mi">09</span> <span class="n">GMT</span>
</span><span class='line'> <span class="nl">Connection:</span> <span class="n">keep</span><span class="o">-</span><span class="n">alive</span>
</span><span class='line'> <span class="n">Transfer</span><span class="o">-</span><span class="nl">Encoding:</span> <span class="n">chunked</span>
</span><span class='line'> <span class="o">{</span><span class="s">&quot;success&quot;</span><span class="o">:</span><span class="kc">false</span><span class="o">,</span><span class="s">&quot;error_code&quot;</span><span class="o">:</span><span class="mi">1001</span><span class="o">}</span>
</span><span class='line'> <span class="o">&lt;--</span> <span class="n">END</span> <span class="nf">HTTP</span> <span class="o">(</span><span class="mi">35</span><span class="o">-</span><span class="kt">byte</span> <span class="n">body</span><span class="o">)</span>
</span><span class='line'> <span class="o">&lt;--</span> <span class="mi">200</span> <span class="n">OK</span> <span class="nl">http:</span><span class="c1">//192.168.56.1:8888/request?token=1471774119164 (5ms)</span>
</span><span class='line'> <span class="o">&lt;--</span> <span class="mi">200</span> <span class="n">OK</span> <span class="nl">http:</span><span class="c1">//192.168.56.1:8888/request?token=1471774119164 (4ms)</span>
</span><span class='line'> <span class="n">Content</span><span class="o">-</span><span class="nl">Type:</span> <span class="n">text</span><span class="o">/</span><span class="n">plain</span>
</span><span class='line'> <span class="nl">Date:</span> <span class="n">Mon</span><span class="o">,</span> <span class="mi">22</span> <span class="n">Aug</span> <span class="mi">2016</span> <span class="mi">00</span><span class="o">:</span><span class="mi">38</span><span class="o">:</span><span class="mi">09</span> <span class="n">GMT</span>
</span><span class='line'> <span class="nl">Connection:</span> <span class="n">keep</span><span class="o">-</span><span class="n">alive</span>
</span><span class='line'> <span class="n">Transfer</span><span class="o">-</span><span class="nl">Encoding:</span> <span class="n">chunked</span>
</span><span class='line'> <span class="o">--&gt;</span> <span class="n">GET</span> <span class="nl">http:</span><span class="c1">//192.168.56.1:8888/refresh_token http/1.1</span>
</span><span class='line'> <span class="o">--&gt;</span> <span class="n">END</span> <span class="n">GET</span>
</span><span class='line'> <span class="o">{</span><span class="s">&quot;success&quot;</span><span class="o">:</span><span class="kc">false</span><span class="o">,</span><span class="s">&quot;error_code&quot;</span><span class="o">:</span><span class="mi">1001</span><span class="o">}</span>
</span><span class='line'> <span class="o">&lt;--</span> <span class="n">END</span> <span class="nf">HTTP</span> <span class="o">(</span><span class="mi">35</span><span class="o">-</span><span class="kt">byte</span> <span class="n">body</span><span class="o">)</span>
</span><span class='line'> <span class="n">Content</span><span class="o">-</span><span class="nl">Type:</span> <span class="n">text</span><span class="o">/</span><span class="n">plain</span>
</span><span class='line'> <span class="nl">Date:</span> <span class="n">Mon</span><span class="o">,</span> <span class="mi">22</span> <span class="n">Aug</span> <span class="mi">2016</span> <span class="mi">00</span><span class="o">:</span><span class="mi">38</span><span class="o">:</span><span class="mi">09</span> <span class="n">GMT</span>
</span><span class='line'> <span class="nl">Connection:</span> <span class="n">keep</span><span class="o">-</span><span class="n">alive</span>
</span><span class='line'> <span class="n">Transfer</span><span class="o">-</span><span class="nl">Encoding:</span> <span class="n">chunked</span>
</span><span class='line'> <span class="o">&lt;--</span> <span class="mi">200</span> <span class="n">OK</span> <span class="nl">http:</span><span class="c1">//192.168.56.1:8888/request?token=1471774119164 (7ms)</span>
</span><span class='line'> <span class="n">Content</span><span class="o">-</span><span class="nl">Type:</span> <span class="n">text</span><span class="o">/</span><span class="n">plain</span>
</span><span class='line'> <span class="nl">Date:</span> <span class="n">Mon</span><span class="o">,</span> <span class="mi">22</span> <span class="n">Aug</span> <span class="mi">2016</span> <span class="mi">00</span><span class="o">:</span><span class="mi">38</span><span class="o">:</span><span class="mi">09</span> <span class="n">GMT</span>
</span><span class='line'> <span class="nl">Connection:</span> <span class="n">keep</span><span class="o">-</span><span class="n">alive</span>
</span><span class='line'> <span class="o">{</span><span class="s">&quot;success&quot;</span><span class="o">:</span><span class="kc">false</span><span class="o">,</span><span class="s">&quot;error_code&quot;</span><span class="o">:</span><span class="mi">1001</span><span class="o">}</span>
</span><span class='line'> <span class="n">Transfer</span><span class="o">-</span><span class="nl">Encoding:</span> <span class="n">chunked</span>
</span><span class='line'> <span class="o">&lt;--</span> <span class="n">END</span> <span class="nf">HTTP</span> <span class="o">(</span><span class="mi">35</span><span class="o">-</span><span class="kt">byte</span> <span class="n">body</span><span class="o">)</span>
</span><span class='line'> <span class="o">{</span><span class="s">&quot;success&quot;</span><span class="o">:</span><span class="kc">false</span><span class="o">,</span><span class="s">&quot;error_code&quot;</span><span class="o">:</span><span class="mi">1001</span><span class="o">}</span>
</span><span class='line'> <span class="o">&lt;--</span> <span class="n">END</span> <span class="nf">HTTP</span> <span class="o">(</span><span class="mi">35</span><span class="o">-</span><span class="kt">byte</span> <span class="n">body</span><span class="o">)</span>
</span><span class='line'> <span class="o">&lt;--</span> <span class="mi">200</span> <span class="n">OK</span> <span class="nl">http:</span><span class="c1">//192.168.56.1:8888/refresh_token (2ms)</span>
</span><span class='line'> <span class="n">Content</span><span class="o">-</span><span class="nl">Type:</span> <span class="n">text</span><span class="o">/</span><span class="n">plain</span>
</span><span class='line'> <span class="o">&lt;--</span> <span class="mi">200</span> <span class="n">OK</span> <span class="nl">http:</span><span class="c1">//192.168.56.1:8888/request?token=1471774119164 (6ms)</span>
</span><span class='line'> <span class="nl">Date:</span> <span class="n">Mon</span><span class="o">,</span> <span class="mi">22</span> <span class="n">Aug</span> <span class="mi">2016</span> <span class="mi">00</span><span class="o">:</span><span class="mi">38</span><span class="o">:</span><span class="mi">09</span> <span class="n">GMT</span>
</span><span class='line'> <span class="n">Content</span><span class="o">-</span><span class="nl">Type:</span> <span class="n">text</span><span class="o">/</span><span class="n">plain</span>
</span><span class='line'> <span class="nl">Date:</span> <span class="n">Mon</span><span class="o">,</span> <span class="mi">22</span> <span class="n">Aug</span> <span class="mi">2016</span> <span class="mi">00</span><span class="o">:</span><span class="mi">38</span><span class="o">:</span><span class="mi">09</span> <span class="n">GMT</span>
</span><span class='line'> <span class="nl">Connection:</span> <span class="n">keep</span><span class="o">-</span><span class="n">alive</span>
</span><span class='line'> <span class="nl">Connection:</span> <span class="n">keep</span><span class="o">-</span><span class="n">alive</span>
</span><span class='line'> <span class="n">Transfer</span><span class="o">-</span><span class="nl">Encoding:</span> <span class="n">chunked</span>
</span><span class='line'> <span class="n">Transfer</span><span class="o">-</span><span class="nl">Encoding:</span> <span class="n">chunked</span>
</span><span class='line'> <span class="o">{</span><span class="s">&quot;success&quot;</span><span class="o">:</span><span class="kc">true</span><span class="o">,</span><span class="s">&quot;data&quot;</span><span class="o">:{</span><span class="s">&quot;token&quot;</span><span class="o">:</span><span class="s">&quot;1471826289336&quot;</span><span class="o">}}</span>
</span><span class='line'> <span class="o">&lt;--</span> <span class="n">END</span> <span class="nf">HTTP</span> <span class="o">(</span><span class="mi">49</span><span class="o">-</span><span class="kt">byte</span> <span class="n">body</span><span class="o">)</span>
</span><span class='line'> <span class="o">{</span><span class="s">&quot;success&quot;</span><span class="o">:</span><span class="kc">false</span><span class="o">,</span><span class="s">&quot;error_code&quot;</span><span class="o">:</span><span class="mi">1001</span><span class="o">}</span>
</span><span class='line'> <span class="o">&lt;--</span> <span class="n">END</span> <span class="nf">HTTP</span> <span class="o">(</span><span class="mi">35</span><span class="o">-</span><span class="kt">byte</span> <span class="n">body</span><span class="o">)</span>
</span><span class='line'><span class="nl">roxy:</span> <span class="n">Refresh</span> <span class="n">token</span> <span class="n">success</span><span class="o">,</span> <span class="n">time</span> <span class="o">=</span> <span class="mi">1471790019657</span>
</span><span class='line'> <span class="o">--&gt;</span> <span class="n">GET</span> <span class="nl">http:</span><span class="c1">//192.168.56.1:8888/request?token=1471826289336 http/1.1</span>
</span><span class='line'> <span class="o">--&gt;</span> <span class="n">GET</span> <span class="nl">http:</span><span class="c1">//192.168.56.1:8888/request?token=1471826289336 http/1.1</span>
</span><span class='line'> <span class="o">--&gt;</span> <span class="n">END</span> <span class="n">GET</span>
</span><span class='line'> <span class="o">--&gt;</span> <span class="n">END</span> <span class="n">GET</span>
</span><span class='line'> <span class="o">--&gt;</span> <span class="n">GET</span> <span class="nl">http:</span><span class="c1">//192.168.56.1:8888/request?token=1471826289336 http/1.1</span>
</span><span class='line'> <span class="o">--&gt;</span> <span class="n">GET</span> <span class="nl">http:</span><span class="c1">//192.168.56.1:8888/request?token=1471826289336 http/1.1</span>
</span><span class='line'> <span class="o">--&gt;</span> <span class="n">END</span> <span class="n">GET</span>
</span><span class='line'> <span class="o">--&gt;</span> <span class="n">END</span> <span class="n">GET</span>
</span><span class='line'> <span class="o">--&gt;</span> <span class="n">GET</span> <span class="nl">http:</span><span class="c1">//192.168.56.1:8888/request?token=1471826289336 http/1.1</span>
</span><span class='line'> <span class="o">--&gt;</span> <span class="n">END</span> <span class="n">GET</span>
</span><span class='line'> <span class="o">&lt;--</span> <span class="mi">200</span> <span class="n">OK</span> <span class="nl">http:</span><span class="c1">//192.168.56.1:8888/request?token=1471826289336 (2ms)</span>
</span><span class='line'> <span class="n">Content</span><span class="o">-</span><span class="nl">Type:</span> <span class="n">text</span><span class="o">/</span><span class="n">plain</span>
</span><span class='line'> <span class="nl">Date:</span> <span class="n">Mon</span><span class="o">,</span> <span class="mi">22</span> <span class="n">Aug</span> <span class="mi">2016</span> <span class="mi">00</span><span class="o">:</span><span class="mi">38</span><span class="o">:</span><span class="mi">09</span> <span class="n">GMT</span>
</span><span class='line'> <span class="nl">Connection:</span> <span class="n">keep</span><span class="o">-</span><span class="n">alive</span>
</span><span class='line'> <span class="n">Transfer</span><span class="o">-</span><span class="nl">Encoding:</span> <span class="n">chunked</span>
</span><span class='line'> <span class="o">{</span><span class="s">&quot;success&quot;</span><span class="o">:</span><span class="kc">true</span><span class="o">,</span><span class="s">&quot;data&quot;</span><span class="o">:{</span><span class="s">&quot;result&quot;</span><span class="o">:</span><span class="kc">true</span><span class="o">}}</span>
</span><span class='line'> <span class="o">&lt;--</span> <span class="n">END</span> <span class="nf">HTTP</span> <span class="o">(</span><span class="mi">39</span><span class="o">-</span><span class="kt">byte</span> <span class="n">body</span><span class="o">)</span>
</span><span class='line'> <span class="o">&lt;--</span> <span class="mi">200</span> <span class="n">OK</span> <span class="nl">http:</span><span class="c1">//192.168.56.1:8888/request?token=1471826289336 (4ms)</span>
</span><span class='line'> <span class="o">&lt;--</span> <span class="mi">200</span> <span class="n">OK</span> <span class="nl">http:</span><span class="c1">//192.168.56.1:8888/request?token=1471826289336 (6ms)</span>
</span><span class='line'> <span class="n">Content</span><span class="o">-</span><span class="nl">Type:</span> <span class="n">text</span><span class="o">/</span><span class="n">plain</span>
</span><span class='line'> <span class="nl">Date:</span> <span class="n">Mon</span><span class="o">,</span> <span class="mi">22</span> <span class="n">Aug</span> <span class="mi">2016</span> <span class="mi">00</span><span class="o">:</span><span class="mi">38</span><span class="o">:</span><span class="mi">09</span> <span class="n">GMT</span>
</span><span class='line'> <span class="nl">Connection:</span> <span class="n">keep</span><span class="o">-</span><span class="n">alive</span>
</span><span class='line'> <span class="n">Transfer</span><span class="o">-</span><span class="nl">Encoding:</span> <span class="n">chunked</span>
</span><span class='line'> <span class="o">{</span><span class="s">&quot;success&quot;</span><span class="o">:</span><span class="kc">true</span><span class="o">,</span><span class="s">&quot;data&quot;</span><span class="o">:{</span><span class="s">&quot;result&quot;</span><span class="o">:</span><span class="kc">true</span><span class="o">}}</span>
</span><span class='line'> <span class="o">&lt;--</span> <span class="n">END</span> <span class="nf">HTTP</span> <span class="o">(</span><span class="mi">39</span><span class="o">-</span><span class="kt">byte</span> <span class="n">body</span><span class="o">)</span>
</span><span class='line'> <span class="n">Content</span><span class="o">-</span><span class="nl">Type:</span> <span class="n">text</span><span class="o">/</span><span class="n">plain</span>
</span><span class='line'> <span class="nl">Date:</span> <span class="n">Mon</span><span class="o">,</span> <span class="mi">22</span> <span class="n">Aug</span> <span class="mi">2016</span> <span class="mi">00</span><span class="o">:</span><span class="mi">38</span><span class="o">:</span><span class="mi">09</span> <span class="n">GMT</span>
</span><span class='line'> <span class="nl">Connection:</span> <span class="n">keep</span><span class="o">-</span><span class="n">alive</span>
</span><span class='line'> <span class="n">Transfer</span><span class="o">-</span><span class="nl">Encoding:</span> <span class="n">chunked</span>
</span><span class='line'> <span class="o">&lt;--</span> <span class="mi">200</span> <span class="n">OK</span> <span class="nl">http:</span><span class="c1">//192.168.56.1:8888/request?token=1471826289336 (4ms)</span>
</span><span class='line'> <span class="n">Content</span><span class="o">-</span><span class="nl">Type:</span> <span class="n">text</span><span class="o">/</span><span class="n">plain</span>
</span><span class='line'> <span class="nl">Date:</span> <span class="n">Mon</span><span class="o">,</span> <span class="mi">22</span> <span class="n">Aug</span> <span class="mi">2016</span> <span class="mi">00</span><span class="o">:</span><span class="mi">38</span><span class="o">:</span><span class="mi">09</span> <span class="n">GMT</span>
</span><span class='line'> <span class="nl">Connection:</span> <span class="n">keep</span><span class="o">-</span><span class="n">alive</span>
</span><span class='line'> <span class="n">Transfer</span><span class="o">-</span><span class="nl">Encoding:</span> <span class="n">chunked</span>
</span><span class='line'> <span class="o">{</span><span class="s">&quot;success&quot;</span><span class="o">:</span><span class="kc">true</span><span class="o">,</span><span class="s">&quot;data&quot;</span><span class="o">:{</span><span class="s">&quot;result&quot;</span><span class="o">:</span><span class="kc">true</span><span class="o">}}</span>
</span><span class='line'> <span class="o">&lt;--</span> <span class="n">END</span> <span class="nf">HTTP</span> <span class="o">(</span><span class="mi">39</span><span class="o">-</span><span class="kt">byte</span> <span class="n">body</span><span class="o">)</span>
</span><span class='line'> <span class="o">&lt;--</span> <span class="mi">200</span> <span class="n">OK</span> <span class="nl">http:</span><span class="c1">//192.168.56.1:8888/request?token=1471826289336 (7ms)</span>
</span><span class='line'> <span class="n">Content</span><span class="o">-</span><span class="nl">Type:</span> <span class="n">text</span><span class="o">/</span><span class="n">plain</span>
</span><span class='line'> <span class="nl">Date:</span> <span class="n">Mon</span><span class="o">,</span> <span class="mi">22</span> <span class="n">Aug</span> <span class="mi">2016</span> <span class="mi">00</span><span class="o">:</span><span class="mi">38</span><span class="o">:</span><span class="mi">09</span> <span class="n">GMT</span>
</span><span class='line'> <span class="nl">Connection:</span> <span class="n">keep</span><span class="o">-</span><span class="n">alive</span>
</span><span class='line'> <span class="n">Transfer</span><span class="o">-</span><span class="nl">Encoding:</span> <span class="n">chunked</span>
</span><span class='line'> <span class="o">{</span><span class="s">&quot;success&quot;</span><span class="o">:</span><span class="kc">true</span><span class="o">,</span><span class="s">&quot;data&quot;</span><span class="o">:{</span><span class="s">&quot;result&quot;</span><span class="o">:</span><span class="kc">true</span><span class="o">}}</span>
</span><span class='line'> <span class="o">&lt;--</span> <span class="n">END</span> <span class="nf">HTTP</span> <span class="o">(</span><span class="mi">39</span><span class="o">-</span><span class="kt">byte</span> <span class="n">body</span><span class="o">)</span>
</span><span class='line'> <span class="o">{</span><span class="s">&quot;success&quot;</span><span class="o">:</span><span class="kc">true</span><span class="o">,</span><span class="s">&quot;data&quot;</span><span class="o">:{</span><span class="s">&quot;result&quot;</span><span class="o">:</span><span class="kc">true</span><span class="o">}}</span>
</span><span class='line'> <span class="o">&lt;--</span> <span class="n">END</span> <span class="nf">HTTP</span> <span class="o">(</span><span class="mi">39</span><span class="o">-</span><span class="kt">byte</span> <span class="n">body</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>刚发出的5个请求都返回了 token 过期的 error，之后看到一个重新刷新 token 的请求，它成功之后，原先的5个请求又进行了重试，并都返回了成功的信息。一切圆满。</p>

<p>最后，一个完整而又简单的Demo就完成了，若是还有什么不清楚的小伙伴可以加 QQ 群：289926871 来交流。完整的代码<a href="https://github.com/alighters/AndroidDemos">这里</a>的包为 token 的结构下，server 代码则是根目录下的 server 文件夹中，测试的时候不要忘启动 server 哦。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ThreadLocal在Android消息机制中的作用]]></title>
    <link href="http://alighters.github.io/blog/blog/2016/06/25/threadlocal-in-android-message/"/>
    <updated>2016-06-25T17:26:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2016/06/25/threadlocal-in-android-message</id>
    <content type="html"><![CDATA[<p>提及Android的消息机制，相信这是Android开发者非常熟悉，并且相当基础的一个知识点了。那这里还有什么需要讲的呢？这里，先抛出一个问题：</p>

<h2>问题</h2>

<p>我们在使用Handler的时候，都知道其必须要跟一个Looper绑定的。而在UI线程可直接初始化Handler来使用，但是在子线程则不行，系统会抛出一个必须调用<code>Looper.prepare()</code>的异常信息。缘由在于，当初始化<code>Handler</code>的时候，其会通过<code>Looper</code>来获取当前的Looper，代码如下：</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nf">Handler</span><span class="o">(</span><span class="n">Callback</span> <span class="n">callback</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">async</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">//省略</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">mLooper</span> <span class="o">=</span> <span class="n">Looper</span><span class="o">.</span><span class="na">myLooper</span><span class="o">();</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">mLooper</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span>
</span><span class='line'>          <span class="s">&quot;Can&#39;t create handler inside thread that has not called Looper.prepare()&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="c1">//省略</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么，问题来了，为什么在子线程中，通过<code>Looper.myLooper()</code>方法获取的就是为空呢？如果有人回答了Looper是线程相绑定的，那它是如何做到绑定的? 如果还知道答案的话，那就可以跳过本篇文章了。</p>

<h2>代码分析</h2>

<h3>1. Looper的myLooper方法</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="nd">@Nullable</span> <span class="n">Looper</span> <span class="nf">myLooper</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">sThreadLocal</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>此方法只是通过从变量<code>sThreadLocal</code>中取出一个值。那么它的值是哪里来的呢？</p>

<h3>2. Looper的prepare方法</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">prepare</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">quitAllowed</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">sThreadLocal</span><span class="o">.</span><span class="na">get</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">&quot;Only one Looper may be created per thread&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">sThreadLocal</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="k">new</span> <span class="nf">Looper</span><span class="o">(</span><span class="n">quitAllowed</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看出的是调用了这个方法之后，会在<code>sThreadLocal</code>中存在一个新建的<code>Looper</code>对象。那么看看这个<code>sThreadLocal</code>是什么东西呢？</p>

<h3>3. sThreadLocal的定义</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// sThreadLocal.get() will return null unless you&#39;ve called prepare().</span>
</span><span class='line'><span class="kd">static</span> <span class="kd">final</span> <span class="n">ThreadLocal</span><span class="o">&lt;</span><span class="n">Looper</span><span class="o">&gt;</span> <span class="n">sThreadLocal</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ThreadLocal</span><span class="o">&lt;</span><span class="n">Looper</span><span class="o">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>是一个静态的ThreadLocal的变量，并且泛型指向的是<code>Looper</code>对象。另外，注释中告诉了我们，如果我们不调用<code>prepare</code>方法的话，那<code>get</code>方法返回的是null。所以现在就引出咱们的重头戏<code>ThreadLocal</code>了。</p>

<h2>ThreadLocal</h2>

<h3>1. 定义</h3>

<p>先看一下官方的解释：</p>

<blockquote><p>Implements a thread-local storage, that is, a variable for which each thread
has its own value. All threads share the same {@code ThreadLocal} object,
but each sees a different value when accessing it, and changes made by one
thread do not affect the other threads. The implementation supports
{@code null} values.</p></blockquote>

<p>这段话的意思是实现了一个线程相关的存储，即每个线程都有自己独立的变量。所有的线程都共享者这一个<code>ThreadLocal</code>对象，
并且当一个线程的值发生改变之后，不会影响其他的线程的值。</p>

<h3>2. 实现</h3>

<p>ThreadLocal的类定义使用了泛型<code>ThreadLocal&lt;T&gt;</code>，其中T指代的是在线程中存取值的类型。（对应Android中使用的ThreadLocal, T则存放的类型为Looper）
+ set方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">set</span><span class="o">(</span><span class="n">T</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Thread</span> <span class="n">currentThread</span> <span class="o">=</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Values</span> <span class="n">values</span> <span class="o">=</span> <span class="n">values</span><span class="o">(</span><span class="n">currentThread</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">values</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">values</span> <span class="o">=</span> <span class="n">initializeValues</span><span class="o">(</span><span class="n">currentThread</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">values</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中的<code>values</code>方法如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Values</span> <span class="nf">values</span><span class="o">(</span><span class="n">Thread</span> <span class="n">current</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">current</span><span class="o">.</span><span class="na">localValues</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>方法中，先通过<code>Thread.currentThread</code>来拿到当前线程，再拿到线程的values属性，并对此values属性进行赋值，其中key为当前的<code>ThreadLocal</code>对象，value则是当前要存放的值。而这个values对象，其中维持了一个一维的object数组，采用偶数为key, （索引为index）奇数为value(索引为index + 1)的数据结构。
+ get方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">T</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Optimized for the fast path.</span>
</span><span class='line'>    <span class="n">Thread</span> <span class="n">currentThread</span> <span class="o">=</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Values</span> <span class="n">values</span> <span class="o">=</span> <span class="n">values</span><span class="o">(</span><span class="n">currentThread</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">values</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Object</span><span class="o">[]</span> <span class="n">table</span> <span class="o">=</span> <span class="n">values</span><span class="o">.</span><span class="na">table</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">hash</span> <span class="o">&amp;</span> <span class="n">values</span><span class="o">.</span><span class="na">mask</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">reference</span> <span class="o">==</span> <span class="n">table</span><span class="o">[</span><span class="n">index</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">(</span><span class="n">T</span><span class="o">)</span> <span class="n">table</span><span class="o">[</span><span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">values</span> <span class="o">=</span> <span class="n">initializeValues</span><span class="o">(</span><span class="n">currentThread</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="o">(</span><span class="n">T</span><span class="o">)</span> <span class="n">values</span><span class="o">.</span><span class="na">getAfterMiss</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在进行取值的时候，也是现获取当前线程，然后根据当前ThreadLocal的hash值与values的mask标志位进行与操作，来获取到当前ThreadLocal在这个线程的values中的位置，并通过判断其存放的key是不是当前ThreadLocal，若是的话，则返回index+1对应的值，即是我们所存放的值；若不是的话，则需要通过values的getAfterMiss方法来进行更进一步详细的搜索。</p>

<h2>总结</h2>

<p>  ThreadLocal通过获取当前线程中的values属性，从而实现了每个单独线程的信息绑定。这样的话，Android的消息机制中，Looper便是采用ThreadLocal作为存储结构，所以looper对象的存储只会在当前线程中，子线程若是使用消息机制的话，必须调用Looper.prepare方法来在线程中新建一个Looper的对象。</p>
]]></content>
  </entry>
  
</feed>
