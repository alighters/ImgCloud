<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Leetcode | alighters]]></title>
  <link href="http://alighters.github.io/blog/blog/categories/leetcode/atom.xml" rel="self"/>
  <link href="http://alighters.github.io/blog/"/>
  <updated>2020-09-13T23:31:41+08:00</updated>
  <id>http://alighters.github.io/blog/</id>
  <author>
    <name><![CDATA[alighters]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[1562. Find Latest Group of Size M]]></title>
    <link href="http://alighters.github.io/blog/blog/2020/09/13/1562-find-latest-group-of-size-m/"/>
    <updated>2020-09-13T23:26:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2020/09/13/1562-find-latest-group-of-size-m</id>
    <content type="html"><![CDATA[<h1>思路</h1>

<p>主要在于每次通过数组 arr 中的值，进行将  “0“ 变为 ”1“，从而寻找出现连续的 1 值，问题就在于如何记录此时所出现的连续的 “1” 的字符串的长度。 （注意，这里不能再去循环遍历，肯定会超时。）</p>

<h1>前置</h1>

<p>n 表示数组的长度</p>

<!--more-->


<h1>方案一</h1>

<blockquote><p><em>参照 <a href="https://leetcode.com/problems/find-latest-group-of-size-m/discuss/806718/Python-Clean-Union-Find-solution-with-explanation-O(N"> [Python] Clean Union-Find solution with explanation - O(N)</a>)</em></p></blockquote>

<p>在 “0”  变为 “1” 的过程中，之后就需要对存在的连续的 “1” 进行合并。这里就想到了 unionset 。在 unionset 进行 union 的过程中，需要考虑 union 后连续的 “1” 的长度的问题。所以这里使用了 rank 数组来记录，合并后连续 “1” 的长度值。</p>

<pre><code class="python">from typing import List

class UnionFind:
    def __init__(self, n):
        self.parent = [i for i in range(n + 1)]
        self.rank = [0] * (n + 1)

    def find(self, s):
        if self.parent[s] == s:
            return s
        self.parent[s] = self.find(self.parent[s])
        return self.parent[s]

    def union(self, a, b):
        a, b = self.find(a), self.find(b)
        if a == b:
            return False
        if a &gt; b:
            a, b = b, a
        self.parent[b] = a
        self.rank[a] += self.rank[b]
        return True

class Solution:

    def findLatestStep(self, arr: List[int], M: int) -&gt; int:
        if len(arr) == M:
            return M
        uf = UnionFind(len(arr))
        ans = -1
        for i, num in enumerate(arr):
            uf.rank[num] = 1
            for j in (num - 1, num + 1):
                if 0 &lt; j &lt;= len(arr):
                    if uf.rank[uf.find(j)] == M:
                        ans = i
                    if uf.rank[j]:
                        uf.union(num, j)
        return ans
</code></pre>

<h1>方案二</h1>

<p>逆向考虑，将数组中的值逆向插入到 [ 0, n + 1] 的数组中。
此时的操作，代表着将连续的 1 中的一项，修改为 ”0”。而根据其在数组左右两项的值做差，可求得其左右的连续的 “1” 的长度。</p>

<p>举例：[ 3, 5, 1, 2, 4]， 要插入的数组为 [0, 6]
1. 插入 4， 结果为 [0, 4, 6] ，左边连续的 “1” 的长度为 4 - 0 - 1 = 3，右边连续的 “1” 的长度为  6- 4 - 1 = 1
2. 插入 2,    结果为 [0, 2, 4, 6] 左边连续的 “1” 的长度为 4 - 2 - 1 = 1，右边连续的 “1” 的长度为 2 - 0 - 1  = 1
3. …</p>

<p>代码如下：</p>

<pre><code class="python">class Solution:
    def findLatestStep(self, arr: List[int], M: int) -&gt; int:
        n = len(arr)
        if M == n:
            return n
        lis = [0, n + 1]
        for num in arr[::-1]:
            import bisect
            index = bisect.bisect(lis, num)
            lis.insert(index, num)
            right = lis[index + 1] - num - 1
            if right == M:
                return n - 1
            left = num - lis[index-1] - 1
            if left == M:
                return n - 1
            n -= 1
        return -1
</code></pre>

<h1>方案三</h1>

<blockquote><p>参照  <a href="https://leetcode.com/problems/find-latest-group-of-size-m/discuss/806786/JavaC%2B%2BPython-Count-the-Length-of-Groups-O(N">lee215</a>)  大佬的答案</p></blockquote>

<p>记录分析影响的左右边界的 长度值。</p>

<p>使用两个数组进行更新记录：
length 数组记录当前更新范围连续 “1” 的长度
Count 记录每个长度出现的次数。最后一次出现的次数即为所求的值。</p>

<p>代码如下：</p>

<pre><code class="python">class Solution:
    def findLatestStep(self, arr: List[int], M: int) -&gt; int:
        n = len(arr)
        length = [0] * (n + 2)
        count = [0] * (n + 1)
        res = -1
        for i, num in enumerate(arr):
            left = length[num - 1]
            right = length[num + 1]
            length[num] = length[num - left] = length[num + right] = left + right + 1
            count[left] -= 1
            count[right] -= 1
            count[length[num]] += 1
            if count[M]:
                res = i + 1
        return res
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1498. Number of Subsequences That Satisfy the Given Sum Condition]]></title>
    <link href="http://alighters.github.io/blog/blog/2020/09/13/1498-number-of-subsequences-that-satisfy-the-given-sum-condition/"/>
    <updated>2020-09-13T23:23:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2020/09/13/1498-number-of-subsequences-that-satisfy-the-given-sum-condition</id>
    <content type="html"><![CDATA[<p>具体链接： <a href="https://leetcode-cn.com/problems/number-of-subsequences-that-satisfy-the-given-sum-condition/">https://leetcode-cn.com/problems/number-of-subsequences-that-satisfy-the-given-sum-condition/</a></p>

<h2>思路</h2>

<p>因题意中，不要求数组的连续，只需要求相应的组合即可。</p>

<p>所以，这里可以先进行数组的排序。
遍历当前的数组，以当前数为基准，求 target - nums[i] 的值，在数组中，所处于的 Index 值。（可通过 bisect.bisect 的二分求解来得到此值。）</p>

<p>当得到此 index 值，以包含当前  nums[i] ，来求一个可以的组合数。其选择的方案为从 <code>i + 1</code> 至 <code>index</code> 的数，可选或者不选，一共的组合数为：</p>

<!--more -->


<pre><code class="python">2 ** (index - i - 1)
</code></pre>

<p>所以，最后的结果数，就是将这些结果累加即可。</p>

<h2>代码</h2>

<pre><code class="python">from typing import List


class Solution:
    def numSubseq(self, nums: List[int], target: int) -&gt; int:
        nums.sort()
        ans = 0
        import bisect
        for i, num in enumerate(nums):
            if num * 2 &lt;= target:
                index = bisect.bisect(nums, target - num, i)
                if index &gt; i:
                    ans += 2 ** (index - i - 1)
            else:
                break
        return ans % (10 ** 9 + 7)
</code></pre>

<h2>注意事项</h2>

<p>在其他语言中，因求这个 2 的幂数，会存在溢出或者超时的情况。所以，都会使用预计算，这些 2  的幂数的结果。方便后续的加速求值。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1524. Number of Sub-arrays With Odd Sum]]></title>
    <link href="http://alighters.github.io/blog/blog/2020/09/13/1524-number-of-sub-arrays-with-odd-sum/"/>
    <updated>2020-09-13T23:18:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2020/09/13/1524-number-of-sub-arrays-with-odd-sum</id>
    <content type="html"><![CDATA[<p>这一题在周赛花费了不少时间，做题时用了个代码比较长的 dp 方案</p>

<h1>方案一</h1>

<p>动态规划</p>

<h2>定义动态方程</h2>

<p>定义一个 n * 2 的二维数组。
dp[i][0]  表示当前以 i 为结尾的子数组和为偶数的方法数
dp[i][1]  表示当前以 i 为结尾的子数组和为奇数的方法数</p>

<!-- more -->


<h2>状态转化方程</h2>

<ol>
<li>nums[i] 为奇数
 dp[i][0] = dp[i-1][1]        （等于前一个的奇数方案数）
 dp[i][1] = dp[i-1][0] + 1     （等于前一个的偶数方案数 + 1）</li>
<li>nums[i] 为偶数
 dp[i][0] = dp[i-1][0] + 1
 dp[i][1] = dp[i-1][1]</li>
</ol>


<blockquote><p>最后，dp 数组为奇数的总和，即为满足的结果数。</p></blockquote>

<h2>代码</h2>

<pre><code class="python">class Solution:
    def numOfSubarrays(self, arr: List[int]) -&gt; int:
        dp = [[0] * 2 for _ in range(len(arr) + 1)]
        for i, n in enumerate(arr):
            if n % 2 == 1:
                dp[i + 1][1] = dp[i][0] + 1
                dp[i + 1][0] = dp[i][1]
            else:
                dp[i + 1][0] = dp[i][0] + 1
                dp[i + 1][1] = dp[i][1]
        # print(dp)
        return sum( x for _, x in dp) % (10**9 + 7)
</code></pre>

<h1>方案二</h1>

<p>前缀和</p>

<p>通过前缀和来计算时，这里有个技巧：</p>

<blockquote><p>奇数 - 偶数 = 奇数
偶数 - 奇数 = 奇数</p></blockquote>

<p>这里大佬们会用一个长度为 2 的数组，来记录数组索引 i 之前的奇数前缀和、偶数前缀和的结果数。如下表示：
<code>
pre = [1, 0]
</code>
初始状态时，即空数组，我们认为前缀和为偶数的有 1 个，奇数的有 0 个。</p>

<p>所以当计算到 i 时，得到其前缀和为 sum。
1. sum 为偶数时。此时的答案即前面有多少个前缀和为奇数的方案数
2. sum 为奇数时。此时的答案即前面有多少个前缀和为偶数的方案数。</p>

<p>因之前定义的数组大小为 2 ，就很方便进行奇数数的操作记录。</p>

<p>写一个 i 的状态记录方程。
<code>
ans += pre[1 - sum % 2]
pre[sum % 2] += 1
</code></p>

<h2>代码</h2>

<pre><code class="python">class Solution:
    def numOfSubarrays(self, arr: List[int]) -&gt; int:
        pre = [1, 0]
        sum = 0
        ans = 0
        for n in arr:
            sum += n
            ans += pre[1 - sum % 2]
            pre[sum % 2] += 1
        return ans % (10 ** 9 + 7)
</code></pre>
]]></content>
  </entry>
  
</feed>
