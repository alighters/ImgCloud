<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 随笔 | alighters]]></title>
  <link href="http://alighters.github.io/blog/blog/categories/sui-bi/atom.xml" rel="self"/>
  <link href="http://alighters.github.io/blog/"/>
  <updated>2021-01-10T23:44:23+08:00</updated>
  <id>http://alighters.github.io/blog/</id>
  <author>
    <name><![CDATA[alighters]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[程序员加班之说-谈效率]]></title>
    <link href="http://alighters.github.io/blog/blog/2016/05/07/talk-about-overtime/"/>
    <updated>2016-05-07T12:29:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2016/05/07/talk-about-overtime</id>
    <content type="html"><![CDATA[<p><img src="http://alighters.github.io/files/imgs/%E5%8A%A0%E7%8F%AD.jpg" alt="加班" /></p>

<p>最近听人谈起程序员的加班问题，忙到那么晚，真有那么多事情要做么？当然每个人遇到的情况不一样，给到的答案也是不一样的，这里针对个人所遇到的情况，谈谈对加班的一些看法。</p>

<!-- more -->


<h2>任务量是不是很多？</h2>

<p>答： 是的。因我们最近涉及到改版，将旧有的逻辑全部以新的格式重新书写；以及引入的新的框架、架构，有许多的东西要学，这样就无形中也增加了任务量。但这就是加班的主要理由吗？</p>

<h2>核心问题-效率</h2>

<p>结合个人在做任务开发时所遇到的问题以及所浪费的时间，思考了许久。发现真正的问题，是在做任务写代码时，是否是以较高的效率来完成并解决问题。但说起效率这一点，又是有些大的概念，具体以下几个方面谈起：</p>

<h3>1. 分解任务，理清思路</h3>

<ul>
<li>我们在拿到任务时，不能草率对待，直接开始上手。而应该对过大的任务做一些任务分解，分解为一个个在一天内以小时为单位可以完成的任务。另外，对需要花时间调研的，也要将其分解为任务。</li>
<li>在每个任务的开发之前，一定要确保思路的清晰。如何保证，可以采取一些工具来帮助，例如，思维导图来帮助我们记录我们在完成任务时，需要考虑的细节点，其清晰的结构对我们任务的理解是极大好处的；若是当前的任务可以涉及到的逻辑比较复杂或者状态比较多的话，这是就得考虑使用UML建模工具，其中用来记录对象的状态变换的状态图，理清程序的逻辑的活动图，清晰对象交互的时序图则是我们常用且必不可少的。</li>
<li>万事开头难。可能在开始进行这些工作时，我们会不熟悉，而感觉比较麻烦，又或者画出的图带着些缺陷。但请确信，坚持下去并慢慢总结自己遇到的问题，会对我们开发或者做事会带来极大的便利的。毕竟，这时你要是做的很好了，就可以直接作为一份开发文档了，比起代码来说，不是容易理解多了吗？</li>
</ul>


<h3>2. 预留时间，以防踩坑</h3>

<p>对若是对任务的完成把握性不大，可以多预估一点时间。但当我们的技能越来越熟练的时候，对任务的时间度把握性也会愈加的精准。</p>

<h3>3. 及时饶坑，任务优先</h3>

<p>在遇到问题的时候，若是在预定的时间内没得到解决的话，则必须要进行求助，或者将其先放置，完成其他任务优先。</p>

<h3>4. 深入学习，防患未然</h3>

<p>这样，下班之后的时间，我们便可以去充分地利用。对工作中所需要的技能点去做一些深入地学习。又或者对工作中没能得到解决的任务和困难点，做一些研究总结性的东西。又或者对知识点去进行系统性地学习。这里的时间，是我们提高和丰富自己的时候，需要充分地利用。</p>

<h3>5. 番茄工作，劳逸结合</h3>

<p>人的一天的工作精力是有限的，则需要对自己的精力进行一些规划。在自己高效地时间，尽可能地完成主要的工作。同时，也要进行工作一定的时间，休息几分钟，调整一下自己的状态。</p>

<h2>总结</h2>

<p>上面谈及的工作效率的一些点，是结合了自己的经验之谈，如有问题，欢迎指教讨论。另外，还有一些想表达的是，加班是相当不必要的，毕竟工作不能占了我们生活的全部。工作时间之余，应该是我们提高自己，提升并丰富自己生活的质量。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[程序猿看产品开发]]></title>
    <link href="http://alighters.github.io/blog/blog/2016/03/02/programmer-look-product/"/>
    <updated>2016-03-02T23:36:10+00:00</updated>
    <id>http://alighters.github.io/blog/blog/2016/03/02/programmer-look-product</id>
    <content type="html"><![CDATA[<p><img src="http://alighters.github.io/files/imgs/think.png" alt="Paste_Image.png" /></p>

<!-- more -->


<p>在接近三年的开发生涯中，做过了不少项目，但发现个人能力的成长上确没有达到自己所期望的程度。不能说自己不够努力，细细想来，每天都处于忙碌的状态。但是是否处于一个高效的工作状态，在开发中处于良性的循环？在产品开发的过程中，注重的仅仅是完成开发任务，还是关注产品的性能、架构以及代码的质量？在这些方面，就做的相当差劲了。</p>

<p>当然，作为程序员，这些方面都是我们应该关注的，毕竟这对个人的职业发展是相当重要的。但这只是个空口的希望（这句有点奇怪），现在的互联网行业中，产品的开发是处于快速迭代的时期，需求的不断改动对开发工作带来很大的影响，使我们的效率大打折扣。<strong>怎样使产品开发更加高效，质量更高，同时保证程序员对产品实现有着更深入的思考？</strong> 这便是作者思考尝试解决的问题，应该从以下几个方面做起：</p>

<h3>1. 流程划分</h3>

<p>  <strong>清晰流程</strong>，详细的交互设计文档以及后台接口基本提供完善，才可进入App开发的阶段。我们在App开发的开始，是需要针对设计交互文档确认过，细至每个细节的交互都了解；开发过程中，可能产生的一些交互问题，都应该在交互文档详细地体现出来，做到一切有迹可循。程序员在开发过程中不再有模糊的交互，不再有口头上的交流，是我们在文档最终定稿应该达到的理想效果。需明白，在开发过程中，口头交流来确定交互的实现，对开发效率都是大打折扣的，出了问题，我们都是没法责任到人的。</p>

<p>  这样，就要求在前期设计交互文档的人员的责任比较重，需要针对每个细节的实现都要考虑清楚，产品经理在对一个新的迭代的开发的同时，需要明确提及到这个迭代中的会涉及到的交互的实现。人无完人，不能各个层面都涉及到，所以在这个期间，可以让程序员加入来讨论，毕竟最后的实现是需要程序员来完成的嘛，有问题的过程再确定重新形成方案，必要的时候，可以给与程序员一定的调研时间，当然考虑地越多，意味着我们的工作将能够更加地明确。</p>

<p>  清晰地可以看出一个版本的开发将会有两个阶段，<em>阶段一</em> <strong>需求的定义形成设计文档，主要角色有产品经理、产品设计、产品交互；</strong> *阶段二 * <strong>程序员进入开发阶段最后交付完整的产品。</strong>此时，我们可以让下一个版本跟当前版本做一个简单的交错，即在阶段二中，产品进入下一个版本的的需求设计阶段，借此来并行地保证各个部门的高效工作。</p>

<p>  虽然看起来在操作过程中，可能会遇到不可料想的麻烦，毕竟没有一成不变地需求，这样就需要产品经理权衡，尽量将这些需求放在下个版本中，将是最好的方式。不然交错地流程开发，带来更多的是开发成本的上升，产品的迭代周期的延长。</p>

<h3>2. 规范定义</h3>

<p>  <strong>界面设计、接口设计、App设计定义一些通用的规范。</strong>
+ 接口设计需要对返回的数据进行统一格式。譬如：统一返回的是 JsonObject，其中包装成功状态result 以及错误的信息，真正的数据则统一放置在 data 字段中进行处理。
+ 界面设计遵循设计规范。 Android 可以选择 Material Design，苹果也有自己的设计规范。若是不采用这些，则需要对一些通用的样式，做些统一定义，譬如常有的间距，弹出框样式，常用的颜色值，字体大小等等。这样客户端也可针对这些定义，遇到的时候则可直接使用。
+ App开发的规范。统一的命名、格式化文件标准、尽量清晰的处理逻辑、类文件编写。</p>

<p>定义规范，即多做约定，最直接的好处就是：多人员协作能够有一套的标准，不至于杂乱无章。</p>

<h3>3. 角色明确</h3>

<p>  这一点在小公司可能不太清晰，经常出现一人兼多职的情况，不太好定义。在成熟公司，这一点是相当重要的，因为角色到人，使得我们可以精确到单一问题该有何人负责。若是一个团队中出现职责不清晰的情况，使得我们解决一个问题便会出现踢雪球的情况，问题得不到解决，雪球还有变大的可能。</p>

<h3>4. 产品至上</h3>

<p>  产品是最最最重要的。最终的成果都是拿产品来说话的，即使再牛逼的销售团队，再漂亮的设计到产品上，也经不住产品的不断闪退，卡顿，高耗电，不人性化。而这最终的成果的展示都是在程序员身上，产品的优化又是一个任重道远的过程，毕竟你产品经理还要加功能。所以应该以程序员的工作为主，API设计以及UI团队应配合甚至服务于程序员的工作，尽量保证程序员能够高效地工作。遇到过App展示一个界面，要发送三个甚至更多的API请求，只想说真是够了。所以这里应当简化App端的工作，能尽量少在客户端做的就少做，服务器端的改动肯定比客户端来的容易些。</p>

<h3>总结</h3>

<p>作者是站在一个程序员的角度上，以及要不断迭代地去开发一款长周期的产品，来看待产品开发应该具有一个怎样正确的姿势的，欢迎来拍砖讨论。当然，如果你就只是想快速开发出一款产品，那我上面的都是瞎扯淡了。。</p>

<h3>PS</h3>

<blockquote><p>这里感谢<a href="https://github.com/laobie">Jaeger</a>大神的审阅，并提出的修改。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015年终总结]]></title>
    <link href="http://alighters.github.io/blog/blog/2016/02/10/2015-nian-zhong-zong-jie/"/>
    <updated>2016-02-10T09:18:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2016/02/10/2015-nian-zhong-zong-jie</id>
    <content type="html"><![CDATA[<p>在这一年里，一大半的时间都在创业公司度过，10月中旬开始跳槽换公司，12月临时决定了去一家氛围比较满意的公司。这期间有着好多波折，同时也是自己一个思考的过程，为自己将来的目标与计划做一个比较好的筛选。所以，以后在面试找工作的过程中，一定要慎重，不要着急，结合自己的兴趣与想要的环境、氛围来确定自己的去处。接下来，主要从自己收获、不足、展望来进行一番总结。接下来，从自己感触最深的几个方面谈起。</p>

<!-- more -->


<h3>收获与不足</h3>

<ol>
<li><strong>不足一：创业公司压力大的问题</strong>
这一点感触最深的就是，在创业公司度过的一年多时间里面，是加班加点地迭代产品，没有太多的时间去深入学习，也没有太多的时间去进行代码的重构。另一方面，创业公司想要获取成功，就要拥有用户数，这里就需要有用户数目的积累，一是要有保证产品的质量，另一个就是要有一条独特的销售途径。创业公司要想找到一个靠谱的推广产品的点子，还得顾及成本问题，往往就是比较艰难的。我们公司采取的途径就是方法一，不断优化产品的体验，这样，对产品开发的压力就很大，要去不断地改进版本，也就需要有着良好的代码扩展能力(这里我其实是做的不太好的，前期没有考虑架构问题)。还有一个问题就是开发人员比较少，还不太稳定，技术氛围就得不到保证。</li>
<li><strong>不足二：学习深度与总结的问题</strong>
在学习程序的过程中，在开始阶段，只是需要使程序运行出预期的结果即可，而在成为高手，更进一步的过程中，则需要知其所以然，而不简简单单地停留在表面上。这在面试一些好公司的过程中，是及其必要的，另一个关于基础的算法，也是及其需要的。这就需要我们多读源码，多理解代码的原理，还有一些设计的问题，多注意总结。</li>
<li><strong>收获一：公司的技术氛围</strong>
现在入职的这家公司，公司对技术的重视，是工作以来接触的一家最不错的公司。公司能够对一些线下活动提供一些资费的报销，并且鼓励去参加线下的活动。另外，公司技术小组也会有内部分享，Code Review，倾向于新技术的尝试与学习。</li>
<li><strong>收获二：线下活动的参加</strong><br/>
这一年参加的两个主要的活动：一是上海的GDG，二是杭州的D2前端会议。通过这些活动，了解了一些新技术RxJava的使用情况以及前端火热的技术发展，并且可以认识一些这方面的技术大神。</li>
</ol>


<p>以上简单地总结了一下收获，接下来针对自己以前的陋习做一些改正，主要从以上学习、生活几个方面做一些罗列：</p>

<h3>学习</h3>

<ol>
<li>注重工作效率：
每天的工作任务，尽量在这一天的开始时，就大致定下来，然后分条目地去完成；按照番茄工作法，来进行工作时间的安排，利用间隔时间来休息。同时，在进行一个复杂任务的同时，通过使用思维导图以及UML建模工具来建立一个全局的统筹的认识，在实践的过程中，再去不断完善细节，这样也会不断促进自己设计架构以及全局规划的能力。</li>
<li>多读书：
读书不仅仅要读技术书，还要读一些文学类以及其他方面的书，也要学会读书，把读书也变成自己的一个习惯。技术书籍，会使自己一项技术有个全局而又深入的认识，而不像使用搜索引擎零敲碎打地学习。另外，虽然我们做技术的，也不能生活中全是代码、技术，应该多接触接触其他的，感兴趣的东西。谈到读书这个问题，接触到的两个公司的老板，就都是非常喜欢读书的人。听他们的谈吐，以及对事物的看法，都有非常独到的见解与认识。回想自己的以前，只是对技术感兴趣，感觉看书的才都是书呆子，最后发现自己的谈吐，都是随心而出的，没有经过大脑的，恩，非常“不善言谈”。所以，想想这是需要有些丰富的阅历，并对这些做一些深入思考总结的，要么是从社会中获取，要么是从书籍中获取。另外，读书也是讲究方法的，需要对书籍中的知识做些总结、笔记或者感受的记录。</li>
<li>多实践：
身为程序员，就得需要多多动手去敲代码。代码的学习，不仅仅是网上或者书上看到就结束了，也需要自己动手去练习，去实践。还有就是，技术架构的学习，若是再工作中得不到实践的时候，是可以考虑自己业余实践做一个项目，需求、设计自己一把抓，也是一番不错的体验，当然，若能赚到一笔额外的费用，就更加妙了。</li>
</ol>


<h3>生活</h3>

<ol>
<li>养成良好习惯：</li>
<li>早睡早起</li>
<li>多喝水、多吃水果</li>
<li>每天预留2个小时左右的时间进行看书</li>
<li>多参加活动：</li>
<li>这里指的是参加线下的一些活动，扩宽视野，多结识一些朋友</li>
<li>多锻炼：</li>
<li>每周一定量的锻炼</li>
</ol>


<h3>展望与目标</h3>

<ol>
<li>上面罗列的这些，都是接下来自己要去努力的方向，希望在接下来的一年内，逐渐养成这些良好的习惯。</li>
<li>Android技术的成长，深入一些Android常用库的理解，在架构设计方面有足够深入的理解；另一方面完成“Android三剑客”与《Effective Java》书籍的阅读。</li>
<li>博客文章的书写，尽量保证质量与篇数。</li>
<li>Ruby与React的熟练学习。Ruby是我感觉其设计非常独特的一门语言，在以后的常用的脚本语言及简单的服务器多多熟练Ruby的使用；React感觉这是前端的一个趋势，则继续保持深入的学习。</li>
</ol>

]]></content>
  </entry>
  
</feed>
