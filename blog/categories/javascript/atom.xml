<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | alighters]]></title>
  <link href="http://alighters.github.io/blog/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://alighters.github.io/blog/"/>
  <updated>2020-09-20T23:06:02+08:00</updated>
  <id>http://alighters.github.io/blog/</id>
  <author>
    <name><![CDATA[alighters]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[React Native 之 JS 分离]]></title>
    <link href="http://alighters.github.io/blog/blog/2017/01/23/reactnative-seprate-js/"/>
    <updated>2017-01-23T13:34:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2017/01/23/reactnative-seprate-js</id>
    <content type="html"><![CDATA[<p>项目中遇到了要使 JS 与客户端分离的问题，即由前端开发人员开发相应的 JS 部分，客户端人员（Android 和 Ios）开发对应的 Native 部分。</p>

<p>不过幸运的是，React Native 对这部分内容已经做了支持。主要的思想是，当进入手机端的 RN 界面时，通过加载 JS 部分生成的 bundle，来达到 JS 测试开发的目的。</p>

<p>在前端开发时，需要通过启动 npm server，连接手机端的 server，来进行开发。 下面对其中的过程做一笔记：</p>

<!-- more -->


<h3>1.分离 JS 部分</h3>

<p>前端开发所需要的东西只是 npm 的配置文件 <code>package.json</code> 及相应的 index 文件（index.android.js 和 index.ios.js）。</p>

<p>当然种类还是需要配置环境，根据 <code>package.json</code> 文件，执行 <code>npm install</code> 即可，完成之后会生成相应的  <code>node_modules</code> 目录。另外，需要安装的是 react-native-cli 的工具。执行如下命令：</p>

<pre><code>npm install -g react-native-cli
</code></pre>

<p>当需要升级的时候，执行如下：</p>

<pre><code>npm update react-native-cli -g
</code></pre>

<p>之后，当我们需要启动一个 Server 的时候，在包含 index 文件和 node_modules 目录下，执行如下命令：</p>

<pre><code>npm start
</code></pre>

<p>或者如下：</p>

<pre><code>react-native start
</code></pre>

<p>这样，便可启动一个用于提供 JS 的 Server.</p>

<h3>2.对接调试</h3>

<p>在启动了 JS 的 server 之后，会在命令行中看到有关服务的地址和端口信息。手机端在对接 RN 的内容并启动之后，通过在 RN 界面的设置界面（使用菜单键或者摇一摇打开）连接 JS Server  的地址和端口即可。另外可以启用 Hot Loading 模式来实时加载 JS。</p>

<p>若是我们指定其他的端口，可以使用如下命令：</p>

<pre><code>react-native start --port 8088
</code></pre>

<h3>3.指定端口</h3>

<p>若是需要在真机上进行调试，需要注意端口的启用：</p>

<pre><code>adb reverse tcp:8081 tcp:8081
</code></pre>

<p>如果需要改变端口，可参考链接  <a href="http://blog.grio.com/2015/07/android-tip-adb-reverse.html">Android Tip: adb reverse | Grio Blog</a>。</p>

<h2>遇到的问题</h2>

<h3>64位手机不兼容的问题</h3>

<p>这里可参照链接 <a href="https://corbt.com/posts/2015/09/18/mixing-32-and-64bit-dependencies-in-android.html">Mixing 32- and 64-bit Dependencies in Android - Corbt blog</a> 过滤掉 64 位的使用。</p>

<h3>Could not get BatchedBridge</h3>

<p>这个错误表示 RN 界面找不到需要加载的 js bundle，可以通过尝试以下几个途径去解决：
1. 进入 RN 的设置界面，在 Dev Setting 中 Debugging 中指定 Server 的地址和端口号。
2. 另外，需要确保手机端和 Server 端保证在同一个 WIFI 之下。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://facebook.github.io/react-native/docs/getting-started.html">React Native Doc</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript变量声明提升]]></title>
    <link href="http://alighters.github.io/blog/blog/2016/06/05/javascript-variable-hosting/"/>
    <updated>2016-06-05T12:40:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2016/06/05/javascript-variable-hosting</id>
    <content type="html"><![CDATA[<p>遇到了JS的变量声明提升，英文名为Hosting，具体来讲是指JS在对当前作用域中的声明代码，会将其提升至当前作用域的最顶端。本文通过几个示例来详细理解一下：</p>

<!-- more -->


<h2>示例一</h2>

<ul>
<li>正常预期的输出</li>
</ul>


<pre><code class="javascript">var myvar = 'my value'; 

(function() { 
  alert(myvar); 
})();
</code></pre>

<p>这种情况下，在浏览器中执行，会看到 <code>my value</code> 的提示框。</p>

<ul>
<li>异常不符合预期的输出</li>
</ul>


<pre><code class="javascript">var myvar = 'my value'; 

(function() { 
  alert(myvar);
  var myvar = 'local value'; 
})();
</code></pre>

<p>这时，我们确得到的输出资料是 <code>undefined</code> 。并不是全局的 myvar，这就是因为在function的作用域内，将变量<code>myvar</code>的声明提升至 <code>alert</code>的上方，等同于下面的代码：</p>

<pre><code class="javascript">var myvar = 'my value'; 

(function() { 
  var myvar;
  alert(myvar);
  myvar = 'local value'; 
})();
</code></pre>

<h2>示例二</h2>

<pre><code class="javascript">(function (){
   newFuntion();
   var newFuntion = function(){
      alert("hello word");
   }
})();
</code></pre>

<p>这段代码将不会有任何输出，但会得到一个错误信息，<code>Uncaught TypeError: newFuntion is not a function</code>。可以看出，其也会对函数的变量声明也会进行提升，等同于这段代码:</p>

<pre><code class="javascript">(function (){
   var newFuntion; 
   newFuntion();
   newFuntion = function(){
      alert("hello word");
   }
})();
</code></pre>

<p>但是，这样调用就不会出错：</p>

<pre><code class="javascript">(function (){
   newFuntion();
   function newFuntion(){
      alert("hello word");
   }
})();
</code></pre>

<p>这是函数声明的写法，会优先在当前作用域进行函数的注册，所以调用的时候，函数已经存在，没有问题。</p>

<h2>示例三</h2>

<pre><code class="javascript">var a = 1;  
function b() {  
    a = 10;  
    return;  
    function a() {} 
}  
b();  
alert(a);
</code></pre>

<p>这个示例的输出，给我们的结果是个"1"的弹出框，很困惑了有木有？对代码改动一下，
<code>javascript
var a = 1;  
function b() {  
    alert(a);
    a = 10;  
    return;  
    function a() {}
}  
b();  
</code>
得到的a 是<code>function a(){}</code>。得到的结果是其对函数的声明。需要注意的是，这里在function b下面的a因为函数声明的问题，已经变为了一个局部变量，所以不会影响全局变量a，所以之前代码的结果输出为1，也就很容易理解了。</p>

<h2>总结</h2>

<p>变量声明的时候，变量赋值并没有被提升，只是声明被提升了。但是，同时要注意函数声明与函数表达式的区别: 函数声明会在当前作用域优先进行注册，会产生覆盖的效果，而函数表达式则是按代码顺序进行执行 。所以下面这段也就容易理解了：</p>

<pre><code class="javascript">function test() {  
    foo(); // TypeError "foo is not a function"  
    bar(); // "this will run!"  
    var foo = function () { // 变量指向函数表达式  
        alert("this won't run!");  
    }  
    function bar() { // 函数声明 函数名为bar  
        alert("this will run!");  
    }  
}  
test();
</code></pre>

<h2>参考资料</h2>

<ul>
<li><a href="https://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/">Function Declarations vs. Function Expressions</a></li>
<li><a href="http://code.tutsplus.com/tutorials/quick-tip-javascript-hoisting-explained--net-15092">JavaScript Hoisting Explained</a></li>
<li><a href="http://zha-zi.iteye.com/blog/2037026">js变量提升</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript Garden 笔记]]></title>
    <link href="http://alighters.github.io/blog/blog/2016/06/01/javascript-garden-note/"/>
    <updated>2016-06-01T08:24:00+08:00</updated>
    <id>http://alighters.github.io/blog/blog/2016/06/01/javascript-garden-note</id>
    <content type="html"><![CDATA[<blockquote><p>PS : 这是一篇针对javascript garden做的笔记，更多内容请查看原文链接 : <a href="http://bonsaiden.github.io/JavaScript-Garden/zh/">http://bonsaiden.github.io/JavaScript-Garden/zh/</a></p></blockquote>

<h2>对象</h2>

<ol>
<li>JavaScript 中所有变量都可以当作对象使用，除了null 和 undefined；</li>
<li>2.toString(); // 出错：SyntaxError，因为解析器试图将2.作为浮点数的一部分来解析，可以使用（2).toString()或者2..toString()或2 .toString();</li>
<li>使用{}可以创建一个新的对象 ，新的对象继承自Object.prototype;</li>
<li>访问对象的属性，可以通过 “.”或者“[]”操作符，删除属性则通过delete操作符；</li>
</ol>


<!-- more -->


<h3>原型</h3>

<ol>
<li>Javascript使用的是基于prototype原型模型，基于原型链的继承方式；</li>
<li>属性查找：会向上遍历原型链，直到找到为止，找不到则返回undefined;</li>
<li>性能：提防原型链过长带来的性能问题，尽量缩短原型链、不要扩展内置类型的原型链；</li>
</ol>


<h3>hasOwnProperty</h3>

<p>用途：为了判断一个对象是否包含<em>自定义</em>属性而<em>不是</em><a href="http://bonsaiden.github.io/JavaScript-Garden/zh/#object.prototype">原型链</a>上的属性</p>

<h3>for in</h3>

<p>作用：和 in操作符一样，for in循环同样在查找对象属性时遍历原型链上的所有属性。（尽量使用hasOwnProperty来避免原型链上的属性）</p>

<h2>函数</h2>

<h3>函数声明</h3>

<pre><code class="javascript">foo(); // 正常运行，因为foo在代码运行前已经被创建
function foo() {}
</code></pre>

<h3>函数赋值与表达式</h3>

<pre><code class="javascript">foo; // 在代码运行之前，缺省值为'undefined'
foo(); // 出错：TypeError，因为foo指向的是一个函数
var foo = function() {};
</code></pre>

<pre><code class="javascript">var foo = function bar() {
    bar(); // 正常运行
}
bar(); // 出错：ReferenceError
</code></pre>

<h3>this的工作原理</h3>

<ul>
<li>当使用 Function.prototype 上的 call 或者 apply方法时，函数内的 this将会被 <strong>显式设置</strong>为函数调用的第一个参数。</li>
<li>常见误解</li>
</ul>


<pre><code class="javascript">Foo.method = function() {
    function test() {
        // this 将会被设置为全局对象（译者注：浏览器环境中也就是 window 对象）
    }
    test();
}
</code></pre>

<ul>
<li>局部变量that</li>
</ul>


<pre><code class="javascript">Foo.method = function() {
    var that = this;
    function test() {
        // 使用 that 来指向 Foo 对象
    }
    test();
}
</code></pre>

<ul>
<li>this 的晚绑定特性，当 method 被调用时，this 将会指向 Bar 的实例对象。</li>
</ul>


<pre><code class="javascript">function Foo() {}
Foo.prototype.method = function() {};

function Bar() {}
Bar.prototype = Foo.prototype;

new Bar().method(); 
</code></pre>

<h3>闭包和引用</h3>

<p>闭包是 JavaScript 一个非常重要的特性，这意味着当前作用域<strong>总是</strong>能够访问外部作用域中的变量。 因为 <a href="http://bonsaiden.github.io/JavaScript-Garden/zh/#function.scopes">函数</a> 是 JavaScript 中唯一拥有自身作用域的结构，因此闭包的创建依赖于函数。
+ 模拟私有变量</p>

<pre><code class="javascript">function Counter(start) {
  var count = start;
  return {
    increment: function() {
        count++;
    },

    get: function() {
      return count;
    }
  }
}
</code></pre>

<p>调用的方法如下：
<code>javascript
var foo = Counter(4);
foo.increment();
foo.get(); // 5
</code></p>

<pre><code class="javascript">var foo = new Counter(4);
foo.hack = function() {
    count = 1337;
} 
</code></pre>

<p>上面的代码不会改变定义在 Counter 作用域中的 count 变量的值，因为 foo.hack 没有 定义在那个作用域内。它将会创建或者覆盖全局变量 count。</p>

<ul>
<li>循环中的闭包</li>
</ul>


<pre><code class="javascript">for(var i = 0; i &lt; 10; i++) {
    setTimeout(function() {
        console.log(i);  
    }, 1000);
}
</code></pre>

<p>上面的代码不会输出数字 0到 9，而是会输出数字 10十次。当 console.log
 被调用的时候，<em>匿名</em>函数保持对外部变量 i的引用，此时for循环已经结束， i 的值被修改成了 10。为了得到想要的结果，需要在每次循环中创建变量 i的<strong>拷</strong>。
+ 避免引用错误
使用匿名包装器
外部的匿名函数会立即执行，并把 i 作为它的参数，此时函数内 e 变量就拥有了 i 的一个拷贝。
<code>javascript
for(var i = 0; i &lt; 10; i++) {
    (function(e) {
        setTimeout(function() {
            console.log(e);  
        }, 1000);
    })(i);
}
</code>
<code>javascript
for(var i = 0; i &lt; 10; i++) {
    setTimeout((function(e) {
        return function() {
            console.log(e);
        }
    })(i), 1000)
}
</code></p>

<h3>arguments对象</h3>

<p>JavaScript 中每个函数内都能访问一个特别变量 arguments。这个变量维护着所有传递到这个函数中的参数列表。
+ 转换为数组
<code>javascript
Array.prototype.slice.call(arguments);
</code></p>

<ul>
<li>传递参数</li>
</ul>


<pre><code class="javascript"> function foo() {
    bar.apply(null, arguments);
}
function bar(a, b, c) {
    // 干活
}
</code></pre>

<p>另一个技巧是同时使用 call 和 apply，创建一个快速的解绑定包装器。</p>

<pre><code class="javascript">function Foo() {}

Foo.prototype.method = function(a, b, c) {
    console.log(this, a, b, c);
};

// 创建一个解绑定的 "method"
// 输入参数为: this, arg1, arg2...argN
Foo.method = function() {

    // 结果: Foo.prototype.method.call(this, arg1, arg2... argN)
    Function.call.apply(Foo.prototype.method, arguments);
};
</code></pre>

<p>等同于下面的代码:
<code>javascript
Foo.method = function() {
    var args = Array.prototype.slice.call(arguments);
    Foo.prototype.method.apply(args[0], args.slice(1));
};
</code></p>

<ul>
<li>自动更新
arguments 对象为其内部属性以及函数形式参数创建 getter 和 setter 方法。
因此，改变形参的值会影响到 arguments 对象的值，反之亦然。</li>
<li>性能
arguments 的 getters 和 setters 方法总会被创建；因此使用 arguments 对性能不会有什么影响。 除非是需要对 arguments 对象的属性进行多次访问。
ES5 提示: 这些 getters 和 setters 在严格模式下（strict mode）不会被创建。
使用 arguments.callee会显著的影响现代 JavaScript 引擎的性能。</li>
</ul>


<pre><code class="javascript">function foo() {
    arguments.callee; // do something with this function object
    arguments.callee.caller; // and the calling function object
}

function bigLoop() {
    for(var i = 0; i &lt; 100000; i++) {
        foo(); // Would normally be inlined...
    }
}
</code></pre>

<p>上面代码中，foo 不再是一个单纯的内联函数 inlining（译者注：这里指的是解析器可以做内联处理）， 因为它需要知道它自己和它的调用者。 这不仅抵消了内联函数带来的性能提升，而且破坏了封装，因此现在函数可能要依赖于特定的上下文。</p>

<p>因此强烈建议大家不要使用 arguments.callee 和它的属性。</p>

<h3>构造函数</h3>

<p>在构造函数内部 - 也就是被调用的函数内 - this 指向新创建的对象 Object。 这个新创建的对象的 prototype 被指向到构造函数的 prototype。
如果被调用的函数没有显式的 return 表达式，则隐式的会返回 this 对象 - 也就是新创建的对象。
显式的 return 表达式将会影响返回结果，但仅限于返回的是一个对象。</p>

<p>为了创建新对象，我们可以创建一个工厂方法，并且在方法内构造一个新对象。不好的地方：
1. 会占用更多的内存，因为新创建的对象不能共享原型上的方法。
2. 为了实现继承，工厂方法需要从另外一个对象拷贝所有属性，或者把一个对象作为新创建对象的原型。
3. 放弃原型链仅仅是因为防止遗漏 new 带来的问题，这似乎和语言本身的思想相违背。</p>

<h3>作用域</h3>

<p>尽管 JavaScript 支持一对花括号创建的代码段，但是并不支持块级作用域； 而仅仅支持 函数作用域。
每次引用一个变量，JavaScript 会向上遍历整个作用域直到找到这个变量为止。 如果到达全局作用域但是这个变量仍未找到，则会抛出 ReferenceError 异常。
变量声明提升（Hoisting）: JavaScript 会提升变量声明。这意味着 var 表达式和 function 声明都将会被提升到当前作用域的顶部。</p>

<p><strong>名称解析顺序</strong></p>

<p>JavaScript 中的所有作用域，包括全局作用域，都有一个特别的名称 this 指向当前对象。
函数作用域内也有默认的变量 arguments，其中包含了传递到函数中的参数。
比如，当访问函数内的 foo 变量时，JavaScript 会按照下面顺序查找：</p>

<ol>
<li>当前作用域内是否有 var foo 的定义。</li>
<li>函数形式参数是否有使用 foo 名称的。</li>
<li>函数自身是否叫做 foo。</li>
<li>回溯到上一级作用域，然后从 #1 重新开始。</li>
</ol>


<h3>命名空间</h3>

<p>只有一个全局作用域导致的常见错误是命名冲突。在 JavaScript中，这可以通过 匿名包装器 轻松解决。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 函数创建一个命名空间&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nb">window</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 对外公开的函数，创建了闭包</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">})();</span> <span class="c1">// 立即执行此匿名函数&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="err">匿名函数被认为是</span> <span class="err">表达式；因此为了可调用性，它们首先会被执行。</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">(</span> <span class="c1">// 小括号内的函数首先被执行</span>
</span><span class='line'><span class="kd">function</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'><span class="p">)</span> <span class="c1">// 并且返回函数对象</span>
</span><span class='line'><span class="p">()</span> <span class="c1">// 调用上面的执行结果，也就是函数对象</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>数组</h2>

<h3>数组遍历与属性</h3>

<p>由于 for in 循环会枚举原型链上的所有属性，唯一过滤这些属性的方式是使用 hasOwnProperty 函数， 因此会比普通的 for 循环慢上好多倍。
length 属性的 getter 方式会简单的返回数组的长度，而 setter 方式会截断数组。
为了更好的性能，推荐使用普通的 for 循环并缓存数组的 length 属性。 使用 for in 遍历数组被认为是不好的代码习惯并倾向于产生错误和导致性能问题。</p>

<h3>Array 构造函数</h3>

<p>由于 Array 的构造函数在如何处理参数时有点模棱两可，因此总是推荐使用数组的字面语法 - [] - 来创建数组。
new Array(3); 这种调用方式，并且这个参数是数字，构造函数会返回一个 length 属性被设置为此参数的空数组。 需要特别注意的是，此时只有 length 属性被设置，真正的数组并没有生成。</p>

<h2>类型</h2>

<h3>相等与比较</h3>

<pre><code class="javascript">""           ==   "0"           // false
0            ==   ""            // true
0            ==   "0"           // true
false        ==   "false"       // false
false        ==   "0"           // true
false        ==   undefined     // false
false        ==   null          // false
null         ==   undefined     // true
" \t\r\n"    ==   0             // true
</code></pre>

<p>上面的表格展示了强制类型转换，这也是使用 == 被广泛认为是不好编程习惯的主要原因， 由于它的复杂转换规则，会导致难以跟踪的问题。</p>

<p>此外，强制类型转换也会带来性能消耗，比如一个字符串为了和一个数字进行比较，必须事先被强制转换为数字。</p>

<h3>严格等于操作符</h3>

<p>如果两个操作数类型不同就肯定不相等也有助于性能的提升。
<code>javascript
{} === {};                   // false
</code></p>

<p>强烈推荐使用严格等于操作符。如果类型需要转换，应该在比较之前显式的转换， 而不是使用语言本身复杂的强制转换规则。</p>

<h3>typeof 操作符</h3>

<p>尽管 instanceof 还有一些极少数的应用场景，typeof 只有一个实际的应用（译者注：这个实际应用是用来检测一个对象是否已经定义或者是否已经赋值）， 而这个应用却不是用来检查对象的类型。</p>

<pre><code class="javascript">Object.prototype.toString.call([])    // "[object Array]"
Object.prototype.toString.call({})    // "[object Object]"
Object.prototype.toString.call(2)    // "[object Number]"
</code></pre>

<pre><code class="javascript">// IE8
Object.prototype.toString.call(null)    // "[object Object]"
Object.prototype.toString.call(undefined)    // "[object Object]"

// Firefox 4
Object.prototype.toString.call(null)    // "[object Null]"
Object.prototype.toString.call(undefined)    // "[object Undefined]"
</code></pre>

<pre><code class="javascript">typeof foo !== 'undefined'
</code></pre>

<p>为了检测一个对象的类型，强烈推荐使用 Object.prototype.toString 方法； 因为这是唯一一个可依赖的方式。正如上面表格所示，typeof 的一些返回值在标准文档中并未定义， 因此不同的引擎实现可能不同。</p>

<p>除非为了检测一个变量是否已经定义，我们应尽量避免使用 typeof 操作符。</p>

<h3>instanceof 操作符</h3>

<p>instanceof 操作符用来比较两个操作数的构造函数。只有在比较自定义的对象时才有意义。 如果用来比较内置类型，将会和 typeof 操作符 一样用处不大。</p>

<pre><code class="javascript">new String('foo') instanceof String; // true
new String('foo') instanceof Object; // true

'foo' instanceof String; // false
'foo' instanceof Object; // false
</code></pre>

<p>instanceof 操作符应该仅仅用来比较来自同一个 JavaScript 上下文的自定义对象。 正如 typeof 操作符一样，任何其它的用法都应该是避免的。</p>

<h3>类型转换</h3>

<p>使用内置类型 Number 作为构造函数将会创建一个新的 Number 对象， 而在不使用 new 关键字的 Number 函数更像是一个数字转换器。</p>

<p>将一个值加上空字符串可以轻松转换为字符串类型。</p>

<p>使用一元的加号操作符，可以把字符串转换为数字。</p>

<p>字符串转换为数字的常用用法：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">+&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="mi">010</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span> <span class="o">===</span> <span class="mi">10</span>
</span><span class='line'><span class="nb">Number</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="mi">010</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;)</span> <span class="o">===</span> <span class="mi">10</span>
</span><span class='line'><span class="nb">parseInt</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="mi">010</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="mi">10</span><span class="p">)</span> <span class="o">===</span> <span class="mi">10</span>  <span class="c1">// 用来转换为整数&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;+&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="mf">010.2</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span> <span class="o">===</span> <span class="mf">10.2</span>
</span><span class='line'><span class="nb">Number</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="mf">010.2</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;)</span> <span class="o">===</span> <span class="mf">10.2</span>
</span><span class='line'><span class="nb">parseInt</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="mf">010.2</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="mi">10</span><span class="p">)</span> <span class="o">===</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>转换为布尔型：
通过使用 否 操作符两次，可以把一个值转换为布尔型。</p>

<pre><code class="javascript">!!'foo';   // true
!!'';      // false
!!'0';     // true
!!'1';     // true
!!'-1'     // true
!!{};      // true
!!true;    // true
</code></pre>

<h2>核心</h2>

<h3>为什么不要使用</h3>

<p>eval 只在被直接调用并且调用函数就是 eval 本身时，才在当前作用域中执行。</p>

<pre><code class="javascript">var foo = 1;
function test() {
    var foo = 2;
    var bar = eval;
    bar('foo = 3');
    return foo;
}
test(); // 2
foo; // 3
</code></pre>

<p>上面的代码等价于在全局作用域中调用 eval</p>

<p>在任何情况下我们都应该避免使用 eval 函数。99.9% 使用 eval 的场景都有不使用 eval 的解决方案。</p>

<h3>undefined 和 null</h3>

<p>undefined 是一个值为 undefined 的类型。</p>

<p>这个语言也定义了一个全局变量，它的值是 undefined，这个变量也被称为 undefined。 但是这个变量不是一个常量，也不是一个关键字。这意味着它的值可以轻易被覆盖。</p>

<ul>
<li>处理 undefined 值的改变
由于全局变量 undefined 只是保存了 undefined 类型实际值的副本， 因此对它赋新值不会改变类型 undefined 的值。</li>
</ul>


<p>为了避免可能对 undefined 值的改变，一个常用的技巧是使用一个传递到匿名包装器的额外参数。 在调用时，这个参数不会获取任何值。</p>

<p>另外一种达到相同目的方法是在函数内使用变量声明。</p>

<h3>null的用处</h3>

<p>它在 JavaScript 内部有一些使用场景（比如声明原型链的终结 Foo.prototype = null），但是大多数情况下都可以使用 undefined 来代替。</p>

<h3>自动分号插入</h3>

<p>JavaScript 不是一个没有分号的语言，恰恰相反上它需要分号来就解析源代码。 因此 JavaScript 解析器在遇到由于缺少分号导致的解析错误时，会自动在源代码中插入分号。</p>

<p>建议绝对不要省略分号，同时也提倡将花括号和相应的表达式放在一行， 对于只有一行代码的 if 或者 else 表达式，也不应该省略花括号。 这些良好的编程习惯不仅可以提到代码的一致性，而且可以防止解析器改变代码行为的错误处理。</p>

<h2>其它</h2>

<h3>setTimeout 和 setInterval</h3>

<p>作为第一个参数的函数将会在全局作用域中执行，因此函数内的 this 将会指向这个全局对象。
<code>javascript
function Foo() {
    this.value = 42;
    this.method = function() {
        // this 指向全局对象
        console.log(this.value); // 输出：undefined
    };
    setTimeout(this.method, 500);
}
new Foo();
</code></p>

<ul>
<li>setInterval 的堆调用</li>
</ul>


<p>当回调函数的执行被阻塞时，setInterval 仍然会发布更多的回调指令。在很小的定时间隔情况下，这会导致回调函数被堆积起来。</p>

<ul>
<li>隐藏使用 eval
setTimeout 和 setInterval 也接受第一个参数为字符串的情况。 这个特性绝对不要使用，因为它在内部使用了 eval。</li>
</ul>


<pre><code class="javascript">function foo() {
    // 将会被调用
}

function bar() {
    function foo() {
        // 不会被调用
    }
    setTimeout('foo()', 1000);
}
bar();
</code></pre>

<p>由于 eval 在这种情况下不是被直接调用，因此传递到 setTimeout 的字符串会自全局作用域中执行； 因此，上面的回调函数使用的不是定义在 bar 作用域中的局部变量 foo。</p>

<p>绝对不要使用字符串作为 setTimeout 或者 setInterval 的第一个参数， 这么写的代码明显质量很差。当需要向回调函数传递参数时，可以创建一个匿名函数，在函数内执行真实的回调函数。</p>
]]></content>
  </entry>
  
</feed>
